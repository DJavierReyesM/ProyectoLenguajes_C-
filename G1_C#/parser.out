Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ADD
    AND
    BYTE
    CASE
    CLASS
    COMILLA_DOBLE
    COMILLA_SIMPLE
    CONST
    COR_DER
    COR_IZQ
    C_IDENT_TEXTUAL
    DEFAULT
    DOS_PUNTOS
    ELSE
    FINALLY
    GLOBAL
    IN
    IR
    LAMBDA
    LEFTSHIFT_EQUAL
    LET
    NEGACION
    NOR
    NULL
    NULL_EQUAL
    NULL_VAL
    OBJECT
    ON
    OP_TERNARIO
    OR
    ORDERBY
    RETURN
    RIGHTSHIFT_EQUAL
    SHIFT_MAYOR
    SHIFT_MENOR
    SIMPLE_AND
    SIMPLE_OR
    STRUCT
    SWITCH
    THIS
    TO_UPPER
    TYPEOF
    VAR
    WHEN
    WHERE

Grammar

Rule 0     S' -> body
Rule 1     body -> asignacion END_OF_LINE
Rule 2     body -> comparacion
Rule 3     body -> estructura_control
Rule 4     body -> estructura_datos
Rule 5     body -> expresion END_OF_LINE
Rule 6     body -> salida_entrada END_OF_LINE
Rule 7     body -> funcion
Rule 8     body -> declaracion END_OF_LINE
Rule 9     body -> empty
Rule 10    body -> funciones_estructura_datos END_OF_LINE
Rule 11    valor -> CHAR
Rule 12    valor -> numero
Rule 13    valor -> BOOL
Rule 14    valor -> STRING
Rule 15    valor -> IDENTIFICADOR
Rule 16    numero -> FLOAT
Rule 17    numero -> DOUBLE
Rule 18    numero -> INT
Rule 19    ftipo -> valor_tipo
Rule 20    ftipo -> VOID
Rule 21    valor_tipo -> CHAR_TYPE
Rule 22    valor_tipo -> FLOAT_TYPE
Rule 23    valor_tipo -> DOUBLE_TYPE
Rule 24    valor_tipo -> INT_TYPE
Rule 25    valor_tipo -> BOOL_TYPE
Rule 26    valor_tipo -> STRING_TYPE
Rule 27    valor_tipo_inicializador -> FLOAT_TYPE
Rule 28    valor_tipo_inicializador -> DOUBLE_TYPE
Rule 29    valor_tipo_inicializador -> STRING_TYPE
Rule 30    valor_tipo_inicializador -> INT_TYPE
Rule 31    valor_tipo_inicializador -> BOOL_TYPE
Rule 32    valor_tipo_inicializador -> CHAR_TYPE
Rule 33    valor_tipo_inicializador -> IDENTIFICADOR
Rule 34    modificador_acceso -> PRIVATE
Rule 35    modificador_acceso -> PROTECTED
Rule 36    modificador_acceso -> PUBLIC
Rule 37    operador_realacional -> IGUAL_IGUAL
Rule 38    operador_realacional -> NO_IGUAL
Rule 39    operador_realacional -> MENOR_QUE
Rule 40    operador_realacional -> MENOR_O_IGUAL_QUE
Rule 41    operador_realacional -> MAYOR_QUE
Rule 42    operador_realacional -> MAYOR_O_IGUAL_QUE
Rule 43    operador_aritmentico -> SUMA
Rule 44    operador_aritmentico -> RESTA
Rule 45    operador_aritmentico -> MULTIPLICACION
Rule 46    operador_aritmentico -> DIVISION
Rule 47    operador_aritmentico -> MODULO
Rule 48    operador_condicional -> IGUAL_IGUAL
Rule 49    operador_condicional -> NO_IGUAL
Rule 50    operador_condicional -> MENOR_QUE
Rule 51    operador_condicional -> MENOR_O_IGUAL_QUE
Rule 52    operador_condicional -> MAYOR_QUE
Rule 53    operador_condicional -> MAYOR_O_IGUAL_QUE
Rule 54    operacion_string -> STRING SUMA STRING
Rule 55    operacion_string -> STRING SUMA IDENTIFICADOR
Rule 56    operacion_string -> IDENTIFICADOR SUMA STRING
Rule 57    operacion_string -> IDENTIFICADOR SUMA IDENTIFICADOR
Rule 58    empty -> END_OF_LINE
Rule 59    asignacion -> asignacionSimple
Rule 60    asignacion -> asignacionCompuesta
Rule 61    asignacionSimple -> IDENTIFICADOR IGUAL valor
Rule 62    asignacionSimple -> IDENTIFICADOR IGUAL expresion
Rule 63    asignacionSimple -> IDENTIFICADOR IGUAL salida_entrada
Rule 64    asignacionCompuesta -> asignacionCompuesta_Logic
Rule 65    asignacionCompuesta -> asignacionCompuesta_Number
Rule 66    asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic BOOL
Rule 67    asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic expresion_condicional
Rule 68    asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR
Rule 69    asignacionCompuesta_Number -> IDENTIFICADOR operadoresCompuestosNumber numero
Rule 70    asignacionCompuesta_Number -> IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica
Rule 71    asignacionCompuesta_Number -> IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR
Rule 72    operadoresCompuestosNumber -> AUMENTADO
Rule 73    operadoresCompuestosNumber -> DECREMENTADO
Rule 74    operadoresCompuestosNumber -> MULTIPLICADO_POR
Rule 75    operadoresCompuestosNumber -> DIVIDIDO_POR
Rule 76    operadoresCompuestosNumber -> MODULO_DE
Rule 77    operadoresCompuestosLogic -> AND_EQUAL
Rule 78    operadoresCompuestosLogic -> OR_EQUAL
Rule 79    operadoresCompuestosLogic -> EXC_OREQUAL
Rule 80    declaracion -> valor_tipo IDENTIFICADOR
Rule 81    declaracion -> valor_tipo asignacionSimple
Rule 82    comparacion -> valor operador_realacional valor
Rule 83    estructura_control -> while
Rule 84    estructura_control -> switch_case
Rule 85    estructura_control -> for
Rule 86    while -> while_normal
Rule 87    while -> while_do
Rule 88    while_normal -> WHILE PAR_IZQ expresion_condicional PAR_DER LLAVE_IZQ body_while LLAVE_DER
Rule 89    while_do -> DO LLAVE_IZQ body_while LLAVE_DER WHILE PAR_IZQ expresion_condicional PAR_DER END_OF_LINE
Rule 90    body_while -> asignacion END_OF_LINE
Rule 91    body_while -> declaracion END_OF_LINE
Rule 92    body_while -> salida_entrada END_OF_LINE
Rule 93    body_while -> BREAK END_OF_LINE
Rule 94    body_while -> CONTINUE END_OF_LINE
Rule 95    body_while -> asignacion END_OF_LINE body_while
Rule 96    body_while -> declaracion END_OF_LINE body_while
Rule 97    body_while -> salida_entrada END_OF_LINE body_while
Rule 98    body_while -> BREAK END_OF_LINE body_while
Rule 99    body_while -> CONTINUE END_OF_LINE body_while
Rule 100   switch_case -> IGUAL
Rule 101   for -> FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DER
Rule 102   forIterador -> IDENTIFICADOR operadorForIteracion
Rule 103   operadorForIteracion -> INCREMENTO
Rule 104   operadorForIteracion -> DECREMENTO
Rule 105   forCondicion -> IDENTIFICADOR operador_condicional valorForCondicion
Rule 106   valorForCondicion -> FLOAT
Rule 107   valorForCondicion -> DOUBLE
Rule 108   valorForCondicion -> INT
Rule 109   valorForCondicion -> IDENTIFICADOR
Rule 110   forInicializador -> tipoDatoForInicializador IDENTIFICADOR IGUAL valorForInicializador
Rule 111   forInicializador -> IDENTIFICADOR IGUAL valorForInicializador
Rule 112   tipoDatoForInicializador -> FLOAT_TYPE
Rule 113   tipoDatoForInicializador -> DOUBLE_TYPE
Rule 114   tipoDatoForInicializador -> INT_TYPE
Rule 115   valorForInicializador -> FLOAT
Rule 116   valorForInicializador -> DOUBLE
Rule 117   valorForInicializador -> INT
Rule 118   valorForInicializador -> IDENTIFICADOR
Rule 119   estructura_datos -> lista
Rule 120   estructura_datos -> stack
Rule 121   lista -> LIST tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINE
Rule 122   tipoLista -> MENOR_QUE valor_tipo_inicializador MAYOR_QUE
Rule 123   stack -> STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL NEW STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINE
Rule 124   funciones_estructura_datos -> stack_push
Rule 125   funciones_estructura_datos -> stack_pop
Rule 126   stack_push -> IDENTIFICADOR PUNTO PUSH PAR_IZQ valor PAR_DER
Rule 127   stack_pop -> IDENTIFICADOR PUNTO POP PAR_IZQ PAR_DER
Rule 128   expresion -> expresion_operacion_aritmetica
Rule 129   expresion -> expresion_condicional
Rule 130   expresion_operacion_aritmetica -> numero operador_aritmentico numero
Rule 131   expresion_operacion_aritmetica -> IDENTIFICADOR operador_aritmentico IDENTIFICADOR
Rule 132   expresion_condicional -> numero operador_condicional numero
Rule 133   expresion_condicional -> IDENTIFICADOR operador_condicional IDENTIFICADOR
Rule 134   expresion_condicional -> IDENTIFICADOR operador_condicional numero
Rule 135   expresion_condicional -> numero operador_condicional IDENTIFICADOR
Rule 136   salida_entrada -> salida_uno
Rule 137   salida_entrada -> salida_dos
Rule 138   salida_entrada -> salida_tres
Rule 139   salida_uno -> CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER
Rule 140   salida_uno -> CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER
Rule 141   salida_uno -> CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER
Rule 142   salida_dos -> CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER
Rule 143   salida_tres -> CONSOLE_READLINE PAR_IZQ PAR_DER
Rule 144   funcion -> funcion_tipo_uno
Rule 145   funcion -> funcion_tipo_tres
Rule 146   funcion_tipo_uno -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ body LLAVE_DER
Rule 147   funcion_tipo_tres -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ parametrosF PAR_DER LLAVE_IZQ bodyF LLAVE_DER
Rule 148   parametrosF -> declaracion
Rule 149   parametrosF -> declaracion COMA parametrosF
Rule 150   bodyF -> asignacion END_OF_LINE
Rule 151   bodyF -> declaracion END_OF_LINE
Rule 152   bodyF -> salida_entrada END_OF_LINE
Rule 153   bodyF -> asignacion END_OF_LINE bodyF
Rule 154   bodyF -> declaracion END_OF_LINE bodyF
Rule 155   bodyF -> salida_entrada END_OF_LINE bodyF

Terminals, with rules where they appear

ADD                  : 
AND                  : 
AND_EQUAL            : 77
AUMENTADO            : 72
BOOL                 : 13 66
BOOL_TYPE            : 25 31
BREAK                : 93 98
BYTE                 : 
CASE                 : 
CHAR                 : 11
CHAR_TYPE            : 21 32
CLASS                : 
COMA                 : 149
COMILLA_DOBLE        : 
COMILLA_SIMPLE       : 
CONSOLE_READLINE     : 143
CONSOLE_WRITELINE    : 139 140 141 142
CONST                : 
CONTINUE             : 94 99
COR_DER              : 
COR_IZQ              : 
C_CADENA_INTERPOLADA : 142
C_IDENT_TEXTUAL      : 
DECREMENTADO         : 73
DECREMENTO           : 104
DEFAULT              : 
DIVIDIDO_POR         : 75
DIVISION             : 46
DO                   : 89
DOS_PUNTOS           : 
DOUBLE               : 17 107 116
DOUBLE_TYPE          : 23 28 113
ELSE                 : 
END_OF_LINE          : 1 5 6 8 10 58 89 90 91 92 93 94 95 96 97 98 99 101 101 121 123 150 151 152 153 154 155
EXC_OREQUAL          : 79
FINALLY              : 
FLOAT                : 16 106 115
FLOAT_TYPE           : 22 27 112
FOR                  : 101
GLOBAL               : 
IDENTIFICADOR        : 15 33 55 56 57 57 61 62 63 66 67 68 68 69 70 71 71 80 102 105 109 110 111 118 121 123 126 127 131 131 133 133 134 135 141 146 147
IGUAL                : 61 62 63 100 110 111 121 123
IGUAL_IGUAL          : 37 48
IN                   : 
INCREMENTO           : 103
INT                  : 18 108 117
INT_TYPE             : 24 30 114
IR                   : 
LAMBDA               : 
LEFTSHIFT_EQUAL      : 
LET                  : 
LIST                 : 121 121
LLAVE_DER            : 88 89 101 146 147
LLAVE_IZQ            : 88 89 101 146 147
MAYOR_O_IGUAL_QUE    : 42 53
MAYOR_QUE            : 41 52 122 123 123
MENOR_O_IGUAL_QUE    : 40 51
MENOR_QUE            : 39 50 122 123 123
MODULO               : 47
MODULO_DE            : 76
MULTIPLICACION       : 45
MULTIPLICADO_POR     : 74
NEGACION             : 
NEW                  : 121 123
NOR                  : 
NO_IGUAL             : 38 49
NULL                 : 
NULL_EQUAL           : 
NULL_VAL             : 
OBJECT               : 
ON                   : 
OP_TERNARIO          : 
OR                   : 
ORDERBY              : 
OR_EQUAL             : 78
PAR_DER              : 88 89 101 121 123 126 127 139 140 141 142 143 146 147
PAR_IZQ              : 88 89 101 121 123 126 127 139 140 141 142 143 146 147
POP                  : 127
PRIVATE              : 34
PROTECTED            : 35
PUBLIC               : 36
PUNTO                : 126 127
PUSH                 : 126
RESTA                : 44
RETURN               : 
RIGHTSHIFT_EQUAL     : 
SHIFT_MAYOR          : 
SHIFT_MENOR          : 
SIMPLE_AND           : 
SIMPLE_OR            : 
STACK                : 123 123
STRING               : 14 54 54 55 56 139 142
STRING_TYPE          : 26 29
STRUCT               : 
SUMA                 : 43 54 55 56 57
SWITCH               : 
THIS                 : 
TO_UPPER             : 
TYPEOF               : 
VAR                  : 
VOID                 : 20 146 147
WHEN                 : 
WHERE                : 
WHILE                : 88 89
error                : 

Nonterminals, with rules where they appear

asignacion           : 1 90 95 150 153
asignacionCompuesta  : 60
asignacionCompuesta_Logic : 64
asignacionCompuesta_Number : 65
asignacionSimple     : 59 81
body                 : 101 146 0
bodyF                : 147 153 154 155
body_while           : 88 89 95 96 97 98 99
comparacion          : 2
declaracion          : 8 91 96 148 149 151 154
empty                : 9
estructura_control   : 3
estructura_datos     : 4
expresion            : 5 62
expresion_condicional : 67 88 89 129
expresion_operacion_aritmetica : 70 128
for                  : 85
forCondicion         : 101
forInicializador     : 101
forIterador          : 101
ftipo                : 
funcion              : 7
funcion_tipo_tres    : 145
funcion_tipo_uno     : 144
funciones_estructura_datos : 10
lista                : 119
modificador_acceso   : 146 147
numero               : 12 69 130 130 132 132 134 135
operacion_string     : 140
operadorForIteracion : 102
operador_aritmentico : 130 131
operador_condicional : 105 132 133 134 135
operador_realacional : 82
operadoresCompuestosLogic : 66 67 68
operadoresCompuestosNumber : 69 70 71
parametrosF          : 147 149
salida_dos           : 137
salida_entrada       : 6 63 92 97 152 155
salida_tres          : 138
salida_uno           : 136
stack                : 120
stack_pop            : 125
stack_push           : 124
switch_case          : 84
tipoDatoForInicializador : 110
tipoLista            : 121 121
valor                : 61 82 82 126
valorForCondicion    : 105
valorForInicializador : 110 111
valor_tipo           : 19 80 81
valor_tipo_inicializador : 122 123 123
while                : 83
while_do             : 87
while_normal         : 86

Parsing method: LALR

state 0

    (0) S' -> . body
    (1) body -> . asignacion END_OF_LINE
    (2) body -> . comparacion
    (3) body -> . estructura_control
    (4) body -> . estructura_datos
    (5) body -> . expresion END_OF_LINE
    (6) body -> . salida_entrada END_OF_LINE
    (7) body -> . funcion
    (8) body -> . declaracion END_OF_LINE
    (9) body -> . empty
    (10) body -> . funciones_estructura_datos END_OF_LINE
    (59) asignacion -> . asignacionSimple
    (60) asignacion -> . asignacionCompuesta
    (82) comparacion -> . valor operador_realacional valor
    (83) estructura_control -> . while
    (84) estructura_control -> . switch_case
    (85) estructura_control -> . for
    (119) estructura_datos -> . lista
    (120) estructura_datos -> . stack
    (128) expresion -> . expresion_operacion_aritmetica
    (129) expresion -> . expresion_condicional
    (136) salida_entrada -> . salida_uno
    (137) salida_entrada -> . salida_dos
    (138) salida_entrada -> . salida_tres
    (144) funcion -> . funcion_tipo_uno
    (145) funcion -> . funcion_tipo_tres
    (80) declaracion -> . valor_tipo IDENTIFICADOR
    (81) declaracion -> . valor_tipo asignacionSimple
    (58) empty -> . END_OF_LINE
    (124) funciones_estructura_datos -> . stack_push
    (125) funciones_estructura_datos -> . stack_pop
    (61) asignacionSimple -> . IDENTIFICADOR IGUAL valor
    (62) asignacionSimple -> . IDENTIFICADOR IGUAL expresion
    (63) asignacionSimple -> . IDENTIFICADOR IGUAL salida_entrada
    (64) asignacionCompuesta -> . asignacionCompuesta_Logic
    (65) asignacionCompuesta -> . asignacionCompuesta_Number
    (11) valor -> . CHAR
    (12) valor -> . numero
    (13) valor -> . BOOL
    (14) valor -> . STRING
    (15) valor -> . IDENTIFICADOR
    (86) while -> . while_normal
    (87) while -> . while_do
    (100) switch_case -> . IGUAL
    (101) for -> . FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DER
    (121) lista -> . LIST tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINE
    (123) stack -> . STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL NEW STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINE
    (130) expresion_operacion_aritmetica -> . numero operador_aritmentico numero
    (131) expresion_operacion_aritmetica -> . IDENTIFICADOR operador_aritmentico IDENTIFICADOR
    (132) expresion_condicional -> . numero operador_condicional numero
    (133) expresion_condicional -> . IDENTIFICADOR operador_condicional IDENTIFICADOR
    (134) expresion_condicional -> . IDENTIFICADOR operador_condicional numero
    (135) expresion_condicional -> . numero operador_condicional IDENTIFICADOR
    (139) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER
    (140) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER
    (141) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER
    (142) salida_dos -> . CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER
    (143) salida_tres -> . CONSOLE_READLINE PAR_IZQ PAR_DER
    (146) funcion_tipo_uno -> . modificador_acceso VOID IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ body LLAVE_DER
    (147) funcion_tipo_tres -> . modificador_acceso VOID IDENTIFICADOR PAR_IZQ parametrosF PAR_DER LLAVE_IZQ bodyF LLAVE_DER
    (21) valor_tipo -> . CHAR_TYPE
    (22) valor_tipo -> . FLOAT_TYPE
    (23) valor_tipo -> . DOUBLE_TYPE
    (24) valor_tipo -> . INT_TYPE
    (25) valor_tipo -> . BOOL_TYPE
    (26) valor_tipo -> . STRING_TYPE
    (126) stack_push -> . IDENTIFICADOR PUNTO PUSH PAR_IZQ valor PAR_DER
    (127) stack_pop -> . IDENTIFICADOR PUNTO POP PAR_IZQ PAR_DER
    (66) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic BOOL
    (67) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic expresion_condicional
    (68) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR
    (69) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber numero
    (70) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica
    (71) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR
    (16) numero -> . FLOAT
    (17) numero -> . DOUBLE
    (18) numero -> . INT
    (88) while_normal -> . WHILE PAR_IZQ expresion_condicional PAR_DER LLAVE_IZQ body_while LLAVE_DER
    (89) while_do -> . DO LLAVE_IZQ body_while LLAVE_DER WHILE PAR_IZQ expresion_condicional PAR_DER END_OF_LINE
    (34) modificador_acceso -> . PRIVATE
    (35) modificador_acceso -> . PROTECTED
    (36) modificador_acceso -> . PUBLIC

    END_OF_LINE     shift and go to state 3
    IDENTIFICADOR   shift and go to state 29
    CHAR            shift and go to state 35
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    IGUAL           shift and go to state 32
    FOR             shift and go to state 41
    LIST            shift and go to state 42
    STACK           shift and go to state 43
    CONSOLE_WRITELINE shift and go to state 44
    CONSOLE_READLINE shift and go to state 45
    CHAR_TYPE       shift and go to state 47
    FLOAT_TYPE      shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    INT_TYPE        shift and go to state 50
    BOOL_TYPE       shift and go to state 51
    STRING_TYPE     shift and go to state 52
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55
    WHILE           shift and go to state 56
    DO              shift and go to state 57
    PRIVATE         shift and go to state 58
    PROTECTED       shift and go to state 59
    PUBLIC          shift and go to state 60

    body                           shift and go to state 1
    asignacion                     shift and go to state 2
    comparacion                    shift and go to state 4
    estructura_control             shift and go to state 5
    estructura_datos               shift and go to state 6
    expresion                      shift and go to state 7
    salida_entrada                 shift and go to state 8
    funcion                        shift and go to state 9
    declaracion                    shift and go to state 10
    empty                          shift and go to state 11
    funciones_estructura_datos     shift and go to state 12
    asignacionSimple               shift and go to state 13
    asignacionCompuesta            shift and go to state 14
    valor                          shift and go to state 15
    while                          shift and go to state 16
    switch_case                    shift and go to state 17
    for                            shift and go to state 18
    lista                          shift and go to state 19
    stack                          shift and go to state 20
    expresion_operacion_aritmetica shift and go to state 21
    expresion_condicional          shift and go to state 22
    salida_uno                     shift and go to state 23
    salida_dos                     shift and go to state 24
    salida_tres                    shift and go to state 25
    funcion_tipo_uno               shift and go to state 26
    funcion_tipo_tres              shift and go to state 27
    valor_tipo                     shift and go to state 28
    stack_push                     shift and go to state 30
    stack_pop                      shift and go to state 31
    asignacionCompuesta_Logic      shift and go to state 33
    asignacionCompuesta_Number     shift and go to state 34
    numero                         shift and go to state 36
    while_normal                   shift and go to state 39
    while_do                       shift and go to state 40
    modificador_acceso             shift and go to state 46

state 1

    (0) S' -> body .



state 2

    (1) body -> asignacion . END_OF_LINE

    END_OF_LINE     shift and go to state 61


state 3

    (58) empty -> END_OF_LINE .

    $end            reduce using rule 58 (empty -> END_OF_LINE .)
    LLAVE_DER       reduce using rule 58 (empty -> END_OF_LINE .)


state 4

    (2) body -> comparacion .

    $end            reduce using rule 2 (body -> comparacion .)
    LLAVE_DER       reduce using rule 2 (body -> comparacion .)


state 5

    (3) body -> estructura_control .

    $end            reduce using rule 3 (body -> estructura_control .)
    LLAVE_DER       reduce using rule 3 (body -> estructura_control .)


state 6

    (4) body -> estructura_datos .

    $end            reduce using rule 4 (body -> estructura_datos .)
    LLAVE_DER       reduce using rule 4 (body -> estructura_datos .)


state 7

    (5) body -> expresion . END_OF_LINE

    END_OF_LINE     shift and go to state 62


state 8

    (6) body -> salida_entrada . END_OF_LINE

    END_OF_LINE     shift and go to state 63


state 9

    (7) body -> funcion .

    $end            reduce using rule 7 (body -> funcion .)
    LLAVE_DER       reduce using rule 7 (body -> funcion .)


state 10

    (8) body -> declaracion . END_OF_LINE

    END_OF_LINE     shift and go to state 64


state 11

    (9) body -> empty .

    $end            reduce using rule 9 (body -> empty .)
    LLAVE_DER       reduce using rule 9 (body -> empty .)


state 12

    (10) body -> funciones_estructura_datos . END_OF_LINE

    END_OF_LINE     shift and go to state 65


state 13

    (59) asignacion -> asignacionSimple .

    END_OF_LINE     reduce using rule 59 (asignacion -> asignacionSimple .)


state 14

    (60) asignacion -> asignacionCompuesta .

    END_OF_LINE     reduce using rule 60 (asignacion -> asignacionCompuesta .)


state 15

    (82) comparacion -> valor . operador_realacional valor
    (37) operador_realacional -> . IGUAL_IGUAL
    (38) operador_realacional -> . NO_IGUAL
    (39) operador_realacional -> . MENOR_QUE
    (40) operador_realacional -> . MENOR_O_IGUAL_QUE
    (41) operador_realacional -> . MAYOR_QUE
    (42) operador_realacional -> . MAYOR_O_IGUAL_QUE

    IGUAL_IGUAL     shift and go to state 67
    NO_IGUAL        shift and go to state 68
    MENOR_QUE       shift and go to state 69
    MENOR_O_IGUAL_QUE shift and go to state 70
    MAYOR_QUE       shift and go to state 71
    MAYOR_O_IGUAL_QUE shift and go to state 72

    operador_realacional           shift and go to state 66

state 16

    (83) estructura_control -> while .

    $end            reduce using rule 83 (estructura_control -> while .)
    LLAVE_DER       reduce using rule 83 (estructura_control -> while .)


state 17

    (84) estructura_control -> switch_case .

    $end            reduce using rule 84 (estructura_control -> switch_case .)
    LLAVE_DER       reduce using rule 84 (estructura_control -> switch_case .)


state 18

    (85) estructura_control -> for .

    $end            reduce using rule 85 (estructura_control -> for .)
    LLAVE_DER       reduce using rule 85 (estructura_control -> for .)


state 19

    (119) estructura_datos -> lista .

    $end            reduce using rule 119 (estructura_datos -> lista .)
    LLAVE_DER       reduce using rule 119 (estructura_datos -> lista .)


state 20

    (120) estructura_datos -> stack .

    $end            reduce using rule 120 (estructura_datos -> stack .)
    LLAVE_DER       reduce using rule 120 (estructura_datos -> stack .)


state 21

    (128) expresion -> expresion_operacion_aritmetica .

    END_OF_LINE     reduce using rule 128 (expresion -> expresion_operacion_aritmetica .)
    COMA            reduce using rule 128 (expresion -> expresion_operacion_aritmetica .)
    PAR_DER         reduce using rule 128 (expresion -> expresion_operacion_aritmetica .)


state 22

    (129) expresion -> expresion_condicional .

    END_OF_LINE     reduce using rule 129 (expresion -> expresion_condicional .)
    COMA            reduce using rule 129 (expresion -> expresion_condicional .)
    PAR_DER         reduce using rule 129 (expresion -> expresion_condicional .)


state 23

    (136) salida_entrada -> salida_uno .

    END_OF_LINE     reduce using rule 136 (salida_entrada -> salida_uno .)
    COMA            reduce using rule 136 (salida_entrada -> salida_uno .)
    PAR_DER         reduce using rule 136 (salida_entrada -> salida_uno .)


state 24

    (137) salida_entrada -> salida_dos .

    END_OF_LINE     reduce using rule 137 (salida_entrada -> salida_dos .)
    COMA            reduce using rule 137 (salida_entrada -> salida_dos .)
    PAR_DER         reduce using rule 137 (salida_entrada -> salida_dos .)


state 25

    (138) salida_entrada -> salida_tres .

    END_OF_LINE     reduce using rule 138 (salida_entrada -> salida_tres .)
    COMA            reduce using rule 138 (salida_entrada -> salida_tres .)
    PAR_DER         reduce using rule 138 (salida_entrada -> salida_tres .)


state 26

    (144) funcion -> funcion_tipo_uno .

    $end            reduce using rule 144 (funcion -> funcion_tipo_uno .)
    LLAVE_DER       reduce using rule 144 (funcion -> funcion_tipo_uno .)


state 27

    (145) funcion -> funcion_tipo_tres .

    $end            reduce using rule 145 (funcion -> funcion_tipo_tres .)
    LLAVE_DER       reduce using rule 145 (funcion -> funcion_tipo_tres .)


state 28

    (80) declaracion -> valor_tipo . IDENTIFICADOR
    (81) declaracion -> valor_tipo . asignacionSimple
    (61) asignacionSimple -> . IDENTIFICADOR IGUAL valor
    (62) asignacionSimple -> . IDENTIFICADOR IGUAL expresion
    (63) asignacionSimple -> . IDENTIFICADOR IGUAL salida_entrada

    IDENTIFICADOR   shift and go to state 73

    asignacionSimple               shift and go to state 74

state 29

    (61) asignacionSimple -> IDENTIFICADOR . IGUAL valor
    (62) asignacionSimple -> IDENTIFICADOR . IGUAL expresion
    (63) asignacionSimple -> IDENTIFICADOR . IGUAL salida_entrada
    (15) valor -> IDENTIFICADOR .
    (131) expresion_operacion_aritmetica -> IDENTIFICADOR . operador_aritmentico IDENTIFICADOR
    (133) expresion_condicional -> IDENTIFICADOR . operador_condicional IDENTIFICADOR
    (134) expresion_condicional -> IDENTIFICADOR . operador_condicional numero
    (126) stack_push -> IDENTIFICADOR . PUNTO PUSH PAR_IZQ valor PAR_DER
    (127) stack_pop -> IDENTIFICADOR . PUNTO POP PAR_IZQ PAR_DER
    (66) asignacionCompuesta_Logic -> IDENTIFICADOR . operadoresCompuestosLogic BOOL
    (67) asignacionCompuesta_Logic -> IDENTIFICADOR . operadoresCompuestosLogic expresion_condicional
    (68) asignacionCompuesta_Logic -> IDENTIFICADOR . operadoresCompuestosLogic IDENTIFICADOR
    (69) asignacionCompuesta_Number -> IDENTIFICADOR . operadoresCompuestosNumber numero
    (70) asignacionCompuesta_Number -> IDENTIFICADOR . operadoresCompuestosNumber expresion_operacion_aritmetica
    (71) asignacionCompuesta_Number -> IDENTIFICADOR . operadoresCompuestosNumber IDENTIFICADOR
    (43) operador_aritmentico -> . SUMA
    (44) operador_aritmentico -> . RESTA
    (45) operador_aritmentico -> . MULTIPLICACION
    (46) operador_aritmentico -> . DIVISION
    (47) operador_aritmentico -> . MODULO
    (48) operador_condicional -> . IGUAL_IGUAL
    (49) operador_condicional -> . NO_IGUAL
    (50) operador_condicional -> . MENOR_QUE
    (51) operador_condicional -> . MENOR_O_IGUAL_QUE
    (52) operador_condicional -> . MAYOR_QUE
    (53) operador_condicional -> . MAYOR_O_IGUAL_QUE
    (77) operadoresCompuestosLogic -> . AND_EQUAL
    (78) operadoresCompuestosLogic -> . OR_EQUAL
    (79) operadoresCompuestosLogic -> . EXC_OREQUAL
    (72) operadoresCompuestosNumber -> . AUMENTADO
    (73) operadoresCompuestosNumber -> . DECREMENTADO
    (74) operadoresCompuestosNumber -> . MULTIPLICADO_POR
    (75) operadoresCompuestosNumber -> . DIVIDIDO_POR
    (76) operadoresCompuestosNumber -> . MODULO_DE

  ! shift/reduce conflict for IGUAL_IGUAL resolved as shift
  ! shift/reduce conflict for NO_IGUAL resolved as shift
  ! shift/reduce conflict for MENOR_QUE resolved as shift
  ! shift/reduce conflict for MENOR_O_IGUAL_QUE resolved as shift
  ! shift/reduce conflict for MAYOR_QUE resolved as shift
  ! shift/reduce conflict for MAYOR_O_IGUAL_QUE resolved as shift
    IGUAL           shift and go to state 75
    PUNTO           shift and go to state 78
    SUMA            shift and go to state 81
    RESTA           shift and go to state 82
    MULTIPLICACION  shift and go to state 83
    DIVISION        shift and go to state 84
    MODULO          shift and go to state 85
    IGUAL_IGUAL     shift and go to state 86
    NO_IGUAL        shift and go to state 87
    MENOR_QUE       shift and go to state 88
    MENOR_O_IGUAL_QUE shift and go to state 89
    MAYOR_QUE       shift and go to state 90
    MAYOR_O_IGUAL_QUE shift and go to state 91
    AND_EQUAL       shift and go to state 92
    OR_EQUAL        shift and go to state 93
    EXC_OREQUAL     shift and go to state 94
    AUMENTADO       shift and go to state 95
    DECREMENTADO    shift and go to state 96
    MULTIPLICADO_POR shift and go to state 97
    DIVIDIDO_POR    shift and go to state 98
    MODULO_DE       shift and go to state 99

  ! IGUAL_IGUAL     [ reduce using rule 15 (valor -> IDENTIFICADOR .) ]
  ! NO_IGUAL        [ reduce using rule 15 (valor -> IDENTIFICADOR .) ]
  ! MENOR_QUE       [ reduce using rule 15 (valor -> IDENTIFICADOR .) ]
  ! MENOR_O_IGUAL_QUE [ reduce using rule 15 (valor -> IDENTIFICADOR .) ]
  ! MAYOR_QUE       [ reduce using rule 15 (valor -> IDENTIFICADOR .) ]
  ! MAYOR_O_IGUAL_QUE [ reduce using rule 15 (valor -> IDENTIFICADOR .) ]

    operador_aritmentico           shift and go to state 76
    operador_condicional           shift and go to state 77
    operadoresCompuestosLogic      shift and go to state 79
    operadoresCompuestosNumber     shift and go to state 80

state 30

    (124) funciones_estructura_datos -> stack_push .

    END_OF_LINE     reduce using rule 124 (funciones_estructura_datos -> stack_push .)


state 31

    (125) funciones_estructura_datos -> stack_pop .

    END_OF_LINE     reduce using rule 125 (funciones_estructura_datos -> stack_pop .)


state 32

    (100) switch_case -> IGUAL .

    $end            reduce using rule 100 (switch_case -> IGUAL .)
    LLAVE_DER       reduce using rule 100 (switch_case -> IGUAL .)


state 33

    (64) asignacionCompuesta -> asignacionCompuesta_Logic .

    END_OF_LINE     reduce using rule 64 (asignacionCompuesta -> asignacionCompuesta_Logic .)


state 34

    (65) asignacionCompuesta -> asignacionCompuesta_Number .

    END_OF_LINE     reduce using rule 65 (asignacionCompuesta -> asignacionCompuesta_Number .)


state 35

    (11) valor -> CHAR .

    IGUAL_IGUAL     reduce using rule 11 (valor -> CHAR .)
    NO_IGUAL        reduce using rule 11 (valor -> CHAR .)
    MENOR_QUE       reduce using rule 11 (valor -> CHAR .)
    MENOR_O_IGUAL_QUE reduce using rule 11 (valor -> CHAR .)
    MAYOR_QUE       reduce using rule 11 (valor -> CHAR .)
    MAYOR_O_IGUAL_QUE reduce using rule 11 (valor -> CHAR .)
    $end            reduce using rule 11 (valor -> CHAR .)
    LLAVE_DER       reduce using rule 11 (valor -> CHAR .)
    END_OF_LINE     reduce using rule 11 (valor -> CHAR .)
    COMA            reduce using rule 11 (valor -> CHAR .)
    PAR_DER         reduce using rule 11 (valor -> CHAR .)


state 36

    (12) valor -> numero .
    (130) expresion_operacion_aritmetica -> numero . operador_aritmentico numero
    (132) expresion_condicional -> numero . operador_condicional numero
    (135) expresion_condicional -> numero . operador_condicional IDENTIFICADOR
    (43) operador_aritmentico -> . SUMA
    (44) operador_aritmentico -> . RESTA
    (45) operador_aritmentico -> . MULTIPLICACION
    (46) operador_aritmentico -> . DIVISION
    (47) operador_aritmentico -> . MODULO
    (48) operador_condicional -> . IGUAL_IGUAL
    (49) operador_condicional -> . NO_IGUAL
    (50) operador_condicional -> . MENOR_QUE
    (51) operador_condicional -> . MENOR_O_IGUAL_QUE
    (52) operador_condicional -> . MAYOR_QUE
    (53) operador_condicional -> . MAYOR_O_IGUAL_QUE

  ! shift/reduce conflict for IGUAL_IGUAL resolved as shift
  ! shift/reduce conflict for NO_IGUAL resolved as shift
  ! shift/reduce conflict for MENOR_QUE resolved as shift
  ! shift/reduce conflict for MENOR_O_IGUAL_QUE resolved as shift
  ! shift/reduce conflict for MAYOR_QUE resolved as shift
  ! shift/reduce conflict for MAYOR_O_IGUAL_QUE resolved as shift
    END_OF_LINE     reduce using rule 12 (valor -> numero .)
    COMA            reduce using rule 12 (valor -> numero .)
    PAR_DER         reduce using rule 12 (valor -> numero .)
    SUMA            shift and go to state 81
    RESTA           shift and go to state 82
    MULTIPLICACION  shift and go to state 83
    DIVISION        shift and go to state 84
    MODULO          shift and go to state 85
    IGUAL_IGUAL     shift and go to state 86
    NO_IGUAL        shift and go to state 87
    MENOR_QUE       shift and go to state 88
    MENOR_O_IGUAL_QUE shift and go to state 89
    MAYOR_QUE       shift and go to state 90
    MAYOR_O_IGUAL_QUE shift and go to state 91

  ! IGUAL_IGUAL     [ reduce using rule 12 (valor -> numero .) ]
  ! NO_IGUAL        [ reduce using rule 12 (valor -> numero .) ]
  ! MENOR_QUE       [ reduce using rule 12 (valor -> numero .) ]
  ! MENOR_O_IGUAL_QUE [ reduce using rule 12 (valor -> numero .) ]
  ! MAYOR_QUE       [ reduce using rule 12 (valor -> numero .) ]
  ! MAYOR_O_IGUAL_QUE [ reduce using rule 12 (valor -> numero .) ]

    operador_aritmentico           shift and go to state 100
    operador_condicional           shift and go to state 101

state 37

    (13) valor -> BOOL .

    IGUAL_IGUAL     reduce using rule 13 (valor -> BOOL .)
    NO_IGUAL        reduce using rule 13 (valor -> BOOL .)
    MENOR_QUE       reduce using rule 13 (valor -> BOOL .)
    MENOR_O_IGUAL_QUE reduce using rule 13 (valor -> BOOL .)
    MAYOR_QUE       reduce using rule 13 (valor -> BOOL .)
    MAYOR_O_IGUAL_QUE reduce using rule 13 (valor -> BOOL .)
    $end            reduce using rule 13 (valor -> BOOL .)
    LLAVE_DER       reduce using rule 13 (valor -> BOOL .)
    END_OF_LINE     reduce using rule 13 (valor -> BOOL .)
    COMA            reduce using rule 13 (valor -> BOOL .)
    PAR_DER         reduce using rule 13 (valor -> BOOL .)


state 38

    (14) valor -> STRING .

    IGUAL_IGUAL     reduce using rule 14 (valor -> STRING .)
    NO_IGUAL        reduce using rule 14 (valor -> STRING .)
    MENOR_QUE       reduce using rule 14 (valor -> STRING .)
    MENOR_O_IGUAL_QUE reduce using rule 14 (valor -> STRING .)
    MAYOR_QUE       reduce using rule 14 (valor -> STRING .)
    MAYOR_O_IGUAL_QUE reduce using rule 14 (valor -> STRING .)
    $end            reduce using rule 14 (valor -> STRING .)
    LLAVE_DER       reduce using rule 14 (valor -> STRING .)
    END_OF_LINE     reduce using rule 14 (valor -> STRING .)
    COMA            reduce using rule 14 (valor -> STRING .)
    PAR_DER         reduce using rule 14 (valor -> STRING .)


state 39

    (86) while -> while_normal .

    $end            reduce using rule 86 (while -> while_normal .)
    LLAVE_DER       reduce using rule 86 (while -> while_normal .)


state 40

    (87) while -> while_do .

    $end            reduce using rule 87 (while -> while_do .)
    LLAVE_DER       reduce using rule 87 (while -> while_do .)


state 41

    (101) for -> FOR . PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DER

    PAR_IZQ         shift and go to state 102


state 42

    (121) lista -> LIST . tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINE
    (122) tipoLista -> . MENOR_QUE valor_tipo_inicializador MAYOR_QUE

    MENOR_QUE       shift and go to state 104

    tipoLista                      shift and go to state 103

state 43

    (123) stack -> STACK . MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL NEW STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINE

    MENOR_QUE       shift and go to state 105


state 44

    (139) salida_uno -> CONSOLE_WRITELINE . PAR_IZQ STRING PAR_DER
    (140) salida_uno -> CONSOLE_WRITELINE . PAR_IZQ operacion_string PAR_DER
    (141) salida_uno -> CONSOLE_WRITELINE . PAR_IZQ IDENTIFICADOR PAR_DER
    (142) salida_dos -> CONSOLE_WRITELINE . PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER

    PAR_IZQ         shift and go to state 106


state 45

    (143) salida_tres -> CONSOLE_READLINE . PAR_IZQ PAR_DER

    PAR_IZQ         shift and go to state 107


state 46

    (146) funcion_tipo_uno -> modificador_acceso . VOID IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ body LLAVE_DER
    (147) funcion_tipo_tres -> modificador_acceso . VOID IDENTIFICADOR PAR_IZQ parametrosF PAR_DER LLAVE_IZQ bodyF LLAVE_DER

    VOID            shift and go to state 108


state 47

    (21) valor_tipo -> CHAR_TYPE .

    IDENTIFICADOR   reduce using rule 21 (valor_tipo -> CHAR_TYPE .)


state 48

    (22) valor_tipo -> FLOAT_TYPE .

    IDENTIFICADOR   reduce using rule 22 (valor_tipo -> FLOAT_TYPE .)


state 49

    (23) valor_tipo -> DOUBLE_TYPE .

    IDENTIFICADOR   reduce using rule 23 (valor_tipo -> DOUBLE_TYPE .)


state 50

    (24) valor_tipo -> INT_TYPE .

    IDENTIFICADOR   reduce using rule 24 (valor_tipo -> INT_TYPE .)


state 51

    (25) valor_tipo -> BOOL_TYPE .

    IDENTIFICADOR   reduce using rule 25 (valor_tipo -> BOOL_TYPE .)


state 52

    (26) valor_tipo -> STRING_TYPE .

    IDENTIFICADOR   reduce using rule 26 (valor_tipo -> STRING_TYPE .)


state 53

    (16) numero -> FLOAT .

    SUMA            reduce using rule 16 (numero -> FLOAT .)
    RESTA           reduce using rule 16 (numero -> FLOAT .)
    MULTIPLICACION  reduce using rule 16 (numero -> FLOAT .)
    DIVISION        reduce using rule 16 (numero -> FLOAT .)
    MODULO          reduce using rule 16 (numero -> FLOAT .)
    IGUAL_IGUAL     reduce using rule 16 (numero -> FLOAT .)
    NO_IGUAL        reduce using rule 16 (numero -> FLOAT .)
    MENOR_QUE       reduce using rule 16 (numero -> FLOAT .)
    MENOR_O_IGUAL_QUE reduce using rule 16 (numero -> FLOAT .)
    MAYOR_QUE       reduce using rule 16 (numero -> FLOAT .)
    MAYOR_O_IGUAL_QUE reduce using rule 16 (numero -> FLOAT .)
    $end            reduce using rule 16 (numero -> FLOAT .)
    LLAVE_DER       reduce using rule 16 (numero -> FLOAT .)
    END_OF_LINE     reduce using rule 16 (numero -> FLOAT .)
    COMA            reduce using rule 16 (numero -> FLOAT .)
    PAR_DER         reduce using rule 16 (numero -> FLOAT .)


state 54

    (17) numero -> DOUBLE .

    SUMA            reduce using rule 17 (numero -> DOUBLE .)
    RESTA           reduce using rule 17 (numero -> DOUBLE .)
    MULTIPLICACION  reduce using rule 17 (numero -> DOUBLE .)
    DIVISION        reduce using rule 17 (numero -> DOUBLE .)
    MODULO          reduce using rule 17 (numero -> DOUBLE .)
    IGUAL_IGUAL     reduce using rule 17 (numero -> DOUBLE .)
    NO_IGUAL        reduce using rule 17 (numero -> DOUBLE .)
    MENOR_QUE       reduce using rule 17 (numero -> DOUBLE .)
    MENOR_O_IGUAL_QUE reduce using rule 17 (numero -> DOUBLE .)
    MAYOR_QUE       reduce using rule 17 (numero -> DOUBLE .)
    MAYOR_O_IGUAL_QUE reduce using rule 17 (numero -> DOUBLE .)
    $end            reduce using rule 17 (numero -> DOUBLE .)
    LLAVE_DER       reduce using rule 17 (numero -> DOUBLE .)
    END_OF_LINE     reduce using rule 17 (numero -> DOUBLE .)
    COMA            reduce using rule 17 (numero -> DOUBLE .)
    PAR_DER         reduce using rule 17 (numero -> DOUBLE .)


state 55

    (18) numero -> INT .

    SUMA            reduce using rule 18 (numero -> INT .)
    RESTA           reduce using rule 18 (numero -> INT .)
    MULTIPLICACION  reduce using rule 18 (numero -> INT .)
    DIVISION        reduce using rule 18 (numero -> INT .)
    MODULO          reduce using rule 18 (numero -> INT .)
    IGUAL_IGUAL     reduce using rule 18 (numero -> INT .)
    NO_IGUAL        reduce using rule 18 (numero -> INT .)
    MENOR_QUE       reduce using rule 18 (numero -> INT .)
    MENOR_O_IGUAL_QUE reduce using rule 18 (numero -> INT .)
    MAYOR_QUE       reduce using rule 18 (numero -> INT .)
    MAYOR_O_IGUAL_QUE reduce using rule 18 (numero -> INT .)
    $end            reduce using rule 18 (numero -> INT .)
    LLAVE_DER       reduce using rule 18 (numero -> INT .)
    END_OF_LINE     reduce using rule 18 (numero -> INT .)
    COMA            reduce using rule 18 (numero -> INT .)
    PAR_DER         reduce using rule 18 (numero -> INT .)


state 56

    (88) while_normal -> WHILE . PAR_IZQ expresion_condicional PAR_DER LLAVE_IZQ body_while LLAVE_DER

    PAR_IZQ         shift and go to state 109


state 57

    (89) while_do -> DO . LLAVE_IZQ body_while LLAVE_DER WHILE PAR_IZQ expresion_condicional PAR_DER END_OF_LINE

    LLAVE_IZQ       shift and go to state 110


state 58

    (34) modificador_acceso -> PRIVATE .

    VOID            reduce using rule 34 (modificador_acceso -> PRIVATE .)


state 59

    (35) modificador_acceso -> PROTECTED .

    VOID            reduce using rule 35 (modificador_acceso -> PROTECTED .)


state 60

    (36) modificador_acceso -> PUBLIC .

    VOID            reduce using rule 36 (modificador_acceso -> PUBLIC .)


state 61

    (1) body -> asignacion END_OF_LINE .

    $end            reduce using rule 1 (body -> asignacion END_OF_LINE .)
    LLAVE_DER       reduce using rule 1 (body -> asignacion END_OF_LINE .)


state 62

    (5) body -> expresion END_OF_LINE .

    $end            reduce using rule 5 (body -> expresion END_OF_LINE .)
    LLAVE_DER       reduce using rule 5 (body -> expresion END_OF_LINE .)


state 63

    (6) body -> salida_entrada END_OF_LINE .

    $end            reduce using rule 6 (body -> salida_entrada END_OF_LINE .)
    LLAVE_DER       reduce using rule 6 (body -> salida_entrada END_OF_LINE .)


state 64

    (8) body -> declaracion END_OF_LINE .

    $end            reduce using rule 8 (body -> declaracion END_OF_LINE .)
    LLAVE_DER       reduce using rule 8 (body -> declaracion END_OF_LINE .)


state 65

    (10) body -> funciones_estructura_datos END_OF_LINE .

    $end            reduce using rule 10 (body -> funciones_estructura_datos END_OF_LINE .)
    LLAVE_DER       reduce using rule 10 (body -> funciones_estructura_datos END_OF_LINE .)


state 66

    (82) comparacion -> valor operador_realacional . valor
    (11) valor -> . CHAR
    (12) valor -> . numero
    (13) valor -> . BOOL
    (14) valor -> . STRING
    (15) valor -> . IDENTIFICADOR
    (16) numero -> . FLOAT
    (17) numero -> . DOUBLE
    (18) numero -> . INT

    CHAR            shift and go to state 35
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    IDENTIFICADOR   shift and go to state 113
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55

    valor                          shift and go to state 111
    numero                         shift and go to state 112

state 67

    (37) operador_realacional -> IGUAL_IGUAL .

    CHAR            reduce using rule 37 (operador_realacional -> IGUAL_IGUAL .)
    BOOL            reduce using rule 37 (operador_realacional -> IGUAL_IGUAL .)
    STRING          reduce using rule 37 (operador_realacional -> IGUAL_IGUAL .)
    IDENTIFICADOR   reduce using rule 37 (operador_realacional -> IGUAL_IGUAL .)
    FLOAT           reduce using rule 37 (operador_realacional -> IGUAL_IGUAL .)
    DOUBLE          reduce using rule 37 (operador_realacional -> IGUAL_IGUAL .)
    INT             reduce using rule 37 (operador_realacional -> IGUAL_IGUAL .)


state 68

    (38) operador_realacional -> NO_IGUAL .

    CHAR            reduce using rule 38 (operador_realacional -> NO_IGUAL .)
    BOOL            reduce using rule 38 (operador_realacional -> NO_IGUAL .)
    STRING          reduce using rule 38 (operador_realacional -> NO_IGUAL .)
    IDENTIFICADOR   reduce using rule 38 (operador_realacional -> NO_IGUAL .)
    FLOAT           reduce using rule 38 (operador_realacional -> NO_IGUAL .)
    DOUBLE          reduce using rule 38 (operador_realacional -> NO_IGUAL .)
    INT             reduce using rule 38 (operador_realacional -> NO_IGUAL .)


state 69

    (39) operador_realacional -> MENOR_QUE .

    CHAR            reduce using rule 39 (operador_realacional -> MENOR_QUE .)
    BOOL            reduce using rule 39 (operador_realacional -> MENOR_QUE .)
    STRING          reduce using rule 39 (operador_realacional -> MENOR_QUE .)
    IDENTIFICADOR   reduce using rule 39 (operador_realacional -> MENOR_QUE .)
    FLOAT           reduce using rule 39 (operador_realacional -> MENOR_QUE .)
    DOUBLE          reduce using rule 39 (operador_realacional -> MENOR_QUE .)
    INT             reduce using rule 39 (operador_realacional -> MENOR_QUE .)


state 70

    (40) operador_realacional -> MENOR_O_IGUAL_QUE .

    CHAR            reduce using rule 40 (operador_realacional -> MENOR_O_IGUAL_QUE .)
    BOOL            reduce using rule 40 (operador_realacional -> MENOR_O_IGUAL_QUE .)
    STRING          reduce using rule 40 (operador_realacional -> MENOR_O_IGUAL_QUE .)
    IDENTIFICADOR   reduce using rule 40 (operador_realacional -> MENOR_O_IGUAL_QUE .)
    FLOAT           reduce using rule 40 (operador_realacional -> MENOR_O_IGUAL_QUE .)
    DOUBLE          reduce using rule 40 (operador_realacional -> MENOR_O_IGUAL_QUE .)
    INT             reduce using rule 40 (operador_realacional -> MENOR_O_IGUAL_QUE .)


state 71

    (41) operador_realacional -> MAYOR_QUE .

    CHAR            reduce using rule 41 (operador_realacional -> MAYOR_QUE .)
    BOOL            reduce using rule 41 (operador_realacional -> MAYOR_QUE .)
    STRING          reduce using rule 41 (operador_realacional -> MAYOR_QUE .)
    IDENTIFICADOR   reduce using rule 41 (operador_realacional -> MAYOR_QUE .)
    FLOAT           reduce using rule 41 (operador_realacional -> MAYOR_QUE .)
    DOUBLE          reduce using rule 41 (operador_realacional -> MAYOR_QUE .)
    INT             reduce using rule 41 (operador_realacional -> MAYOR_QUE .)


state 72

    (42) operador_realacional -> MAYOR_O_IGUAL_QUE .

    CHAR            reduce using rule 42 (operador_realacional -> MAYOR_O_IGUAL_QUE .)
    BOOL            reduce using rule 42 (operador_realacional -> MAYOR_O_IGUAL_QUE .)
    STRING          reduce using rule 42 (operador_realacional -> MAYOR_O_IGUAL_QUE .)
    IDENTIFICADOR   reduce using rule 42 (operador_realacional -> MAYOR_O_IGUAL_QUE .)
    FLOAT           reduce using rule 42 (operador_realacional -> MAYOR_O_IGUAL_QUE .)
    DOUBLE          reduce using rule 42 (operador_realacional -> MAYOR_O_IGUAL_QUE .)
    INT             reduce using rule 42 (operador_realacional -> MAYOR_O_IGUAL_QUE .)


state 73

    (80) declaracion -> valor_tipo IDENTIFICADOR .
    (61) asignacionSimple -> IDENTIFICADOR . IGUAL valor
    (62) asignacionSimple -> IDENTIFICADOR . IGUAL expresion
    (63) asignacionSimple -> IDENTIFICADOR . IGUAL salida_entrada

    END_OF_LINE     reduce using rule 80 (declaracion -> valor_tipo IDENTIFICADOR .)
    COMA            reduce using rule 80 (declaracion -> valor_tipo IDENTIFICADOR .)
    PAR_DER         reduce using rule 80 (declaracion -> valor_tipo IDENTIFICADOR .)
    IGUAL           shift and go to state 75


state 74

    (81) declaracion -> valor_tipo asignacionSimple .

    END_OF_LINE     reduce using rule 81 (declaracion -> valor_tipo asignacionSimple .)
    COMA            reduce using rule 81 (declaracion -> valor_tipo asignacionSimple .)
    PAR_DER         reduce using rule 81 (declaracion -> valor_tipo asignacionSimple .)


state 75

    (61) asignacionSimple -> IDENTIFICADOR IGUAL . valor
    (62) asignacionSimple -> IDENTIFICADOR IGUAL . expresion
    (63) asignacionSimple -> IDENTIFICADOR IGUAL . salida_entrada
    (11) valor -> . CHAR
    (12) valor -> . numero
    (13) valor -> . BOOL
    (14) valor -> . STRING
    (15) valor -> . IDENTIFICADOR
    (128) expresion -> . expresion_operacion_aritmetica
    (129) expresion -> . expresion_condicional
    (136) salida_entrada -> . salida_uno
    (137) salida_entrada -> . salida_dos
    (138) salida_entrada -> . salida_tres
    (16) numero -> . FLOAT
    (17) numero -> . DOUBLE
    (18) numero -> . INT
    (130) expresion_operacion_aritmetica -> . numero operador_aritmentico numero
    (131) expresion_operacion_aritmetica -> . IDENTIFICADOR operador_aritmentico IDENTIFICADOR
    (132) expresion_condicional -> . numero operador_condicional numero
    (133) expresion_condicional -> . IDENTIFICADOR operador_condicional IDENTIFICADOR
    (134) expresion_condicional -> . IDENTIFICADOR operador_condicional numero
    (135) expresion_condicional -> . numero operador_condicional IDENTIFICADOR
    (139) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER
    (140) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER
    (141) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER
    (142) salida_dos -> . CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER
    (143) salida_tres -> . CONSOLE_READLINE PAR_IZQ PAR_DER

    CHAR            shift and go to state 35
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    IDENTIFICADOR   shift and go to state 114
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55
    CONSOLE_WRITELINE shift and go to state 44
    CONSOLE_READLINE shift and go to state 45

    valor                          shift and go to state 115
    expresion                      shift and go to state 116
    salida_entrada                 shift and go to state 117
    numero                         shift and go to state 36
    expresion_operacion_aritmetica shift and go to state 21
    expresion_condicional          shift and go to state 22
    salida_uno                     shift and go to state 23
    salida_dos                     shift and go to state 24
    salida_tres                    shift and go to state 25

state 76

    (131) expresion_operacion_aritmetica -> IDENTIFICADOR operador_aritmentico . IDENTIFICADOR

    IDENTIFICADOR   shift and go to state 118


state 77

    (133) expresion_condicional -> IDENTIFICADOR operador_condicional . IDENTIFICADOR
    (134) expresion_condicional -> IDENTIFICADOR operador_condicional . numero
    (16) numero -> . FLOAT
    (17) numero -> . DOUBLE
    (18) numero -> . INT

    IDENTIFICADOR   shift and go to state 119
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55

    numero                         shift and go to state 120

state 78

    (126) stack_push -> IDENTIFICADOR PUNTO . PUSH PAR_IZQ valor PAR_DER
    (127) stack_pop -> IDENTIFICADOR PUNTO . POP PAR_IZQ PAR_DER

    PUSH            shift and go to state 121
    POP             shift and go to state 122


state 79

    (66) asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic . BOOL
    (67) asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic . expresion_condicional
    (68) asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic . IDENTIFICADOR
    (132) expresion_condicional -> . numero operador_condicional numero
    (133) expresion_condicional -> . IDENTIFICADOR operador_condicional IDENTIFICADOR
    (134) expresion_condicional -> . IDENTIFICADOR operador_condicional numero
    (135) expresion_condicional -> . numero operador_condicional IDENTIFICADOR
    (16) numero -> . FLOAT
    (17) numero -> . DOUBLE
    (18) numero -> . INT

    BOOL            shift and go to state 124
    IDENTIFICADOR   shift and go to state 123
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55

    expresion_condicional          shift and go to state 125
    numero                         shift and go to state 126

state 80

    (69) asignacionCompuesta_Number -> IDENTIFICADOR operadoresCompuestosNumber . numero
    (70) asignacionCompuesta_Number -> IDENTIFICADOR operadoresCompuestosNumber . expresion_operacion_aritmetica
    (71) asignacionCompuesta_Number -> IDENTIFICADOR operadoresCompuestosNumber . IDENTIFICADOR
    (16) numero -> . FLOAT
    (17) numero -> . DOUBLE
    (18) numero -> . INT
    (130) expresion_operacion_aritmetica -> . numero operador_aritmentico numero
    (131) expresion_operacion_aritmetica -> . IDENTIFICADOR operador_aritmentico IDENTIFICADOR

    IDENTIFICADOR   shift and go to state 127
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55

    numero                         shift and go to state 128
    expresion_operacion_aritmetica shift and go to state 129

state 81

    (43) operador_aritmentico -> SUMA .

    IDENTIFICADOR   reduce using rule 43 (operador_aritmentico -> SUMA .)
    FLOAT           reduce using rule 43 (operador_aritmentico -> SUMA .)
    DOUBLE          reduce using rule 43 (operador_aritmentico -> SUMA .)
    INT             reduce using rule 43 (operador_aritmentico -> SUMA .)


state 82

    (44) operador_aritmentico -> RESTA .

    IDENTIFICADOR   reduce using rule 44 (operador_aritmentico -> RESTA .)
    FLOAT           reduce using rule 44 (operador_aritmentico -> RESTA .)
    DOUBLE          reduce using rule 44 (operador_aritmentico -> RESTA .)
    INT             reduce using rule 44 (operador_aritmentico -> RESTA .)


state 83

    (45) operador_aritmentico -> MULTIPLICACION .

    IDENTIFICADOR   reduce using rule 45 (operador_aritmentico -> MULTIPLICACION .)
    FLOAT           reduce using rule 45 (operador_aritmentico -> MULTIPLICACION .)
    DOUBLE          reduce using rule 45 (operador_aritmentico -> MULTIPLICACION .)
    INT             reduce using rule 45 (operador_aritmentico -> MULTIPLICACION .)


state 84

    (46) operador_aritmentico -> DIVISION .

    IDENTIFICADOR   reduce using rule 46 (operador_aritmentico -> DIVISION .)
    FLOAT           reduce using rule 46 (operador_aritmentico -> DIVISION .)
    DOUBLE          reduce using rule 46 (operador_aritmentico -> DIVISION .)
    INT             reduce using rule 46 (operador_aritmentico -> DIVISION .)


state 85

    (47) operador_aritmentico -> MODULO .

    IDENTIFICADOR   reduce using rule 47 (operador_aritmentico -> MODULO .)
    FLOAT           reduce using rule 47 (operador_aritmentico -> MODULO .)
    DOUBLE          reduce using rule 47 (operador_aritmentico -> MODULO .)
    INT             reduce using rule 47 (operador_aritmentico -> MODULO .)


state 86

    (48) operador_condicional -> IGUAL_IGUAL .

    IDENTIFICADOR   reduce using rule 48 (operador_condicional -> IGUAL_IGUAL .)
    FLOAT           reduce using rule 48 (operador_condicional -> IGUAL_IGUAL .)
    DOUBLE          reduce using rule 48 (operador_condicional -> IGUAL_IGUAL .)
    INT             reduce using rule 48 (operador_condicional -> IGUAL_IGUAL .)


state 87

    (49) operador_condicional -> NO_IGUAL .

    IDENTIFICADOR   reduce using rule 49 (operador_condicional -> NO_IGUAL .)
    FLOAT           reduce using rule 49 (operador_condicional -> NO_IGUAL .)
    DOUBLE          reduce using rule 49 (operador_condicional -> NO_IGUAL .)
    INT             reduce using rule 49 (operador_condicional -> NO_IGUAL .)


state 88

    (50) operador_condicional -> MENOR_QUE .

    IDENTIFICADOR   reduce using rule 50 (operador_condicional -> MENOR_QUE .)
    FLOAT           reduce using rule 50 (operador_condicional -> MENOR_QUE .)
    DOUBLE          reduce using rule 50 (operador_condicional -> MENOR_QUE .)
    INT             reduce using rule 50 (operador_condicional -> MENOR_QUE .)


state 89

    (51) operador_condicional -> MENOR_O_IGUAL_QUE .

    IDENTIFICADOR   reduce using rule 51 (operador_condicional -> MENOR_O_IGUAL_QUE .)
    FLOAT           reduce using rule 51 (operador_condicional -> MENOR_O_IGUAL_QUE .)
    DOUBLE          reduce using rule 51 (operador_condicional -> MENOR_O_IGUAL_QUE .)
    INT             reduce using rule 51 (operador_condicional -> MENOR_O_IGUAL_QUE .)


state 90

    (52) operador_condicional -> MAYOR_QUE .

    IDENTIFICADOR   reduce using rule 52 (operador_condicional -> MAYOR_QUE .)
    FLOAT           reduce using rule 52 (operador_condicional -> MAYOR_QUE .)
    DOUBLE          reduce using rule 52 (operador_condicional -> MAYOR_QUE .)
    INT             reduce using rule 52 (operador_condicional -> MAYOR_QUE .)


state 91

    (53) operador_condicional -> MAYOR_O_IGUAL_QUE .

    IDENTIFICADOR   reduce using rule 53 (operador_condicional -> MAYOR_O_IGUAL_QUE .)
    FLOAT           reduce using rule 53 (operador_condicional -> MAYOR_O_IGUAL_QUE .)
    DOUBLE          reduce using rule 53 (operador_condicional -> MAYOR_O_IGUAL_QUE .)
    INT             reduce using rule 53 (operador_condicional -> MAYOR_O_IGUAL_QUE .)


state 92

    (77) operadoresCompuestosLogic -> AND_EQUAL .

    BOOL            reduce using rule 77 (operadoresCompuestosLogic -> AND_EQUAL .)
    IDENTIFICADOR   reduce using rule 77 (operadoresCompuestosLogic -> AND_EQUAL .)
    FLOAT           reduce using rule 77 (operadoresCompuestosLogic -> AND_EQUAL .)
    DOUBLE          reduce using rule 77 (operadoresCompuestosLogic -> AND_EQUAL .)
    INT             reduce using rule 77 (operadoresCompuestosLogic -> AND_EQUAL .)


state 93

    (78) operadoresCompuestosLogic -> OR_EQUAL .

    BOOL            reduce using rule 78 (operadoresCompuestosLogic -> OR_EQUAL .)
    IDENTIFICADOR   reduce using rule 78 (operadoresCompuestosLogic -> OR_EQUAL .)
    FLOAT           reduce using rule 78 (operadoresCompuestosLogic -> OR_EQUAL .)
    DOUBLE          reduce using rule 78 (operadoresCompuestosLogic -> OR_EQUAL .)
    INT             reduce using rule 78 (operadoresCompuestosLogic -> OR_EQUAL .)


state 94

    (79) operadoresCompuestosLogic -> EXC_OREQUAL .

    BOOL            reduce using rule 79 (operadoresCompuestosLogic -> EXC_OREQUAL .)
    IDENTIFICADOR   reduce using rule 79 (operadoresCompuestosLogic -> EXC_OREQUAL .)
    FLOAT           reduce using rule 79 (operadoresCompuestosLogic -> EXC_OREQUAL .)
    DOUBLE          reduce using rule 79 (operadoresCompuestosLogic -> EXC_OREQUAL .)
    INT             reduce using rule 79 (operadoresCompuestosLogic -> EXC_OREQUAL .)


state 95

    (72) operadoresCompuestosNumber -> AUMENTADO .

    IDENTIFICADOR   reduce using rule 72 (operadoresCompuestosNumber -> AUMENTADO .)
    FLOAT           reduce using rule 72 (operadoresCompuestosNumber -> AUMENTADO .)
    DOUBLE          reduce using rule 72 (operadoresCompuestosNumber -> AUMENTADO .)
    INT             reduce using rule 72 (operadoresCompuestosNumber -> AUMENTADO .)


state 96

    (73) operadoresCompuestosNumber -> DECREMENTADO .

    IDENTIFICADOR   reduce using rule 73 (operadoresCompuestosNumber -> DECREMENTADO .)
    FLOAT           reduce using rule 73 (operadoresCompuestosNumber -> DECREMENTADO .)
    DOUBLE          reduce using rule 73 (operadoresCompuestosNumber -> DECREMENTADO .)
    INT             reduce using rule 73 (operadoresCompuestosNumber -> DECREMENTADO .)


state 97

    (74) operadoresCompuestosNumber -> MULTIPLICADO_POR .

    IDENTIFICADOR   reduce using rule 74 (operadoresCompuestosNumber -> MULTIPLICADO_POR .)
    FLOAT           reduce using rule 74 (operadoresCompuestosNumber -> MULTIPLICADO_POR .)
    DOUBLE          reduce using rule 74 (operadoresCompuestosNumber -> MULTIPLICADO_POR .)
    INT             reduce using rule 74 (operadoresCompuestosNumber -> MULTIPLICADO_POR .)


state 98

    (75) operadoresCompuestosNumber -> DIVIDIDO_POR .

    IDENTIFICADOR   reduce using rule 75 (operadoresCompuestosNumber -> DIVIDIDO_POR .)
    FLOAT           reduce using rule 75 (operadoresCompuestosNumber -> DIVIDIDO_POR .)
    DOUBLE          reduce using rule 75 (operadoresCompuestosNumber -> DIVIDIDO_POR .)
    INT             reduce using rule 75 (operadoresCompuestosNumber -> DIVIDIDO_POR .)


state 99

    (76) operadoresCompuestosNumber -> MODULO_DE .

    IDENTIFICADOR   reduce using rule 76 (operadoresCompuestosNumber -> MODULO_DE .)
    FLOAT           reduce using rule 76 (operadoresCompuestosNumber -> MODULO_DE .)
    DOUBLE          reduce using rule 76 (operadoresCompuestosNumber -> MODULO_DE .)
    INT             reduce using rule 76 (operadoresCompuestosNumber -> MODULO_DE .)


state 100

    (130) expresion_operacion_aritmetica -> numero operador_aritmentico . numero
    (16) numero -> . FLOAT
    (17) numero -> . DOUBLE
    (18) numero -> . INT

    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55

    numero                         shift and go to state 130

state 101

    (132) expresion_condicional -> numero operador_condicional . numero
    (135) expresion_condicional -> numero operador_condicional . IDENTIFICADOR
    (16) numero -> . FLOAT
    (17) numero -> . DOUBLE
    (18) numero -> . INT

    IDENTIFICADOR   shift and go to state 132
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55

    numero                         shift and go to state 131

state 102

    (101) for -> FOR PAR_IZQ . forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DER
    (110) forInicializador -> . tipoDatoForInicializador IDENTIFICADOR IGUAL valorForInicializador
    (111) forInicializador -> . IDENTIFICADOR IGUAL valorForInicializador
    (112) tipoDatoForInicializador -> . FLOAT_TYPE
    (113) tipoDatoForInicializador -> . DOUBLE_TYPE
    (114) tipoDatoForInicializador -> . INT_TYPE

    IDENTIFICADOR   shift and go to state 135
    FLOAT_TYPE      shift and go to state 136
    DOUBLE_TYPE     shift and go to state 137
    INT_TYPE        shift and go to state 138

    forInicializador               shift and go to state 133
    tipoDatoForInicializador       shift and go to state 134

state 103

    (121) lista -> LIST tipoLista . IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINE

    IDENTIFICADOR   shift and go to state 139


state 104

    (122) tipoLista -> MENOR_QUE . valor_tipo_inicializador MAYOR_QUE
    (27) valor_tipo_inicializador -> . FLOAT_TYPE
    (28) valor_tipo_inicializador -> . DOUBLE_TYPE
    (29) valor_tipo_inicializador -> . STRING_TYPE
    (30) valor_tipo_inicializador -> . INT_TYPE
    (31) valor_tipo_inicializador -> . BOOL_TYPE
    (32) valor_tipo_inicializador -> . CHAR_TYPE
    (33) valor_tipo_inicializador -> . IDENTIFICADOR

    FLOAT_TYPE      shift and go to state 141
    DOUBLE_TYPE     shift and go to state 142
    STRING_TYPE     shift and go to state 143
    INT_TYPE        shift and go to state 144
    BOOL_TYPE       shift and go to state 145
    CHAR_TYPE       shift and go to state 146
    IDENTIFICADOR   shift and go to state 147

    valor_tipo_inicializador       shift and go to state 140

state 105

    (123) stack -> STACK MENOR_QUE . valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL NEW STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINE
    (27) valor_tipo_inicializador -> . FLOAT_TYPE
    (28) valor_tipo_inicializador -> . DOUBLE_TYPE
    (29) valor_tipo_inicializador -> . STRING_TYPE
    (30) valor_tipo_inicializador -> . INT_TYPE
    (31) valor_tipo_inicializador -> . BOOL_TYPE
    (32) valor_tipo_inicializador -> . CHAR_TYPE
    (33) valor_tipo_inicializador -> . IDENTIFICADOR

    FLOAT_TYPE      shift and go to state 141
    DOUBLE_TYPE     shift and go to state 142
    STRING_TYPE     shift and go to state 143
    INT_TYPE        shift and go to state 144
    BOOL_TYPE       shift and go to state 145
    CHAR_TYPE       shift and go to state 146
    IDENTIFICADOR   shift and go to state 147

    valor_tipo_inicializador       shift and go to state 148

state 106

    (139) salida_uno -> CONSOLE_WRITELINE PAR_IZQ . STRING PAR_DER
    (140) salida_uno -> CONSOLE_WRITELINE PAR_IZQ . operacion_string PAR_DER
    (141) salida_uno -> CONSOLE_WRITELINE PAR_IZQ . IDENTIFICADOR PAR_DER
    (142) salida_dos -> CONSOLE_WRITELINE PAR_IZQ . C_CADENA_INTERPOLADA STRING PAR_DER
    (54) operacion_string -> . STRING SUMA STRING
    (55) operacion_string -> . STRING SUMA IDENTIFICADOR
    (56) operacion_string -> . IDENTIFICADOR SUMA STRING
    (57) operacion_string -> . IDENTIFICADOR SUMA IDENTIFICADOR

    STRING          shift and go to state 149
    IDENTIFICADOR   shift and go to state 151
    C_CADENA_INTERPOLADA shift and go to state 152

    operacion_string               shift and go to state 150

state 107

    (143) salida_tres -> CONSOLE_READLINE PAR_IZQ . PAR_DER

    PAR_DER         shift and go to state 153


state 108

    (146) funcion_tipo_uno -> modificador_acceso VOID . IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ body LLAVE_DER
    (147) funcion_tipo_tres -> modificador_acceso VOID . IDENTIFICADOR PAR_IZQ parametrosF PAR_DER LLAVE_IZQ bodyF LLAVE_DER

    IDENTIFICADOR   shift and go to state 154


state 109

    (88) while_normal -> WHILE PAR_IZQ . expresion_condicional PAR_DER LLAVE_IZQ body_while LLAVE_DER
    (132) expresion_condicional -> . numero operador_condicional numero
    (133) expresion_condicional -> . IDENTIFICADOR operador_condicional IDENTIFICADOR
    (134) expresion_condicional -> . IDENTIFICADOR operador_condicional numero
    (135) expresion_condicional -> . numero operador_condicional IDENTIFICADOR
    (16) numero -> . FLOAT
    (17) numero -> . DOUBLE
    (18) numero -> . INT

    IDENTIFICADOR   shift and go to state 156
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55

    expresion_condicional          shift and go to state 155
    numero                         shift and go to state 126

state 110

    (89) while_do -> DO LLAVE_IZQ . body_while LLAVE_DER WHILE PAR_IZQ expresion_condicional PAR_DER END_OF_LINE
    (90) body_while -> . asignacion END_OF_LINE
    (91) body_while -> . declaracion END_OF_LINE
    (92) body_while -> . salida_entrada END_OF_LINE
    (93) body_while -> . BREAK END_OF_LINE
    (94) body_while -> . CONTINUE END_OF_LINE
    (95) body_while -> . asignacion END_OF_LINE body_while
    (96) body_while -> . declaracion END_OF_LINE body_while
    (97) body_while -> . salida_entrada END_OF_LINE body_while
    (98) body_while -> . BREAK END_OF_LINE body_while
    (99) body_while -> . CONTINUE END_OF_LINE body_while
    (59) asignacion -> . asignacionSimple
    (60) asignacion -> . asignacionCompuesta
    (80) declaracion -> . valor_tipo IDENTIFICADOR
    (81) declaracion -> . valor_tipo asignacionSimple
    (136) salida_entrada -> . salida_uno
    (137) salida_entrada -> . salida_dos
    (138) salida_entrada -> . salida_tres
    (61) asignacionSimple -> . IDENTIFICADOR IGUAL valor
    (62) asignacionSimple -> . IDENTIFICADOR IGUAL expresion
    (63) asignacionSimple -> . IDENTIFICADOR IGUAL salida_entrada
    (64) asignacionCompuesta -> . asignacionCompuesta_Logic
    (65) asignacionCompuesta -> . asignacionCompuesta_Number
    (21) valor_tipo -> . CHAR_TYPE
    (22) valor_tipo -> . FLOAT_TYPE
    (23) valor_tipo -> . DOUBLE_TYPE
    (24) valor_tipo -> . INT_TYPE
    (25) valor_tipo -> . BOOL_TYPE
    (26) valor_tipo -> . STRING_TYPE
    (139) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER
    (140) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER
    (141) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER
    (142) salida_dos -> . CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER
    (143) salida_tres -> . CONSOLE_READLINE PAR_IZQ PAR_DER
    (66) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic BOOL
    (67) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic expresion_condicional
    (68) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR
    (69) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber numero
    (70) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica
    (71) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR

    BREAK           shift and go to state 161
    CONTINUE        shift and go to state 162
    IDENTIFICADOR   shift and go to state 163
    CHAR_TYPE       shift and go to state 47
    FLOAT_TYPE      shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    INT_TYPE        shift and go to state 50
    BOOL_TYPE       shift and go to state 51
    STRING_TYPE     shift and go to state 52
    CONSOLE_WRITELINE shift and go to state 44
    CONSOLE_READLINE shift and go to state 45

    body_while                     shift and go to state 157
    asignacion                     shift and go to state 158
    declaracion                    shift and go to state 159
    salida_entrada                 shift and go to state 160
    asignacionSimple               shift and go to state 13
    asignacionCompuesta            shift and go to state 14
    valor_tipo                     shift and go to state 28
    salida_uno                     shift and go to state 23
    salida_dos                     shift and go to state 24
    salida_tres                    shift and go to state 25
    asignacionCompuesta_Logic      shift and go to state 33
    asignacionCompuesta_Number     shift and go to state 34

state 111

    (82) comparacion -> valor operador_realacional valor .

    $end            reduce using rule 82 (comparacion -> valor operador_realacional valor .)
    LLAVE_DER       reduce using rule 82 (comparacion -> valor operador_realacional valor .)


state 112

    (12) valor -> numero .

    $end            reduce using rule 12 (valor -> numero .)
    LLAVE_DER       reduce using rule 12 (valor -> numero .)
    PAR_DER         reduce using rule 12 (valor -> numero .)


state 113

    (15) valor -> IDENTIFICADOR .

    $end            reduce using rule 15 (valor -> IDENTIFICADOR .)
    LLAVE_DER       reduce using rule 15 (valor -> IDENTIFICADOR .)
    PAR_DER         reduce using rule 15 (valor -> IDENTIFICADOR .)


state 114

    (15) valor -> IDENTIFICADOR .
    (131) expresion_operacion_aritmetica -> IDENTIFICADOR . operador_aritmentico IDENTIFICADOR
    (133) expresion_condicional -> IDENTIFICADOR . operador_condicional IDENTIFICADOR
    (134) expresion_condicional -> IDENTIFICADOR . operador_condicional numero
    (43) operador_aritmentico -> . SUMA
    (44) operador_aritmentico -> . RESTA
    (45) operador_aritmentico -> . MULTIPLICACION
    (46) operador_aritmentico -> . DIVISION
    (47) operador_aritmentico -> . MODULO
    (48) operador_condicional -> . IGUAL_IGUAL
    (49) operador_condicional -> . NO_IGUAL
    (50) operador_condicional -> . MENOR_QUE
    (51) operador_condicional -> . MENOR_O_IGUAL_QUE
    (52) operador_condicional -> . MAYOR_QUE
    (53) operador_condicional -> . MAYOR_O_IGUAL_QUE

    END_OF_LINE     reduce using rule 15 (valor -> IDENTIFICADOR .)
    COMA            reduce using rule 15 (valor -> IDENTIFICADOR .)
    PAR_DER         reduce using rule 15 (valor -> IDENTIFICADOR .)
    SUMA            shift and go to state 81
    RESTA           shift and go to state 82
    MULTIPLICACION  shift and go to state 83
    DIVISION        shift and go to state 84
    MODULO          shift and go to state 85
    IGUAL_IGUAL     shift and go to state 86
    NO_IGUAL        shift and go to state 87
    MENOR_QUE       shift and go to state 88
    MENOR_O_IGUAL_QUE shift and go to state 89
    MAYOR_QUE       shift and go to state 90
    MAYOR_O_IGUAL_QUE shift and go to state 91

    operador_aritmentico           shift and go to state 76
    operador_condicional           shift and go to state 77

state 115

    (61) asignacionSimple -> IDENTIFICADOR IGUAL valor .

    END_OF_LINE     reduce using rule 61 (asignacionSimple -> IDENTIFICADOR IGUAL valor .)
    COMA            reduce using rule 61 (asignacionSimple -> IDENTIFICADOR IGUAL valor .)
    PAR_DER         reduce using rule 61 (asignacionSimple -> IDENTIFICADOR IGUAL valor .)


state 116

    (62) asignacionSimple -> IDENTIFICADOR IGUAL expresion .

    END_OF_LINE     reduce using rule 62 (asignacionSimple -> IDENTIFICADOR IGUAL expresion .)
    COMA            reduce using rule 62 (asignacionSimple -> IDENTIFICADOR IGUAL expresion .)
    PAR_DER         reduce using rule 62 (asignacionSimple -> IDENTIFICADOR IGUAL expresion .)


state 117

    (63) asignacionSimple -> IDENTIFICADOR IGUAL salida_entrada .

    END_OF_LINE     reduce using rule 63 (asignacionSimple -> IDENTIFICADOR IGUAL salida_entrada .)
    COMA            reduce using rule 63 (asignacionSimple -> IDENTIFICADOR IGUAL salida_entrada .)
    PAR_DER         reduce using rule 63 (asignacionSimple -> IDENTIFICADOR IGUAL salida_entrada .)


state 118

    (131) expresion_operacion_aritmetica -> IDENTIFICADOR operador_aritmentico IDENTIFICADOR .

    END_OF_LINE     reduce using rule 131 (expresion_operacion_aritmetica -> IDENTIFICADOR operador_aritmentico IDENTIFICADOR .)
    COMA            reduce using rule 131 (expresion_operacion_aritmetica -> IDENTIFICADOR operador_aritmentico IDENTIFICADOR .)
    PAR_DER         reduce using rule 131 (expresion_operacion_aritmetica -> IDENTIFICADOR operador_aritmentico IDENTIFICADOR .)


state 119

    (133) expresion_condicional -> IDENTIFICADOR operador_condicional IDENTIFICADOR .

    END_OF_LINE     reduce using rule 133 (expresion_condicional -> IDENTIFICADOR operador_condicional IDENTIFICADOR .)
    COMA            reduce using rule 133 (expresion_condicional -> IDENTIFICADOR operador_condicional IDENTIFICADOR .)
    PAR_DER         reduce using rule 133 (expresion_condicional -> IDENTIFICADOR operador_condicional IDENTIFICADOR .)


state 120

    (134) expresion_condicional -> IDENTIFICADOR operador_condicional numero .

    END_OF_LINE     reduce using rule 134 (expresion_condicional -> IDENTIFICADOR operador_condicional numero .)
    COMA            reduce using rule 134 (expresion_condicional -> IDENTIFICADOR operador_condicional numero .)
    PAR_DER         reduce using rule 134 (expresion_condicional -> IDENTIFICADOR operador_condicional numero .)


state 121

    (126) stack_push -> IDENTIFICADOR PUNTO PUSH . PAR_IZQ valor PAR_DER

    PAR_IZQ         shift and go to state 164


state 122

    (127) stack_pop -> IDENTIFICADOR PUNTO POP . PAR_IZQ PAR_DER

    PAR_IZQ         shift and go to state 165


state 123

    (68) asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR .
    (133) expresion_condicional -> IDENTIFICADOR . operador_condicional IDENTIFICADOR
    (134) expresion_condicional -> IDENTIFICADOR . operador_condicional numero
    (48) operador_condicional -> . IGUAL_IGUAL
    (49) operador_condicional -> . NO_IGUAL
    (50) operador_condicional -> . MENOR_QUE
    (51) operador_condicional -> . MENOR_O_IGUAL_QUE
    (52) operador_condicional -> . MAYOR_QUE
    (53) operador_condicional -> . MAYOR_O_IGUAL_QUE

    END_OF_LINE     reduce using rule 68 (asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR .)
    IGUAL_IGUAL     shift and go to state 86
    NO_IGUAL        shift and go to state 87
    MENOR_QUE       shift and go to state 88
    MENOR_O_IGUAL_QUE shift and go to state 89
    MAYOR_QUE       shift and go to state 90
    MAYOR_O_IGUAL_QUE shift and go to state 91

    operador_condicional           shift and go to state 77

state 124

    (66) asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic BOOL .

    END_OF_LINE     reduce using rule 66 (asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic BOOL .)


state 125

    (67) asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic expresion_condicional .

    END_OF_LINE     reduce using rule 67 (asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic expresion_condicional .)


state 126

    (132) expresion_condicional -> numero . operador_condicional numero
    (135) expresion_condicional -> numero . operador_condicional IDENTIFICADOR
    (48) operador_condicional -> . IGUAL_IGUAL
    (49) operador_condicional -> . NO_IGUAL
    (50) operador_condicional -> . MENOR_QUE
    (51) operador_condicional -> . MENOR_O_IGUAL_QUE
    (52) operador_condicional -> . MAYOR_QUE
    (53) operador_condicional -> . MAYOR_O_IGUAL_QUE

    IGUAL_IGUAL     shift and go to state 86
    NO_IGUAL        shift and go to state 87
    MENOR_QUE       shift and go to state 88
    MENOR_O_IGUAL_QUE shift and go to state 89
    MAYOR_QUE       shift and go to state 90
    MAYOR_O_IGUAL_QUE shift and go to state 91

    operador_condicional           shift and go to state 101

state 127

    (71) asignacionCompuesta_Number -> IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR .
    (131) expresion_operacion_aritmetica -> IDENTIFICADOR . operador_aritmentico IDENTIFICADOR
    (43) operador_aritmentico -> . SUMA
    (44) operador_aritmentico -> . RESTA
    (45) operador_aritmentico -> . MULTIPLICACION
    (46) operador_aritmentico -> . DIVISION
    (47) operador_aritmentico -> . MODULO

    END_OF_LINE     reduce using rule 71 (asignacionCompuesta_Number -> IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR .)
    SUMA            shift and go to state 81
    RESTA           shift and go to state 82
    MULTIPLICACION  shift and go to state 83
    DIVISION        shift and go to state 84
    MODULO          shift and go to state 85

    operador_aritmentico           shift and go to state 76

state 128

    (69) asignacionCompuesta_Number -> IDENTIFICADOR operadoresCompuestosNumber numero .
    (130) expresion_operacion_aritmetica -> numero . operador_aritmentico numero
    (43) operador_aritmentico -> . SUMA
    (44) operador_aritmentico -> . RESTA
    (45) operador_aritmentico -> . MULTIPLICACION
    (46) operador_aritmentico -> . DIVISION
    (47) operador_aritmentico -> . MODULO

    END_OF_LINE     reduce using rule 69 (asignacionCompuesta_Number -> IDENTIFICADOR operadoresCompuestosNumber numero .)
    SUMA            shift and go to state 81
    RESTA           shift and go to state 82
    MULTIPLICACION  shift and go to state 83
    DIVISION        shift and go to state 84
    MODULO          shift and go to state 85

    operador_aritmentico           shift and go to state 100

state 129

    (70) asignacionCompuesta_Number -> IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica .

    END_OF_LINE     reduce using rule 70 (asignacionCompuesta_Number -> IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica .)


state 130

    (130) expresion_operacion_aritmetica -> numero operador_aritmentico numero .

    END_OF_LINE     reduce using rule 130 (expresion_operacion_aritmetica -> numero operador_aritmentico numero .)
    COMA            reduce using rule 130 (expresion_operacion_aritmetica -> numero operador_aritmentico numero .)
    PAR_DER         reduce using rule 130 (expresion_operacion_aritmetica -> numero operador_aritmentico numero .)


state 131

    (132) expresion_condicional -> numero operador_condicional numero .

    END_OF_LINE     reduce using rule 132 (expresion_condicional -> numero operador_condicional numero .)
    COMA            reduce using rule 132 (expresion_condicional -> numero operador_condicional numero .)
    PAR_DER         reduce using rule 132 (expresion_condicional -> numero operador_condicional numero .)


state 132

    (135) expresion_condicional -> numero operador_condicional IDENTIFICADOR .

    END_OF_LINE     reduce using rule 135 (expresion_condicional -> numero operador_condicional IDENTIFICADOR .)
    COMA            reduce using rule 135 (expresion_condicional -> numero operador_condicional IDENTIFICADOR .)
    PAR_DER         reduce using rule 135 (expresion_condicional -> numero operador_condicional IDENTIFICADOR .)


state 133

    (101) for -> FOR PAR_IZQ forInicializador . END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DER

    END_OF_LINE     shift and go to state 166


state 134

    (110) forInicializador -> tipoDatoForInicializador . IDENTIFICADOR IGUAL valorForInicializador

    IDENTIFICADOR   shift and go to state 167


state 135

    (111) forInicializador -> IDENTIFICADOR . IGUAL valorForInicializador

    IGUAL           shift and go to state 168


state 136

    (112) tipoDatoForInicializador -> FLOAT_TYPE .

    IDENTIFICADOR   reduce using rule 112 (tipoDatoForInicializador -> FLOAT_TYPE .)


state 137

    (113) tipoDatoForInicializador -> DOUBLE_TYPE .

    IDENTIFICADOR   reduce using rule 113 (tipoDatoForInicializador -> DOUBLE_TYPE .)


state 138

    (114) tipoDatoForInicializador -> INT_TYPE .

    IDENTIFICADOR   reduce using rule 114 (tipoDatoForInicializador -> INT_TYPE .)


state 139

    (121) lista -> LIST tipoLista IDENTIFICADOR . IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINE

    IGUAL           shift and go to state 169


state 140

    (122) tipoLista -> MENOR_QUE valor_tipo_inicializador . MAYOR_QUE

    MAYOR_QUE       shift and go to state 170


state 141

    (27) valor_tipo_inicializador -> FLOAT_TYPE .

    MAYOR_QUE       reduce using rule 27 (valor_tipo_inicializador -> FLOAT_TYPE .)


state 142

    (28) valor_tipo_inicializador -> DOUBLE_TYPE .

    MAYOR_QUE       reduce using rule 28 (valor_tipo_inicializador -> DOUBLE_TYPE .)


state 143

    (29) valor_tipo_inicializador -> STRING_TYPE .

    MAYOR_QUE       reduce using rule 29 (valor_tipo_inicializador -> STRING_TYPE .)


state 144

    (30) valor_tipo_inicializador -> INT_TYPE .

    MAYOR_QUE       reduce using rule 30 (valor_tipo_inicializador -> INT_TYPE .)


state 145

    (31) valor_tipo_inicializador -> BOOL_TYPE .

    MAYOR_QUE       reduce using rule 31 (valor_tipo_inicializador -> BOOL_TYPE .)


state 146

    (32) valor_tipo_inicializador -> CHAR_TYPE .

    MAYOR_QUE       reduce using rule 32 (valor_tipo_inicializador -> CHAR_TYPE .)


state 147

    (33) valor_tipo_inicializador -> IDENTIFICADOR .

    MAYOR_QUE       reduce using rule 33 (valor_tipo_inicializador -> IDENTIFICADOR .)


state 148

    (123) stack -> STACK MENOR_QUE valor_tipo_inicializador . MAYOR_QUE IDENTIFICADOR IGUAL NEW STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINE

    MAYOR_QUE       shift and go to state 171


state 149

    (139) salida_uno -> CONSOLE_WRITELINE PAR_IZQ STRING . PAR_DER
    (54) operacion_string -> STRING . SUMA STRING
    (55) operacion_string -> STRING . SUMA IDENTIFICADOR

    PAR_DER         shift and go to state 172
    SUMA            shift and go to state 173


state 150

    (140) salida_uno -> CONSOLE_WRITELINE PAR_IZQ operacion_string . PAR_DER

    PAR_DER         shift and go to state 174


state 151

    (141) salida_uno -> CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR . PAR_DER
    (56) operacion_string -> IDENTIFICADOR . SUMA STRING
    (57) operacion_string -> IDENTIFICADOR . SUMA IDENTIFICADOR

    PAR_DER         shift and go to state 175
    SUMA            shift and go to state 176


state 152

    (142) salida_dos -> CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA . STRING PAR_DER

    STRING          shift and go to state 177


state 153

    (143) salida_tres -> CONSOLE_READLINE PAR_IZQ PAR_DER .

    END_OF_LINE     reduce using rule 143 (salida_tres -> CONSOLE_READLINE PAR_IZQ PAR_DER .)
    COMA            reduce using rule 143 (salida_tres -> CONSOLE_READLINE PAR_IZQ PAR_DER .)
    PAR_DER         reduce using rule 143 (salida_tres -> CONSOLE_READLINE PAR_IZQ PAR_DER .)


state 154

    (146) funcion_tipo_uno -> modificador_acceso VOID IDENTIFICADOR . PAR_IZQ PAR_DER LLAVE_IZQ body LLAVE_DER
    (147) funcion_tipo_tres -> modificador_acceso VOID IDENTIFICADOR . PAR_IZQ parametrosF PAR_DER LLAVE_IZQ bodyF LLAVE_DER

    PAR_IZQ         shift and go to state 178


state 155

    (88) while_normal -> WHILE PAR_IZQ expresion_condicional . PAR_DER LLAVE_IZQ body_while LLAVE_DER

    PAR_DER         shift and go to state 179


state 156

    (133) expresion_condicional -> IDENTIFICADOR . operador_condicional IDENTIFICADOR
    (134) expresion_condicional -> IDENTIFICADOR . operador_condicional numero
    (48) operador_condicional -> . IGUAL_IGUAL
    (49) operador_condicional -> . NO_IGUAL
    (50) operador_condicional -> . MENOR_QUE
    (51) operador_condicional -> . MENOR_O_IGUAL_QUE
    (52) operador_condicional -> . MAYOR_QUE
    (53) operador_condicional -> . MAYOR_O_IGUAL_QUE

    IGUAL_IGUAL     shift and go to state 86
    NO_IGUAL        shift and go to state 87
    MENOR_QUE       shift and go to state 88
    MENOR_O_IGUAL_QUE shift and go to state 89
    MAYOR_QUE       shift and go to state 90
    MAYOR_O_IGUAL_QUE shift and go to state 91

    operador_condicional           shift and go to state 77

state 157

    (89) while_do -> DO LLAVE_IZQ body_while . LLAVE_DER WHILE PAR_IZQ expresion_condicional PAR_DER END_OF_LINE

    LLAVE_DER       shift and go to state 180


state 158

    (90) body_while -> asignacion . END_OF_LINE
    (95) body_while -> asignacion . END_OF_LINE body_while

    END_OF_LINE     shift and go to state 181


state 159

    (91) body_while -> declaracion . END_OF_LINE
    (96) body_while -> declaracion . END_OF_LINE body_while

    END_OF_LINE     shift and go to state 182


state 160

    (92) body_while -> salida_entrada . END_OF_LINE
    (97) body_while -> salida_entrada . END_OF_LINE body_while

    END_OF_LINE     shift and go to state 183


state 161

    (93) body_while -> BREAK . END_OF_LINE
    (98) body_while -> BREAK . END_OF_LINE body_while

    END_OF_LINE     shift and go to state 184


state 162

    (94) body_while -> CONTINUE . END_OF_LINE
    (99) body_while -> CONTINUE . END_OF_LINE body_while

    END_OF_LINE     shift and go to state 185


state 163

    (61) asignacionSimple -> IDENTIFICADOR . IGUAL valor
    (62) asignacionSimple -> IDENTIFICADOR . IGUAL expresion
    (63) asignacionSimple -> IDENTIFICADOR . IGUAL salida_entrada
    (66) asignacionCompuesta_Logic -> IDENTIFICADOR . operadoresCompuestosLogic BOOL
    (67) asignacionCompuesta_Logic -> IDENTIFICADOR . operadoresCompuestosLogic expresion_condicional
    (68) asignacionCompuesta_Logic -> IDENTIFICADOR . operadoresCompuestosLogic IDENTIFICADOR
    (69) asignacionCompuesta_Number -> IDENTIFICADOR . operadoresCompuestosNumber numero
    (70) asignacionCompuesta_Number -> IDENTIFICADOR . operadoresCompuestosNumber expresion_operacion_aritmetica
    (71) asignacionCompuesta_Number -> IDENTIFICADOR . operadoresCompuestosNumber IDENTIFICADOR
    (77) operadoresCompuestosLogic -> . AND_EQUAL
    (78) operadoresCompuestosLogic -> . OR_EQUAL
    (79) operadoresCompuestosLogic -> . EXC_OREQUAL
    (72) operadoresCompuestosNumber -> . AUMENTADO
    (73) operadoresCompuestosNumber -> . DECREMENTADO
    (74) operadoresCompuestosNumber -> . MULTIPLICADO_POR
    (75) operadoresCompuestosNumber -> . DIVIDIDO_POR
    (76) operadoresCompuestosNumber -> . MODULO_DE

    IGUAL           shift and go to state 75
    AND_EQUAL       shift and go to state 92
    OR_EQUAL        shift and go to state 93
    EXC_OREQUAL     shift and go to state 94
    AUMENTADO       shift and go to state 95
    DECREMENTADO    shift and go to state 96
    MULTIPLICADO_POR shift and go to state 97
    DIVIDIDO_POR    shift and go to state 98
    MODULO_DE       shift and go to state 99

    operadoresCompuestosLogic      shift and go to state 79
    operadoresCompuestosNumber     shift and go to state 80

state 164

    (126) stack_push -> IDENTIFICADOR PUNTO PUSH PAR_IZQ . valor PAR_DER
    (11) valor -> . CHAR
    (12) valor -> . numero
    (13) valor -> . BOOL
    (14) valor -> . STRING
    (15) valor -> . IDENTIFICADOR
    (16) numero -> . FLOAT
    (17) numero -> . DOUBLE
    (18) numero -> . INT

    CHAR            shift and go to state 35
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    IDENTIFICADOR   shift and go to state 113
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55

    valor                          shift and go to state 186
    numero                         shift and go to state 112

state 165

    (127) stack_pop -> IDENTIFICADOR PUNTO POP PAR_IZQ . PAR_DER

    PAR_DER         shift and go to state 187


state 166

    (101) for -> FOR PAR_IZQ forInicializador END_OF_LINE . forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DER
    (105) forCondicion -> . IDENTIFICADOR operador_condicional valorForCondicion

    IDENTIFICADOR   shift and go to state 189

    forCondicion                   shift and go to state 188

state 167

    (110) forInicializador -> tipoDatoForInicializador IDENTIFICADOR . IGUAL valorForInicializador

    IGUAL           shift and go to state 190


state 168

    (111) forInicializador -> IDENTIFICADOR IGUAL . valorForInicializador
    (115) valorForInicializador -> . FLOAT
    (116) valorForInicializador -> . DOUBLE
    (117) valorForInicializador -> . INT
    (118) valorForInicializador -> . IDENTIFICADOR

    FLOAT           shift and go to state 193
    DOUBLE          shift and go to state 194
    INT             shift and go to state 195
    IDENTIFICADOR   shift and go to state 191

    valorForInicializador          shift and go to state 192

state 169

    (121) lista -> LIST tipoLista IDENTIFICADOR IGUAL . NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINE

    NEW             shift and go to state 196


state 170

    (122) tipoLista -> MENOR_QUE valor_tipo_inicializador MAYOR_QUE .

    IDENTIFICADOR   reduce using rule 122 (tipoLista -> MENOR_QUE valor_tipo_inicializador MAYOR_QUE .)
    PAR_IZQ         reduce using rule 122 (tipoLista -> MENOR_QUE valor_tipo_inicializador MAYOR_QUE .)


state 171

    (123) stack -> STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE . IDENTIFICADOR IGUAL NEW STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINE

    IDENTIFICADOR   shift and go to state 197


state 172

    (139) salida_uno -> CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER .

    END_OF_LINE     reduce using rule 139 (salida_uno -> CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER .)
    COMA            reduce using rule 139 (salida_uno -> CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER .)
    PAR_DER         reduce using rule 139 (salida_uno -> CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER .)


state 173

    (54) operacion_string -> STRING SUMA . STRING
    (55) operacion_string -> STRING SUMA . IDENTIFICADOR

    STRING          shift and go to state 198
    IDENTIFICADOR   shift and go to state 199


state 174

    (140) salida_uno -> CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER .

    END_OF_LINE     reduce using rule 140 (salida_uno -> CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER .)
    COMA            reduce using rule 140 (salida_uno -> CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER .)
    PAR_DER         reduce using rule 140 (salida_uno -> CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER .)


state 175

    (141) salida_uno -> CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER .

    END_OF_LINE     reduce using rule 141 (salida_uno -> CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER .)
    COMA            reduce using rule 141 (salida_uno -> CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER .)
    PAR_DER         reduce using rule 141 (salida_uno -> CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER .)


state 176

    (56) operacion_string -> IDENTIFICADOR SUMA . STRING
    (57) operacion_string -> IDENTIFICADOR SUMA . IDENTIFICADOR

    STRING          shift and go to state 201
    IDENTIFICADOR   shift and go to state 200


state 177

    (142) salida_dos -> CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING . PAR_DER

    PAR_DER         shift and go to state 202


state 178

    (146) funcion_tipo_uno -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ . PAR_DER LLAVE_IZQ body LLAVE_DER
    (147) funcion_tipo_tres -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ . parametrosF PAR_DER LLAVE_IZQ bodyF LLAVE_DER
    (148) parametrosF -> . declaracion
    (149) parametrosF -> . declaracion COMA parametrosF
    (80) declaracion -> . valor_tipo IDENTIFICADOR
    (81) declaracion -> . valor_tipo asignacionSimple
    (21) valor_tipo -> . CHAR_TYPE
    (22) valor_tipo -> . FLOAT_TYPE
    (23) valor_tipo -> . DOUBLE_TYPE
    (24) valor_tipo -> . INT_TYPE
    (25) valor_tipo -> . BOOL_TYPE
    (26) valor_tipo -> . STRING_TYPE

    PAR_DER         shift and go to state 203
    CHAR_TYPE       shift and go to state 47
    FLOAT_TYPE      shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    INT_TYPE        shift and go to state 50
    BOOL_TYPE       shift and go to state 51
    STRING_TYPE     shift and go to state 52

    parametrosF                    shift and go to state 204
    declaracion                    shift and go to state 205
    valor_tipo                     shift and go to state 28

state 179

    (88) while_normal -> WHILE PAR_IZQ expresion_condicional PAR_DER . LLAVE_IZQ body_while LLAVE_DER

    LLAVE_IZQ       shift and go to state 206


state 180

    (89) while_do -> DO LLAVE_IZQ body_while LLAVE_DER . WHILE PAR_IZQ expresion_condicional PAR_DER END_OF_LINE

    WHILE           shift and go to state 207


state 181

    (90) body_while -> asignacion END_OF_LINE .
    (95) body_while -> asignacion END_OF_LINE . body_while
    (90) body_while -> . asignacion END_OF_LINE
    (91) body_while -> . declaracion END_OF_LINE
    (92) body_while -> . salida_entrada END_OF_LINE
    (93) body_while -> . BREAK END_OF_LINE
    (94) body_while -> . CONTINUE END_OF_LINE
    (95) body_while -> . asignacion END_OF_LINE body_while
    (96) body_while -> . declaracion END_OF_LINE body_while
    (97) body_while -> . salida_entrada END_OF_LINE body_while
    (98) body_while -> . BREAK END_OF_LINE body_while
    (99) body_while -> . CONTINUE END_OF_LINE body_while
    (59) asignacion -> . asignacionSimple
    (60) asignacion -> . asignacionCompuesta
    (80) declaracion -> . valor_tipo IDENTIFICADOR
    (81) declaracion -> . valor_tipo asignacionSimple
    (136) salida_entrada -> . salida_uno
    (137) salida_entrada -> . salida_dos
    (138) salida_entrada -> . salida_tres
    (61) asignacionSimple -> . IDENTIFICADOR IGUAL valor
    (62) asignacionSimple -> . IDENTIFICADOR IGUAL expresion
    (63) asignacionSimple -> . IDENTIFICADOR IGUAL salida_entrada
    (64) asignacionCompuesta -> . asignacionCompuesta_Logic
    (65) asignacionCompuesta -> . asignacionCompuesta_Number
    (21) valor_tipo -> . CHAR_TYPE
    (22) valor_tipo -> . FLOAT_TYPE
    (23) valor_tipo -> . DOUBLE_TYPE
    (24) valor_tipo -> . INT_TYPE
    (25) valor_tipo -> . BOOL_TYPE
    (26) valor_tipo -> . STRING_TYPE
    (139) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER
    (140) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER
    (141) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER
    (142) salida_dos -> . CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER
    (143) salida_tres -> . CONSOLE_READLINE PAR_IZQ PAR_DER
    (66) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic BOOL
    (67) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic expresion_condicional
    (68) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR
    (69) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber numero
    (70) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica
    (71) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR

    LLAVE_DER       reduce using rule 90 (body_while -> asignacion END_OF_LINE .)
    BREAK           shift and go to state 161
    CONTINUE        shift and go to state 162
    IDENTIFICADOR   shift and go to state 163
    CHAR_TYPE       shift and go to state 47
    FLOAT_TYPE      shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    INT_TYPE        shift and go to state 50
    BOOL_TYPE       shift and go to state 51
    STRING_TYPE     shift and go to state 52
    CONSOLE_WRITELINE shift and go to state 44
    CONSOLE_READLINE shift and go to state 45

    asignacion                     shift and go to state 158
    body_while                     shift and go to state 208
    declaracion                    shift and go to state 159
    salida_entrada                 shift and go to state 160
    asignacionSimple               shift and go to state 13
    asignacionCompuesta            shift and go to state 14
    valor_tipo                     shift and go to state 28
    salida_uno                     shift and go to state 23
    salida_dos                     shift and go to state 24
    salida_tres                    shift and go to state 25
    asignacionCompuesta_Logic      shift and go to state 33
    asignacionCompuesta_Number     shift and go to state 34

state 182

    (91) body_while -> declaracion END_OF_LINE .
    (96) body_while -> declaracion END_OF_LINE . body_while
    (90) body_while -> . asignacion END_OF_LINE
    (91) body_while -> . declaracion END_OF_LINE
    (92) body_while -> . salida_entrada END_OF_LINE
    (93) body_while -> . BREAK END_OF_LINE
    (94) body_while -> . CONTINUE END_OF_LINE
    (95) body_while -> . asignacion END_OF_LINE body_while
    (96) body_while -> . declaracion END_OF_LINE body_while
    (97) body_while -> . salida_entrada END_OF_LINE body_while
    (98) body_while -> . BREAK END_OF_LINE body_while
    (99) body_while -> . CONTINUE END_OF_LINE body_while
    (59) asignacion -> . asignacionSimple
    (60) asignacion -> . asignacionCompuesta
    (80) declaracion -> . valor_tipo IDENTIFICADOR
    (81) declaracion -> . valor_tipo asignacionSimple
    (136) salida_entrada -> . salida_uno
    (137) salida_entrada -> . salida_dos
    (138) salida_entrada -> . salida_tres
    (61) asignacionSimple -> . IDENTIFICADOR IGUAL valor
    (62) asignacionSimple -> . IDENTIFICADOR IGUAL expresion
    (63) asignacionSimple -> . IDENTIFICADOR IGUAL salida_entrada
    (64) asignacionCompuesta -> . asignacionCompuesta_Logic
    (65) asignacionCompuesta -> . asignacionCompuesta_Number
    (21) valor_tipo -> . CHAR_TYPE
    (22) valor_tipo -> . FLOAT_TYPE
    (23) valor_tipo -> . DOUBLE_TYPE
    (24) valor_tipo -> . INT_TYPE
    (25) valor_tipo -> . BOOL_TYPE
    (26) valor_tipo -> . STRING_TYPE
    (139) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER
    (140) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER
    (141) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER
    (142) salida_dos -> . CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER
    (143) salida_tres -> . CONSOLE_READLINE PAR_IZQ PAR_DER
    (66) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic BOOL
    (67) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic expresion_condicional
    (68) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR
    (69) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber numero
    (70) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica
    (71) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR

    LLAVE_DER       reduce using rule 91 (body_while -> declaracion END_OF_LINE .)
    BREAK           shift and go to state 161
    CONTINUE        shift and go to state 162
    IDENTIFICADOR   shift and go to state 163
    CHAR_TYPE       shift and go to state 47
    FLOAT_TYPE      shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    INT_TYPE        shift and go to state 50
    BOOL_TYPE       shift and go to state 51
    STRING_TYPE     shift and go to state 52
    CONSOLE_WRITELINE shift and go to state 44
    CONSOLE_READLINE shift and go to state 45

    declaracion                    shift and go to state 159
    body_while                     shift and go to state 209
    asignacion                     shift and go to state 158
    salida_entrada                 shift and go to state 160
    asignacionSimple               shift and go to state 13
    asignacionCompuesta            shift and go to state 14
    valor_tipo                     shift and go to state 28
    salida_uno                     shift and go to state 23
    salida_dos                     shift and go to state 24
    salida_tres                    shift and go to state 25
    asignacionCompuesta_Logic      shift and go to state 33
    asignacionCompuesta_Number     shift and go to state 34

state 183

    (92) body_while -> salida_entrada END_OF_LINE .
    (97) body_while -> salida_entrada END_OF_LINE . body_while
    (90) body_while -> . asignacion END_OF_LINE
    (91) body_while -> . declaracion END_OF_LINE
    (92) body_while -> . salida_entrada END_OF_LINE
    (93) body_while -> . BREAK END_OF_LINE
    (94) body_while -> . CONTINUE END_OF_LINE
    (95) body_while -> . asignacion END_OF_LINE body_while
    (96) body_while -> . declaracion END_OF_LINE body_while
    (97) body_while -> . salida_entrada END_OF_LINE body_while
    (98) body_while -> . BREAK END_OF_LINE body_while
    (99) body_while -> . CONTINUE END_OF_LINE body_while
    (59) asignacion -> . asignacionSimple
    (60) asignacion -> . asignacionCompuesta
    (80) declaracion -> . valor_tipo IDENTIFICADOR
    (81) declaracion -> . valor_tipo asignacionSimple
    (136) salida_entrada -> . salida_uno
    (137) salida_entrada -> . salida_dos
    (138) salida_entrada -> . salida_tres
    (61) asignacionSimple -> . IDENTIFICADOR IGUAL valor
    (62) asignacionSimple -> . IDENTIFICADOR IGUAL expresion
    (63) asignacionSimple -> . IDENTIFICADOR IGUAL salida_entrada
    (64) asignacionCompuesta -> . asignacionCompuesta_Logic
    (65) asignacionCompuesta -> . asignacionCompuesta_Number
    (21) valor_tipo -> . CHAR_TYPE
    (22) valor_tipo -> . FLOAT_TYPE
    (23) valor_tipo -> . DOUBLE_TYPE
    (24) valor_tipo -> . INT_TYPE
    (25) valor_tipo -> . BOOL_TYPE
    (26) valor_tipo -> . STRING_TYPE
    (139) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER
    (140) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER
    (141) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER
    (142) salida_dos -> . CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER
    (143) salida_tres -> . CONSOLE_READLINE PAR_IZQ PAR_DER
    (66) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic BOOL
    (67) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic expresion_condicional
    (68) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR
    (69) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber numero
    (70) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica
    (71) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR

    LLAVE_DER       reduce using rule 92 (body_while -> salida_entrada END_OF_LINE .)
    BREAK           shift and go to state 161
    CONTINUE        shift and go to state 162
    IDENTIFICADOR   shift and go to state 163
    CHAR_TYPE       shift and go to state 47
    FLOAT_TYPE      shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    INT_TYPE        shift and go to state 50
    BOOL_TYPE       shift and go to state 51
    STRING_TYPE     shift and go to state 52
    CONSOLE_WRITELINE shift and go to state 44
    CONSOLE_READLINE shift and go to state 45

    salida_entrada                 shift and go to state 160
    body_while                     shift and go to state 210
    asignacion                     shift and go to state 158
    declaracion                    shift and go to state 159
    asignacionSimple               shift and go to state 13
    asignacionCompuesta            shift and go to state 14
    valor_tipo                     shift and go to state 28
    salida_uno                     shift and go to state 23
    salida_dos                     shift and go to state 24
    salida_tres                    shift and go to state 25
    asignacionCompuesta_Logic      shift and go to state 33
    asignacionCompuesta_Number     shift and go to state 34

state 184

    (93) body_while -> BREAK END_OF_LINE .
    (98) body_while -> BREAK END_OF_LINE . body_while
    (90) body_while -> . asignacion END_OF_LINE
    (91) body_while -> . declaracion END_OF_LINE
    (92) body_while -> . salida_entrada END_OF_LINE
    (93) body_while -> . BREAK END_OF_LINE
    (94) body_while -> . CONTINUE END_OF_LINE
    (95) body_while -> . asignacion END_OF_LINE body_while
    (96) body_while -> . declaracion END_OF_LINE body_while
    (97) body_while -> . salida_entrada END_OF_LINE body_while
    (98) body_while -> . BREAK END_OF_LINE body_while
    (99) body_while -> . CONTINUE END_OF_LINE body_while
    (59) asignacion -> . asignacionSimple
    (60) asignacion -> . asignacionCompuesta
    (80) declaracion -> . valor_tipo IDENTIFICADOR
    (81) declaracion -> . valor_tipo asignacionSimple
    (136) salida_entrada -> . salida_uno
    (137) salida_entrada -> . salida_dos
    (138) salida_entrada -> . salida_tres
    (61) asignacionSimple -> . IDENTIFICADOR IGUAL valor
    (62) asignacionSimple -> . IDENTIFICADOR IGUAL expresion
    (63) asignacionSimple -> . IDENTIFICADOR IGUAL salida_entrada
    (64) asignacionCompuesta -> . asignacionCompuesta_Logic
    (65) asignacionCompuesta -> . asignacionCompuesta_Number
    (21) valor_tipo -> . CHAR_TYPE
    (22) valor_tipo -> . FLOAT_TYPE
    (23) valor_tipo -> . DOUBLE_TYPE
    (24) valor_tipo -> . INT_TYPE
    (25) valor_tipo -> . BOOL_TYPE
    (26) valor_tipo -> . STRING_TYPE
    (139) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER
    (140) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER
    (141) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER
    (142) salida_dos -> . CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER
    (143) salida_tres -> . CONSOLE_READLINE PAR_IZQ PAR_DER
    (66) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic BOOL
    (67) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic expresion_condicional
    (68) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR
    (69) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber numero
    (70) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica
    (71) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR

    LLAVE_DER       reduce using rule 93 (body_while -> BREAK END_OF_LINE .)
    BREAK           shift and go to state 161
    CONTINUE        shift and go to state 162
    IDENTIFICADOR   shift and go to state 163
    CHAR_TYPE       shift and go to state 47
    FLOAT_TYPE      shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    INT_TYPE        shift and go to state 50
    BOOL_TYPE       shift and go to state 51
    STRING_TYPE     shift and go to state 52
    CONSOLE_WRITELINE shift and go to state 44
    CONSOLE_READLINE shift and go to state 45

    body_while                     shift and go to state 211
    asignacion                     shift and go to state 158
    declaracion                    shift and go to state 159
    salida_entrada                 shift and go to state 160
    asignacionSimple               shift and go to state 13
    asignacionCompuesta            shift and go to state 14
    valor_tipo                     shift and go to state 28
    salida_uno                     shift and go to state 23
    salida_dos                     shift and go to state 24
    salida_tres                    shift and go to state 25
    asignacionCompuesta_Logic      shift and go to state 33
    asignacionCompuesta_Number     shift and go to state 34

state 185

    (94) body_while -> CONTINUE END_OF_LINE .
    (99) body_while -> CONTINUE END_OF_LINE . body_while
    (90) body_while -> . asignacion END_OF_LINE
    (91) body_while -> . declaracion END_OF_LINE
    (92) body_while -> . salida_entrada END_OF_LINE
    (93) body_while -> . BREAK END_OF_LINE
    (94) body_while -> . CONTINUE END_OF_LINE
    (95) body_while -> . asignacion END_OF_LINE body_while
    (96) body_while -> . declaracion END_OF_LINE body_while
    (97) body_while -> . salida_entrada END_OF_LINE body_while
    (98) body_while -> . BREAK END_OF_LINE body_while
    (99) body_while -> . CONTINUE END_OF_LINE body_while
    (59) asignacion -> . asignacionSimple
    (60) asignacion -> . asignacionCompuesta
    (80) declaracion -> . valor_tipo IDENTIFICADOR
    (81) declaracion -> . valor_tipo asignacionSimple
    (136) salida_entrada -> . salida_uno
    (137) salida_entrada -> . salida_dos
    (138) salida_entrada -> . salida_tres
    (61) asignacionSimple -> . IDENTIFICADOR IGUAL valor
    (62) asignacionSimple -> . IDENTIFICADOR IGUAL expresion
    (63) asignacionSimple -> . IDENTIFICADOR IGUAL salida_entrada
    (64) asignacionCompuesta -> . asignacionCompuesta_Logic
    (65) asignacionCompuesta -> . asignacionCompuesta_Number
    (21) valor_tipo -> . CHAR_TYPE
    (22) valor_tipo -> . FLOAT_TYPE
    (23) valor_tipo -> . DOUBLE_TYPE
    (24) valor_tipo -> . INT_TYPE
    (25) valor_tipo -> . BOOL_TYPE
    (26) valor_tipo -> . STRING_TYPE
    (139) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER
    (140) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER
    (141) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER
    (142) salida_dos -> . CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER
    (143) salida_tres -> . CONSOLE_READLINE PAR_IZQ PAR_DER
    (66) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic BOOL
    (67) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic expresion_condicional
    (68) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR
    (69) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber numero
    (70) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica
    (71) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR

    LLAVE_DER       reduce using rule 94 (body_while -> CONTINUE END_OF_LINE .)
    BREAK           shift and go to state 161
    CONTINUE        shift and go to state 162
    IDENTIFICADOR   shift and go to state 163
    CHAR_TYPE       shift and go to state 47
    FLOAT_TYPE      shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    INT_TYPE        shift and go to state 50
    BOOL_TYPE       shift and go to state 51
    STRING_TYPE     shift and go to state 52
    CONSOLE_WRITELINE shift and go to state 44
    CONSOLE_READLINE shift and go to state 45

    body_while                     shift and go to state 212
    asignacion                     shift and go to state 158
    declaracion                    shift and go to state 159
    salida_entrada                 shift and go to state 160
    asignacionSimple               shift and go to state 13
    asignacionCompuesta            shift and go to state 14
    valor_tipo                     shift and go to state 28
    salida_uno                     shift and go to state 23
    salida_dos                     shift and go to state 24
    salida_tres                    shift and go to state 25
    asignacionCompuesta_Logic      shift and go to state 33
    asignacionCompuesta_Number     shift and go to state 34

state 186

    (126) stack_push -> IDENTIFICADOR PUNTO PUSH PAR_IZQ valor . PAR_DER

    PAR_DER         shift and go to state 213


state 187

    (127) stack_pop -> IDENTIFICADOR PUNTO POP PAR_IZQ PAR_DER .

    END_OF_LINE     reduce using rule 127 (stack_pop -> IDENTIFICADOR PUNTO POP PAR_IZQ PAR_DER .)


state 188

    (101) for -> FOR PAR_IZQ forInicializador END_OF_LINE forCondicion . END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DER

    END_OF_LINE     shift and go to state 214


state 189

    (105) forCondicion -> IDENTIFICADOR . operador_condicional valorForCondicion
    (48) operador_condicional -> . IGUAL_IGUAL
    (49) operador_condicional -> . NO_IGUAL
    (50) operador_condicional -> . MENOR_QUE
    (51) operador_condicional -> . MENOR_O_IGUAL_QUE
    (52) operador_condicional -> . MAYOR_QUE
    (53) operador_condicional -> . MAYOR_O_IGUAL_QUE

    IGUAL_IGUAL     shift and go to state 86
    NO_IGUAL        shift and go to state 87
    MENOR_QUE       shift and go to state 88
    MENOR_O_IGUAL_QUE shift and go to state 89
    MAYOR_QUE       shift and go to state 90
    MAYOR_O_IGUAL_QUE shift and go to state 91

    operador_condicional           shift and go to state 215

state 190

    (110) forInicializador -> tipoDatoForInicializador IDENTIFICADOR IGUAL . valorForInicializador
    (115) valorForInicializador -> . FLOAT
    (116) valorForInicializador -> . DOUBLE
    (117) valorForInicializador -> . INT
    (118) valorForInicializador -> . IDENTIFICADOR

    FLOAT           shift and go to state 193
    DOUBLE          shift and go to state 194
    INT             shift and go to state 195
    IDENTIFICADOR   shift and go to state 191

    valorForInicializador          shift and go to state 216

state 191

    (118) valorForInicializador -> IDENTIFICADOR .

    END_OF_LINE     reduce using rule 118 (valorForInicializador -> IDENTIFICADOR .)


state 192

    (111) forInicializador -> IDENTIFICADOR IGUAL valorForInicializador .

    END_OF_LINE     reduce using rule 111 (forInicializador -> IDENTIFICADOR IGUAL valorForInicializador .)


state 193

    (115) valorForInicializador -> FLOAT .

    END_OF_LINE     reduce using rule 115 (valorForInicializador -> FLOAT .)


state 194

    (116) valorForInicializador -> DOUBLE .

    END_OF_LINE     reduce using rule 116 (valorForInicializador -> DOUBLE .)


state 195

    (117) valorForInicializador -> INT .

    END_OF_LINE     reduce using rule 117 (valorForInicializador -> INT .)


state 196

    (121) lista -> LIST tipoLista IDENTIFICADOR IGUAL NEW . LIST tipoLista PAR_IZQ PAR_DER END_OF_LINE

    LIST            shift and go to state 217


state 197

    (123) stack -> STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR . IGUAL NEW STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINE

    IGUAL           shift and go to state 218


state 198

    (54) operacion_string -> STRING SUMA STRING .

    PAR_DER         reduce using rule 54 (operacion_string -> STRING SUMA STRING .)


state 199

    (55) operacion_string -> STRING SUMA IDENTIFICADOR .

    PAR_DER         reduce using rule 55 (operacion_string -> STRING SUMA IDENTIFICADOR .)


state 200

    (57) operacion_string -> IDENTIFICADOR SUMA IDENTIFICADOR .

    PAR_DER         reduce using rule 57 (operacion_string -> IDENTIFICADOR SUMA IDENTIFICADOR .)


state 201

    (56) operacion_string -> IDENTIFICADOR SUMA STRING .

    PAR_DER         reduce using rule 56 (operacion_string -> IDENTIFICADOR SUMA STRING .)


state 202

    (142) salida_dos -> CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER .

    END_OF_LINE     reduce using rule 142 (salida_dos -> CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER .)
    COMA            reduce using rule 142 (salida_dos -> CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER .)
    PAR_DER         reduce using rule 142 (salida_dos -> CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER .)


state 203

    (146) funcion_tipo_uno -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ PAR_DER . LLAVE_IZQ body LLAVE_DER

    LLAVE_IZQ       shift and go to state 219


state 204

    (147) funcion_tipo_tres -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ parametrosF . PAR_DER LLAVE_IZQ bodyF LLAVE_DER

    PAR_DER         shift and go to state 220


state 205

    (148) parametrosF -> declaracion .
    (149) parametrosF -> declaracion . COMA parametrosF

    PAR_DER         reduce using rule 148 (parametrosF -> declaracion .)
    COMA            shift and go to state 221


state 206

    (88) while_normal -> WHILE PAR_IZQ expresion_condicional PAR_DER LLAVE_IZQ . body_while LLAVE_DER
    (90) body_while -> . asignacion END_OF_LINE
    (91) body_while -> . declaracion END_OF_LINE
    (92) body_while -> . salida_entrada END_OF_LINE
    (93) body_while -> . BREAK END_OF_LINE
    (94) body_while -> . CONTINUE END_OF_LINE
    (95) body_while -> . asignacion END_OF_LINE body_while
    (96) body_while -> . declaracion END_OF_LINE body_while
    (97) body_while -> . salida_entrada END_OF_LINE body_while
    (98) body_while -> . BREAK END_OF_LINE body_while
    (99) body_while -> . CONTINUE END_OF_LINE body_while
    (59) asignacion -> . asignacionSimple
    (60) asignacion -> . asignacionCompuesta
    (80) declaracion -> . valor_tipo IDENTIFICADOR
    (81) declaracion -> . valor_tipo asignacionSimple
    (136) salida_entrada -> . salida_uno
    (137) salida_entrada -> . salida_dos
    (138) salida_entrada -> . salida_tres
    (61) asignacionSimple -> . IDENTIFICADOR IGUAL valor
    (62) asignacionSimple -> . IDENTIFICADOR IGUAL expresion
    (63) asignacionSimple -> . IDENTIFICADOR IGUAL salida_entrada
    (64) asignacionCompuesta -> . asignacionCompuesta_Logic
    (65) asignacionCompuesta -> . asignacionCompuesta_Number
    (21) valor_tipo -> . CHAR_TYPE
    (22) valor_tipo -> . FLOAT_TYPE
    (23) valor_tipo -> . DOUBLE_TYPE
    (24) valor_tipo -> . INT_TYPE
    (25) valor_tipo -> . BOOL_TYPE
    (26) valor_tipo -> . STRING_TYPE
    (139) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER
    (140) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER
    (141) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER
    (142) salida_dos -> . CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER
    (143) salida_tres -> . CONSOLE_READLINE PAR_IZQ PAR_DER
    (66) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic BOOL
    (67) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic expresion_condicional
    (68) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR
    (69) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber numero
    (70) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica
    (71) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR

    BREAK           shift and go to state 161
    CONTINUE        shift and go to state 162
    IDENTIFICADOR   shift and go to state 163
    CHAR_TYPE       shift and go to state 47
    FLOAT_TYPE      shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    INT_TYPE        shift and go to state 50
    BOOL_TYPE       shift and go to state 51
    STRING_TYPE     shift and go to state 52
    CONSOLE_WRITELINE shift and go to state 44
    CONSOLE_READLINE shift and go to state 45

    body_while                     shift and go to state 222
    asignacion                     shift and go to state 158
    declaracion                    shift and go to state 159
    salida_entrada                 shift and go to state 160
    asignacionSimple               shift and go to state 13
    asignacionCompuesta            shift and go to state 14
    valor_tipo                     shift and go to state 28
    salida_uno                     shift and go to state 23
    salida_dos                     shift and go to state 24
    salida_tres                    shift and go to state 25
    asignacionCompuesta_Logic      shift and go to state 33
    asignacionCompuesta_Number     shift and go to state 34

state 207

    (89) while_do -> DO LLAVE_IZQ body_while LLAVE_DER WHILE . PAR_IZQ expresion_condicional PAR_DER END_OF_LINE

    PAR_IZQ         shift and go to state 223


state 208

    (95) body_while -> asignacion END_OF_LINE body_while .

    LLAVE_DER       reduce using rule 95 (body_while -> asignacion END_OF_LINE body_while .)


state 209

    (96) body_while -> declaracion END_OF_LINE body_while .

    LLAVE_DER       reduce using rule 96 (body_while -> declaracion END_OF_LINE body_while .)


state 210

    (97) body_while -> salida_entrada END_OF_LINE body_while .

    LLAVE_DER       reduce using rule 97 (body_while -> salida_entrada END_OF_LINE body_while .)


state 211

    (98) body_while -> BREAK END_OF_LINE body_while .

    LLAVE_DER       reduce using rule 98 (body_while -> BREAK END_OF_LINE body_while .)


state 212

    (99) body_while -> CONTINUE END_OF_LINE body_while .

    LLAVE_DER       reduce using rule 99 (body_while -> CONTINUE END_OF_LINE body_while .)


state 213

    (126) stack_push -> IDENTIFICADOR PUNTO PUSH PAR_IZQ valor PAR_DER .

    END_OF_LINE     reduce using rule 126 (stack_push -> IDENTIFICADOR PUNTO PUSH PAR_IZQ valor PAR_DER .)


state 214

    (101) for -> FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE . forIterador PAR_DER LLAVE_IZQ body LLAVE_DER
    (102) forIterador -> . IDENTIFICADOR operadorForIteracion

    IDENTIFICADOR   shift and go to state 225

    forIterador                    shift and go to state 224

state 215

    (105) forCondicion -> IDENTIFICADOR operador_condicional . valorForCondicion
    (106) valorForCondicion -> . FLOAT
    (107) valorForCondicion -> . DOUBLE
    (108) valorForCondicion -> . INT
    (109) valorForCondicion -> . IDENTIFICADOR

    FLOAT           shift and go to state 228
    DOUBLE          shift and go to state 229
    INT             shift and go to state 230
    IDENTIFICADOR   shift and go to state 226

    valorForCondicion              shift and go to state 227

state 216

    (110) forInicializador -> tipoDatoForInicializador IDENTIFICADOR IGUAL valorForInicializador .

    END_OF_LINE     reduce using rule 110 (forInicializador -> tipoDatoForInicializador IDENTIFICADOR IGUAL valorForInicializador .)


state 217

    (121) lista -> LIST tipoLista IDENTIFICADOR IGUAL NEW LIST . tipoLista PAR_IZQ PAR_DER END_OF_LINE
    (122) tipoLista -> . MENOR_QUE valor_tipo_inicializador MAYOR_QUE

    MENOR_QUE       shift and go to state 104

    tipoLista                      shift and go to state 231

state 218

    (123) stack -> STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL . NEW STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINE

    NEW             shift and go to state 232


state 219

    (146) funcion_tipo_uno -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ . body LLAVE_DER
    (1) body -> . asignacion END_OF_LINE
    (2) body -> . comparacion
    (3) body -> . estructura_control
    (4) body -> . estructura_datos
    (5) body -> . expresion END_OF_LINE
    (6) body -> . salida_entrada END_OF_LINE
    (7) body -> . funcion
    (8) body -> . declaracion END_OF_LINE
    (9) body -> . empty
    (10) body -> . funciones_estructura_datos END_OF_LINE
    (59) asignacion -> . asignacionSimple
    (60) asignacion -> . asignacionCompuesta
    (82) comparacion -> . valor operador_realacional valor
    (83) estructura_control -> . while
    (84) estructura_control -> . switch_case
    (85) estructura_control -> . for
    (119) estructura_datos -> . lista
    (120) estructura_datos -> . stack
    (128) expresion -> . expresion_operacion_aritmetica
    (129) expresion -> . expresion_condicional
    (136) salida_entrada -> . salida_uno
    (137) salida_entrada -> . salida_dos
    (138) salida_entrada -> . salida_tres
    (144) funcion -> . funcion_tipo_uno
    (145) funcion -> . funcion_tipo_tres
    (80) declaracion -> . valor_tipo IDENTIFICADOR
    (81) declaracion -> . valor_tipo asignacionSimple
    (58) empty -> . END_OF_LINE
    (124) funciones_estructura_datos -> . stack_push
    (125) funciones_estructura_datos -> . stack_pop
    (61) asignacionSimple -> . IDENTIFICADOR IGUAL valor
    (62) asignacionSimple -> . IDENTIFICADOR IGUAL expresion
    (63) asignacionSimple -> . IDENTIFICADOR IGUAL salida_entrada
    (64) asignacionCompuesta -> . asignacionCompuesta_Logic
    (65) asignacionCompuesta -> . asignacionCompuesta_Number
    (11) valor -> . CHAR
    (12) valor -> . numero
    (13) valor -> . BOOL
    (14) valor -> . STRING
    (15) valor -> . IDENTIFICADOR
    (86) while -> . while_normal
    (87) while -> . while_do
    (100) switch_case -> . IGUAL
    (101) for -> . FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DER
    (121) lista -> . LIST tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINE
    (123) stack -> . STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL NEW STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINE
    (130) expresion_operacion_aritmetica -> . numero operador_aritmentico numero
    (131) expresion_operacion_aritmetica -> . IDENTIFICADOR operador_aritmentico IDENTIFICADOR
    (132) expresion_condicional -> . numero operador_condicional numero
    (133) expresion_condicional -> . IDENTIFICADOR operador_condicional IDENTIFICADOR
    (134) expresion_condicional -> . IDENTIFICADOR operador_condicional numero
    (135) expresion_condicional -> . numero operador_condicional IDENTIFICADOR
    (139) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER
    (140) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER
    (141) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER
    (142) salida_dos -> . CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER
    (143) salida_tres -> . CONSOLE_READLINE PAR_IZQ PAR_DER
    (146) funcion_tipo_uno -> . modificador_acceso VOID IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ body LLAVE_DER
    (147) funcion_tipo_tres -> . modificador_acceso VOID IDENTIFICADOR PAR_IZQ parametrosF PAR_DER LLAVE_IZQ bodyF LLAVE_DER
    (21) valor_tipo -> . CHAR_TYPE
    (22) valor_tipo -> . FLOAT_TYPE
    (23) valor_tipo -> . DOUBLE_TYPE
    (24) valor_tipo -> . INT_TYPE
    (25) valor_tipo -> . BOOL_TYPE
    (26) valor_tipo -> . STRING_TYPE
    (126) stack_push -> . IDENTIFICADOR PUNTO PUSH PAR_IZQ valor PAR_DER
    (127) stack_pop -> . IDENTIFICADOR PUNTO POP PAR_IZQ PAR_DER
    (66) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic BOOL
    (67) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic expresion_condicional
    (68) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR
    (69) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber numero
    (70) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica
    (71) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR
    (16) numero -> . FLOAT
    (17) numero -> . DOUBLE
    (18) numero -> . INT
    (88) while_normal -> . WHILE PAR_IZQ expresion_condicional PAR_DER LLAVE_IZQ body_while LLAVE_DER
    (89) while_do -> . DO LLAVE_IZQ body_while LLAVE_DER WHILE PAR_IZQ expresion_condicional PAR_DER END_OF_LINE
    (34) modificador_acceso -> . PRIVATE
    (35) modificador_acceso -> . PROTECTED
    (36) modificador_acceso -> . PUBLIC

    END_OF_LINE     shift and go to state 3
    IDENTIFICADOR   shift and go to state 29
    CHAR            shift and go to state 35
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    IGUAL           shift and go to state 32
    FOR             shift and go to state 41
    LIST            shift and go to state 42
    STACK           shift and go to state 43
    CONSOLE_WRITELINE shift and go to state 44
    CONSOLE_READLINE shift and go to state 45
    CHAR_TYPE       shift and go to state 47
    FLOAT_TYPE      shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    INT_TYPE        shift and go to state 50
    BOOL_TYPE       shift and go to state 51
    STRING_TYPE     shift and go to state 52
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55
    WHILE           shift and go to state 56
    DO              shift and go to state 57
    PRIVATE         shift and go to state 58
    PROTECTED       shift and go to state 59
    PUBLIC          shift and go to state 60

    modificador_acceso             shift and go to state 46
    body                           shift and go to state 233
    asignacion                     shift and go to state 2
    comparacion                    shift and go to state 4
    estructura_control             shift and go to state 5
    estructura_datos               shift and go to state 6
    expresion                      shift and go to state 7
    salida_entrada                 shift and go to state 8
    funcion                        shift and go to state 9
    declaracion                    shift and go to state 10
    empty                          shift and go to state 11
    funciones_estructura_datos     shift and go to state 12
    asignacionSimple               shift and go to state 13
    asignacionCompuesta            shift and go to state 14
    valor                          shift and go to state 15
    while                          shift and go to state 16
    switch_case                    shift and go to state 17
    for                            shift and go to state 18
    lista                          shift and go to state 19
    stack                          shift and go to state 20
    expresion_operacion_aritmetica shift and go to state 21
    expresion_condicional          shift and go to state 22
    salida_uno                     shift and go to state 23
    salida_dos                     shift and go to state 24
    salida_tres                    shift and go to state 25
    funcion_tipo_uno               shift and go to state 26
    funcion_tipo_tres              shift and go to state 27
    valor_tipo                     shift and go to state 28
    stack_push                     shift and go to state 30
    stack_pop                      shift and go to state 31
    asignacionCompuesta_Logic      shift and go to state 33
    asignacionCompuesta_Number     shift and go to state 34
    numero                         shift and go to state 36
    while_normal                   shift and go to state 39
    while_do                       shift and go to state 40

state 220

    (147) funcion_tipo_tres -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ parametrosF PAR_DER . LLAVE_IZQ bodyF LLAVE_DER

    LLAVE_IZQ       shift and go to state 234


state 221

    (149) parametrosF -> declaracion COMA . parametrosF
    (148) parametrosF -> . declaracion
    (149) parametrosF -> . declaracion COMA parametrosF
    (80) declaracion -> . valor_tipo IDENTIFICADOR
    (81) declaracion -> . valor_tipo asignacionSimple
    (21) valor_tipo -> . CHAR_TYPE
    (22) valor_tipo -> . FLOAT_TYPE
    (23) valor_tipo -> . DOUBLE_TYPE
    (24) valor_tipo -> . INT_TYPE
    (25) valor_tipo -> . BOOL_TYPE
    (26) valor_tipo -> . STRING_TYPE

    CHAR_TYPE       shift and go to state 47
    FLOAT_TYPE      shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    INT_TYPE        shift and go to state 50
    BOOL_TYPE       shift and go to state 51
    STRING_TYPE     shift and go to state 52

    declaracion                    shift and go to state 205
    parametrosF                    shift and go to state 235
    valor_tipo                     shift and go to state 28

state 222

    (88) while_normal -> WHILE PAR_IZQ expresion_condicional PAR_DER LLAVE_IZQ body_while . LLAVE_DER

    LLAVE_DER       shift and go to state 236


state 223

    (89) while_do -> DO LLAVE_IZQ body_while LLAVE_DER WHILE PAR_IZQ . expresion_condicional PAR_DER END_OF_LINE
    (132) expresion_condicional -> . numero operador_condicional numero
    (133) expresion_condicional -> . IDENTIFICADOR operador_condicional IDENTIFICADOR
    (134) expresion_condicional -> . IDENTIFICADOR operador_condicional numero
    (135) expresion_condicional -> . numero operador_condicional IDENTIFICADOR
    (16) numero -> . FLOAT
    (17) numero -> . DOUBLE
    (18) numero -> . INT

    IDENTIFICADOR   shift and go to state 156
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55

    expresion_condicional          shift and go to state 237
    numero                         shift and go to state 126

state 224

    (101) for -> FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador . PAR_DER LLAVE_IZQ body LLAVE_DER

    PAR_DER         shift and go to state 238


state 225

    (102) forIterador -> IDENTIFICADOR . operadorForIteracion
    (103) operadorForIteracion -> . INCREMENTO
    (104) operadorForIteracion -> . DECREMENTO

    INCREMENTO      shift and go to state 240
    DECREMENTO      shift and go to state 241

    operadorForIteracion           shift and go to state 239

state 226

    (109) valorForCondicion -> IDENTIFICADOR .

    END_OF_LINE     reduce using rule 109 (valorForCondicion -> IDENTIFICADOR .)


state 227

    (105) forCondicion -> IDENTIFICADOR operador_condicional valorForCondicion .

    END_OF_LINE     reduce using rule 105 (forCondicion -> IDENTIFICADOR operador_condicional valorForCondicion .)


state 228

    (106) valorForCondicion -> FLOAT .

    END_OF_LINE     reduce using rule 106 (valorForCondicion -> FLOAT .)


state 229

    (107) valorForCondicion -> DOUBLE .

    END_OF_LINE     reduce using rule 107 (valorForCondicion -> DOUBLE .)


state 230

    (108) valorForCondicion -> INT .

    END_OF_LINE     reduce using rule 108 (valorForCondicion -> INT .)


state 231

    (121) lista -> LIST tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista . PAR_IZQ PAR_DER END_OF_LINE

    PAR_IZQ         shift and go to state 242


state 232

    (123) stack -> STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL NEW . STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINE

    STACK           shift and go to state 243


state 233

    (146) funcion_tipo_uno -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ body . LLAVE_DER

    LLAVE_DER       shift and go to state 244


state 234

    (147) funcion_tipo_tres -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ parametrosF PAR_DER LLAVE_IZQ . bodyF LLAVE_DER
    (150) bodyF -> . asignacion END_OF_LINE
    (151) bodyF -> . declaracion END_OF_LINE
    (152) bodyF -> . salida_entrada END_OF_LINE
    (153) bodyF -> . asignacion END_OF_LINE bodyF
    (154) bodyF -> . declaracion END_OF_LINE bodyF
    (155) bodyF -> . salida_entrada END_OF_LINE bodyF
    (59) asignacion -> . asignacionSimple
    (60) asignacion -> . asignacionCompuesta
    (80) declaracion -> . valor_tipo IDENTIFICADOR
    (81) declaracion -> . valor_tipo asignacionSimple
    (136) salida_entrada -> . salida_uno
    (137) salida_entrada -> . salida_dos
    (138) salida_entrada -> . salida_tres
    (61) asignacionSimple -> . IDENTIFICADOR IGUAL valor
    (62) asignacionSimple -> . IDENTIFICADOR IGUAL expresion
    (63) asignacionSimple -> . IDENTIFICADOR IGUAL salida_entrada
    (64) asignacionCompuesta -> . asignacionCompuesta_Logic
    (65) asignacionCompuesta -> . asignacionCompuesta_Number
    (21) valor_tipo -> . CHAR_TYPE
    (22) valor_tipo -> . FLOAT_TYPE
    (23) valor_tipo -> . DOUBLE_TYPE
    (24) valor_tipo -> . INT_TYPE
    (25) valor_tipo -> . BOOL_TYPE
    (26) valor_tipo -> . STRING_TYPE
    (139) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER
    (140) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER
    (141) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER
    (142) salida_dos -> . CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER
    (143) salida_tres -> . CONSOLE_READLINE PAR_IZQ PAR_DER
    (66) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic BOOL
    (67) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic expresion_condicional
    (68) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR
    (69) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber numero
    (70) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica
    (71) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR

    IDENTIFICADOR   shift and go to state 163
    CHAR_TYPE       shift and go to state 47
    FLOAT_TYPE      shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    INT_TYPE        shift and go to state 50
    BOOL_TYPE       shift and go to state 51
    STRING_TYPE     shift and go to state 52
    CONSOLE_WRITELINE shift and go to state 44
    CONSOLE_READLINE shift and go to state 45

    bodyF                          shift and go to state 245
    asignacion                     shift and go to state 246
    declaracion                    shift and go to state 247
    salida_entrada                 shift and go to state 248
    asignacionSimple               shift and go to state 13
    asignacionCompuesta            shift and go to state 14
    valor_tipo                     shift and go to state 28
    salida_uno                     shift and go to state 23
    salida_dos                     shift and go to state 24
    salida_tres                    shift and go to state 25
    asignacionCompuesta_Logic      shift and go to state 33
    asignacionCompuesta_Number     shift and go to state 34

state 235

    (149) parametrosF -> declaracion COMA parametrosF .

    PAR_DER         reduce using rule 149 (parametrosF -> declaracion COMA parametrosF .)


state 236

    (88) while_normal -> WHILE PAR_IZQ expresion_condicional PAR_DER LLAVE_IZQ body_while LLAVE_DER .

    $end            reduce using rule 88 (while_normal -> WHILE PAR_IZQ expresion_condicional PAR_DER LLAVE_IZQ body_while LLAVE_DER .)
    LLAVE_DER       reduce using rule 88 (while_normal -> WHILE PAR_IZQ expresion_condicional PAR_DER LLAVE_IZQ body_while LLAVE_DER .)


state 237

    (89) while_do -> DO LLAVE_IZQ body_while LLAVE_DER WHILE PAR_IZQ expresion_condicional . PAR_DER END_OF_LINE

    PAR_DER         shift and go to state 249


state 238

    (101) for -> FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER . LLAVE_IZQ body LLAVE_DER

    LLAVE_IZQ       shift and go to state 250


state 239

    (102) forIterador -> IDENTIFICADOR operadorForIteracion .

    PAR_DER         reduce using rule 102 (forIterador -> IDENTIFICADOR operadorForIteracion .)


state 240

    (103) operadorForIteracion -> INCREMENTO .

    PAR_DER         reduce using rule 103 (operadorForIteracion -> INCREMENTO .)


state 241

    (104) operadorForIteracion -> DECREMENTO .

    PAR_DER         reduce using rule 104 (operadorForIteracion -> DECREMENTO .)


state 242

    (121) lista -> LIST tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ . PAR_DER END_OF_LINE

    PAR_DER         shift and go to state 251


state 243

    (123) stack -> STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL NEW STACK . MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINE

    MENOR_QUE       shift and go to state 252


state 244

    (146) funcion_tipo_uno -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ body LLAVE_DER .

    $end            reduce using rule 146 (funcion_tipo_uno -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ body LLAVE_DER .)
    LLAVE_DER       reduce using rule 146 (funcion_tipo_uno -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ body LLAVE_DER .)


state 245

    (147) funcion_tipo_tres -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ parametrosF PAR_DER LLAVE_IZQ bodyF . LLAVE_DER

    LLAVE_DER       shift and go to state 253


state 246

    (150) bodyF -> asignacion . END_OF_LINE
    (153) bodyF -> asignacion . END_OF_LINE bodyF

    END_OF_LINE     shift and go to state 254


state 247

    (151) bodyF -> declaracion . END_OF_LINE
    (154) bodyF -> declaracion . END_OF_LINE bodyF

    END_OF_LINE     shift and go to state 255


state 248

    (152) bodyF -> salida_entrada . END_OF_LINE
    (155) bodyF -> salida_entrada . END_OF_LINE bodyF

    END_OF_LINE     shift and go to state 256


state 249

    (89) while_do -> DO LLAVE_IZQ body_while LLAVE_DER WHILE PAR_IZQ expresion_condicional PAR_DER . END_OF_LINE

    END_OF_LINE     shift and go to state 257


state 250

    (101) for -> FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ . body LLAVE_DER
    (1) body -> . asignacion END_OF_LINE
    (2) body -> . comparacion
    (3) body -> . estructura_control
    (4) body -> . estructura_datos
    (5) body -> . expresion END_OF_LINE
    (6) body -> . salida_entrada END_OF_LINE
    (7) body -> . funcion
    (8) body -> . declaracion END_OF_LINE
    (9) body -> . empty
    (10) body -> . funciones_estructura_datos END_OF_LINE
    (59) asignacion -> . asignacionSimple
    (60) asignacion -> . asignacionCompuesta
    (82) comparacion -> . valor operador_realacional valor
    (83) estructura_control -> . while
    (84) estructura_control -> . switch_case
    (85) estructura_control -> . for
    (119) estructura_datos -> . lista
    (120) estructura_datos -> . stack
    (128) expresion -> . expresion_operacion_aritmetica
    (129) expresion -> . expresion_condicional
    (136) salida_entrada -> . salida_uno
    (137) salida_entrada -> . salida_dos
    (138) salida_entrada -> . salida_tres
    (144) funcion -> . funcion_tipo_uno
    (145) funcion -> . funcion_tipo_tres
    (80) declaracion -> . valor_tipo IDENTIFICADOR
    (81) declaracion -> . valor_tipo asignacionSimple
    (58) empty -> . END_OF_LINE
    (124) funciones_estructura_datos -> . stack_push
    (125) funciones_estructura_datos -> . stack_pop
    (61) asignacionSimple -> . IDENTIFICADOR IGUAL valor
    (62) asignacionSimple -> . IDENTIFICADOR IGUAL expresion
    (63) asignacionSimple -> . IDENTIFICADOR IGUAL salida_entrada
    (64) asignacionCompuesta -> . asignacionCompuesta_Logic
    (65) asignacionCompuesta -> . asignacionCompuesta_Number
    (11) valor -> . CHAR
    (12) valor -> . numero
    (13) valor -> . BOOL
    (14) valor -> . STRING
    (15) valor -> . IDENTIFICADOR
    (86) while -> . while_normal
    (87) while -> . while_do
    (100) switch_case -> . IGUAL
    (101) for -> . FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DER
    (121) lista -> . LIST tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINE
    (123) stack -> . STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL NEW STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINE
    (130) expresion_operacion_aritmetica -> . numero operador_aritmentico numero
    (131) expresion_operacion_aritmetica -> . IDENTIFICADOR operador_aritmentico IDENTIFICADOR
    (132) expresion_condicional -> . numero operador_condicional numero
    (133) expresion_condicional -> . IDENTIFICADOR operador_condicional IDENTIFICADOR
    (134) expresion_condicional -> . IDENTIFICADOR operador_condicional numero
    (135) expresion_condicional -> . numero operador_condicional IDENTIFICADOR
    (139) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER
    (140) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER
    (141) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER
    (142) salida_dos -> . CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER
    (143) salida_tres -> . CONSOLE_READLINE PAR_IZQ PAR_DER
    (146) funcion_tipo_uno -> . modificador_acceso VOID IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ body LLAVE_DER
    (147) funcion_tipo_tres -> . modificador_acceso VOID IDENTIFICADOR PAR_IZQ parametrosF PAR_DER LLAVE_IZQ bodyF LLAVE_DER
    (21) valor_tipo -> . CHAR_TYPE
    (22) valor_tipo -> . FLOAT_TYPE
    (23) valor_tipo -> . DOUBLE_TYPE
    (24) valor_tipo -> . INT_TYPE
    (25) valor_tipo -> . BOOL_TYPE
    (26) valor_tipo -> . STRING_TYPE
    (126) stack_push -> . IDENTIFICADOR PUNTO PUSH PAR_IZQ valor PAR_DER
    (127) stack_pop -> . IDENTIFICADOR PUNTO POP PAR_IZQ PAR_DER
    (66) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic BOOL
    (67) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic expresion_condicional
    (68) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR
    (69) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber numero
    (70) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica
    (71) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR
    (16) numero -> . FLOAT
    (17) numero -> . DOUBLE
    (18) numero -> . INT
    (88) while_normal -> . WHILE PAR_IZQ expresion_condicional PAR_DER LLAVE_IZQ body_while LLAVE_DER
    (89) while_do -> . DO LLAVE_IZQ body_while LLAVE_DER WHILE PAR_IZQ expresion_condicional PAR_DER END_OF_LINE
    (34) modificador_acceso -> . PRIVATE
    (35) modificador_acceso -> . PROTECTED
    (36) modificador_acceso -> . PUBLIC

    END_OF_LINE     shift and go to state 3
    IDENTIFICADOR   shift and go to state 29
    CHAR            shift and go to state 35
    BOOL            shift and go to state 37
    STRING          shift and go to state 38
    IGUAL           shift and go to state 32
    FOR             shift and go to state 41
    LIST            shift and go to state 42
    STACK           shift and go to state 43
    CONSOLE_WRITELINE shift and go to state 44
    CONSOLE_READLINE shift and go to state 45
    CHAR_TYPE       shift and go to state 47
    FLOAT_TYPE      shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    INT_TYPE        shift and go to state 50
    BOOL_TYPE       shift and go to state 51
    STRING_TYPE     shift and go to state 52
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55
    WHILE           shift and go to state 56
    DO              shift and go to state 57
    PRIVATE         shift and go to state 58
    PROTECTED       shift and go to state 59
    PUBLIC          shift and go to state 60

    body                           shift and go to state 258
    asignacion                     shift and go to state 2
    comparacion                    shift and go to state 4
    estructura_control             shift and go to state 5
    estructura_datos               shift and go to state 6
    expresion                      shift and go to state 7
    salida_entrada                 shift and go to state 8
    funcion                        shift and go to state 9
    declaracion                    shift and go to state 10
    empty                          shift and go to state 11
    funciones_estructura_datos     shift and go to state 12
    asignacionSimple               shift and go to state 13
    asignacionCompuesta            shift and go to state 14
    valor                          shift and go to state 15
    while                          shift and go to state 16
    switch_case                    shift and go to state 17
    for                            shift and go to state 18
    lista                          shift and go to state 19
    stack                          shift and go to state 20
    expresion_operacion_aritmetica shift and go to state 21
    expresion_condicional          shift and go to state 22
    salida_uno                     shift and go to state 23
    salida_dos                     shift and go to state 24
    salida_tres                    shift and go to state 25
    funcion_tipo_uno               shift and go to state 26
    funcion_tipo_tres              shift and go to state 27
    valor_tipo                     shift and go to state 28
    stack_push                     shift and go to state 30
    stack_pop                      shift and go to state 31
    asignacionCompuesta_Logic      shift and go to state 33
    asignacionCompuesta_Number     shift and go to state 34
    numero                         shift and go to state 36
    while_normal                   shift and go to state 39
    while_do                       shift and go to state 40
    modificador_acceso             shift and go to state 46

state 251

    (121) lista -> LIST tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER . END_OF_LINE

    END_OF_LINE     shift and go to state 259


state 252

    (123) stack -> STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL NEW STACK MENOR_QUE . valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINE
    (27) valor_tipo_inicializador -> . FLOAT_TYPE
    (28) valor_tipo_inicializador -> . DOUBLE_TYPE
    (29) valor_tipo_inicializador -> . STRING_TYPE
    (30) valor_tipo_inicializador -> . INT_TYPE
    (31) valor_tipo_inicializador -> . BOOL_TYPE
    (32) valor_tipo_inicializador -> . CHAR_TYPE
    (33) valor_tipo_inicializador -> . IDENTIFICADOR

    FLOAT_TYPE      shift and go to state 141
    DOUBLE_TYPE     shift and go to state 142
    STRING_TYPE     shift and go to state 143
    INT_TYPE        shift and go to state 144
    BOOL_TYPE       shift and go to state 145
    CHAR_TYPE       shift and go to state 146
    IDENTIFICADOR   shift and go to state 147

    valor_tipo_inicializador       shift and go to state 260

state 253

    (147) funcion_tipo_tres -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ parametrosF PAR_DER LLAVE_IZQ bodyF LLAVE_DER .

    $end            reduce using rule 147 (funcion_tipo_tres -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ parametrosF PAR_DER LLAVE_IZQ bodyF LLAVE_DER .)
    LLAVE_DER       reduce using rule 147 (funcion_tipo_tres -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ parametrosF PAR_DER LLAVE_IZQ bodyF LLAVE_DER .)


state 254

    (150) bodyF -> asignacion END_OF_LINE .
    (153) bodyF -> asignacion END_OF_LINE . bodyF
    (150) bodyF -> . asignacion END_OF_LINE
    (151) bodyF -> . declaracion END_OF_LINE
    (152) bodyF -> . salida_entrada END_OF_LINE
    (153) bodyF -> . asignacion END_OF_LINE bodyF
    (154) bodyF -> . declaracion END_OF_LINE bodyF
    (155) bodyF -> . salida_entrada END_OF_LINE bodyF
    (59) asignacion -> . asignacionSimple
    (60) asignacion -> . asignacionCompuesta
    (80) declaracion -> . valor_tipo IDENTIFICADOR
    (81) declaracion -> . valor_tipo asignacionSimple
    (136) salida_entrada -> . salida_uno
    (137) salida_entrada -> . salida_dos
    (138) salida_entrada -> . salida_tres
    (61) asignacionSimple -> . IDENTIFICADOR IGUAL valor
    (62) asignacionSimple -> . IDENTIFICADOR IGUAL expresion
    (63) asignacionSimple -> . IDENTIFICADOR IGUAL salida_entrada
    (64) asignacionCompuesta -> . asignacionCompuesta_Logic
    (65) asignacionCompuesta -> . asignacionCompuesta_Number
    (21) valor_tipo -> . CHAR_TYPE
    (22) valor_tipo -> . FLOAT_TYPE
    (23) valor_tipo -> . DOUBLE_TYPE
    (24) valor_tipo -> . INT_TYPE
    (25) valor_tipo -> . BOOL_TYPE
    (26) valor_tipo -> . STRING_TYPE
    (139) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER
    (140) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER
    (141) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER
    (142) salida_dos -> . CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER
    (143) salida_tres -> . CONSOLE_READLINE PAR_IZQ PAR_DER
    (66) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic BOOL
    (67) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic expresion_condicional
    (68) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR
    (69) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber numero
    (70) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica
    (71) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR

    LLAVE_DER       reduce using rule 150 (bodyF -> asignacion END_OF_LINE .)
    IDENTIFICADOR   shift and go to state 163
    CHAR_TYPE       shift and go to state 47
    FLOAT_TYPE      shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    INT_TYPE        shift and go to state 50
    BOOL_TYPE       shift and go to state 51
    STRING_TYPE     shift and go to state 52
    CONSOLE_WRITELINE shift and go to state 44
    CONSOLE_READLINE shift and go to state 45

    asignacion                     shift and go to state 246
    bodyF                          shift and go to state 261
    declaracion                    shift and go to state 247
    salida_entrada                 shift and go to state 248
    asignacionSimple               shift and go to state 13
    asignacionCompuesta            shift and go to state 14
    valor_tipo                     shift and go to state 28
    salida_uno                     shift and go to state 23
    salida_dos                     shift and go to state 24
    salida_tres                    shift and go to state 25
    asignacionCompuesta_Logic      shift and go to state 33
    asignacionCompuesta_Number     shift and go to state 34

state 255

    (151) bodyF -> declaracion END_OF_LINE .
    (154) bodyF -> declaracion END_OF_LINE . bodyF
    (150) bodyF -> . asignacion END_OF_LINE
    (151) bodyF -> . declaracion END_OF_LINE
    (152) bodyF -> . salida_entrada END_OF_LINE
    (153) bodyF -> . asignacion END_OF_LINE bodyF
    (154) bodyF -> . declaracion END_OF_LINE bodyF
    (155) bodyF -> . salida_entrada END_OF_LINE bodyF
    (59) asignacion -> . asignacionSimple
    (60) asignacion -> . asignacionCompuesta
    (80) declaracion -> . valor_tipo IDENTIFICADOR
    (81) declaracion -> . valor_tipo asignacionSimple
    (136) salida_entrada -> . salida_uno
    (137) salida_entrada -> . salida_dos
    (138) salida_entrada -> . salida_tres
    (61) asignacionSimple -> . IDENTIFICADOR IGUAL valor
    (62) asignacionSimple -> . IDENTIFICADOR IGUAL expresion
    (63) asignacionSimple -> . IDENTIFICADOR IGUAL salida_entrada
    (64) asignacionCompuesta -> . asignacionCompuesta_Logic
    (65) asignacionCompuesta -> . asignacionCompuesta_Number
    (21) valor_tipo -> . CHAR_TYPE
    (22) valor_tipo -> . FLOAT_TYPE
    (23) valor_tipo -> . DOUBLE_TYPE
    (24) valor_tipo -> . INT_TYPE
    (25) valor_tipo -> . BOOL_TYPE
    (26) valor_tipo -> . STRING_TYPE
    (139) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER
    (140) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER
    (141) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER
    (142) salida_dos -> . CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER
    (143) salida_tres -> . CONSOLE_READLINE PAR_IZQ PAR_DER
    (66) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic BOOL
    (67) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic expresion_condicional
    (68) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR
    (69) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber numero
    (70) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica
    (71) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR

    LLAVE_DER       reduce using rule 151 (bodyF -> declaracion END_OF_LINE .)
    IDENTIFICADOR   shift and go to state 163
    CHAR_TYPE       shift and go to state 47
    FLOAT_TYPE      shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    INT_TYPE        shift and go to state 50
    BOOL_TYPE       shift and go to state 51
    STRING_TYPE     shift and go to state 52
    CONSOLE_WRITELINE shift and go to state 44
    CONSOLE_READLINE shift and go to state 45

    declaracion                    shift and go to state 247
    bodyF                          shift and go to state 262
    asignacion                     shift and go to state 246
    salida_entrada                 shift and go to state 248
    asignacionSimple               shift and go to state 13
    asignacionCompuesta            shift and go to state 14
    valor_tipo                     shift and go to state 28
    salida_uno                     shift and go to state 23
    salida_dos                     shift and go to state 24
    salida_tres                    shift and go to state 25
    asignacionCompuesta_Logic      shift and go to state 33
    asignacionCompuesta_Number     shift and go to state 34

state 256

    (152) bodyF -> salida_entrada END_OF_LINE .
    (155) bodyF -> salida_entrada END_OF_LINE . bodyF
    (150) bodyF -> . asignacion END_OF_LINE
    (151) bodyF -> . declaracion END_OF_LINE
    (152) bodyF -> . salida_entrada END_OF_LINE
    (153) bodyF -> . asignacion END_OF_LINE bodyF
    (154) bodyF -> . declaracion END_OF_LINE bodyF
    (155) bodyF -> . salida_entrada END_OF_LINE bodyF
    (59) asignacion -> . asignacionSimple
    (60) asignacion -> . asignacionCompuesta
    (80) declaracion -> . valor_tipo IDENTIFICADOR
    (81) declaracion -> . valor_tipo asignacionSimple
    (136) salida_entrada -> . salida_uno
    (137) salida_entrada -> . salida_dos
    (138) salida_entrada -> . salida_tres
    (61) asignacionSimple -> . IDENTIFICADOR IGUAL valor
    (62) asignacionSimple -> . IDENTIFICADOR IGUAL expresion
    (63) asignacionSimple -> . IDENTIFICADOR IGUAL salida_entrada
    (64) asignacionCompuesta -> . asignacionCompuesta_Logic
    (65) asignacionCompuesta -> . asignacionCompuesta_Number
    (21) valor_tipo -> . CHAR_TYPE
    (22) valor_tipo -> . FLOAT_TYPE
    (23) valor_tipo -> . DOUBLE_TYPE
    (24) valor_tipo -> . INT_TYPE
    (25) valor_tipo -> . BOOL_TYPE
    (26) valor_tipo -> . STRING_TYPE
    (139) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER
    (140) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER
    (141) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER
    (142) salida_dos -> . CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER
    (143) salida_tres -> . CONSOLE_READLINE PAR_IZQ PAR_DER
    (66) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic BOOL
    (67) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic expresion_condicional
    (68) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR
    (69) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber numero
    (70) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica
    (71) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR

    LLAVE_DER       reduce using rule 152 (bodyF -> salida_entrada END_OF_LINE .)
    IDENTIFICADOR   shift and go to state 163
    CHAR_TYPE       shift and go to state 47
    FLOAT_TYPE      shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    INT_TYPE        shift and go to state 50
    BOOL_TYPE       shift and go to state 51
    STRING_TYPE     shift and go to state 52
    CONSOLE_WRITELINE shift and go to state 44
    CONSOLE_READLINE shift and go to state 45

    salida_entrada                 shift and go to state 248
    bodyF                          shift and go to state 263
    asignacion                     shift and go to state 246
    declaracion                    shift and go to state 247
    asignacionSimple               shift and go to state 13
    asignacionCompuesta            shift and go to state 14
    valor_tipo                     shift and go to state 28
    salida_uno                     shift and go to state 23
    salida_dos                     shift and go to state 24
    salida_tres                    shift and go to state 25
    asignacionCompuesta_Logic      shift and go to state 33
    asignacionCompuesta_Number     shift and go to state 34

state 257

    (89) while_do -> DO LLAVE_IZQ body_while LLAVE_DER WHILE PAR_IZQ expresion_condicional PAR_DER END_OF_LINE .

    $end            reduce using rule 89 (while_do -> DO LLAVE_IZQ body_while LLAVE_DER WHILE PAR_IZQ expresion_condicional PAR_DER END_OF_LINE .)
    LLAVE_DER       reduce using rule 89 (while_do -> DO LLAVE_IZQ body_while LLAVE_DER WHILE PAR_IZQ expresion_condicional PAR_DER END_OF_LINE .)


state 258

    (101) for -> FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body . LLAVE_DER

    LLAVE_DER       shift and go to state 264


state 259

    (121) lista -> LIST tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINE .

    $end            reduce using rule 121 (lista -> LIST tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINE .)
    LLAVE_DER       reduce using rule 121 (lista -> LIST tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINE .)


state 260

    (123) stack -> STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL NEW STACK MENOR_QUE valor_tipo_inicializador . MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINE

    MAYOR_QUE       shift and go to state 265


state 261

    (153) bodyF -> asignacion END_OF_LINE bodyF .

    LLAVE_DER       reduce using rule 153 (bodyF -> asignacion END_OF_LINE bodyF .)


state 262

    (154) bodyF -> declaracion END_OF_LINE bodyF .

    LLAVE_DER       reduce using rule 154 (bodyF -> declaracion END_OF_LINE bodyF .)


state 263

    (155) bodyF -> salida_entrada END_OF_LINE bodyF .

    LLAVE_DER       reduce using rule 155 (bodyF -> salida_entrada END_OF_LINE bodyF .)


state 264

    (101) for -> FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DER .

    $end            reduce using rule 101 (for -> FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DER .)
    LLAVE_DER       reduce using rule 101 (for -> FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DER .)


state 265

    (123) stack -> STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL NEW STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE . PAR_IZQ PAR_DER END_OF_LINE

    PAR_IZQ         shift and go to state 266


state 266

    (123) stack -> STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL NEW STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ . PAR_DER END_OF_LINE

    PAR_DER         shift and go to state 267


state 267

    (123) stack -> STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL NEW STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER . END_OF_LINE

    END_OF_LINE     shift and go to state 268


state 268

    (123) stack -> STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL NEW STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINE .

    $end            reduce using rule 123 (stack -> STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL NEW STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINE .)
    LLAVE_DER       reduce using rule 123 (stack -> STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL NEW STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IGUAL_IGUAL in state 29 resolved as shift
WARNING: shift/reduce conflict for NO_IGUAL in state 29 resolved as shift
WARNING: shift/reduce conflict for MENOR_QUE in state 29 resolved as shift
WARNING: shift/reduce conflict for MENOR_O_IGUAL_QUE in state 29 resolved as shift
WARNING: shift/reduce conflict for MAYOR_QUE in state 29 resolved as shift
WARNING: shift/reduce conflict for MAYOR_O_IGUAL_QUE in state 29 resolved as shift
WARNING: shift/reduce conflict for IGUAL_IGUAL in state 36 resolved as shift
WARNING: shift/reduce conflict for NO_IGUAL in state 36 resolved as shift
WARNING: shift/reduce conflict for MENOR_QUE in state 36 resolved as shift
WARNING: shift/reduce conflict for MENOR_O_IGUAL_QUE in state 36 resolved as shift
WARNING: shift/reduce conflict for MAYOR_QUE in state 36 resolved as shift
WARNING: shift/reduce conflict for MAYOR_O_IGUAL_QUE in state 36 resolved as shift
