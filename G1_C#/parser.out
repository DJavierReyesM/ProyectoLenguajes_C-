Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ADD
    AND
    BYTE
    CLASS
    COMILLA_DOBLE
    COMILLA_SIMPLE
    CONST
    COR_DER
    COR_IZQ
    C_IDENT_TEXTUAL
    DEFAULT
    ELSE
    FINALLY
    GLOBAL
    IN
    IR
    LAMBDA
    LEFTSHIFT_EQUAL
    LET
    NEGACION
    NOR
    NULL
    NULL_EQUAL
    NULL_VAL
    OBJECT
    ON
    OP_TERNARIO
    OR
    ORDERBY
    RETURN
    RIGHTSHIFT_EQUAL
    SHIFT_MAYOR
    SHIFT_MENOR
    SIMPLE_AND
    SIMPLE_OR
    STRUCT
    THIS
    TO_UPPER
    TYPEOF
    VAR
    WHEN
    WHERE

Grammar

Rule 0     S' -> body
Rule 1     body -> asignacion END_OF_LINE
Rule 2     body -> comparacion
Rule 3     body -> estructura_control
Rule 4     body -> estructura_datos
Rule 5     body -> expresion END_OF_LINE
Rule 6     body -> salida_entrada END_OF_LINE
Rule 7     body -> funcion
Rule 8     body -> declaracion END_OF_LINE
Rule 9     body -> empty
Rule 10    body -> funciones_estructura_datos END_OF_LINE
Rule 11    valor -> CHAR
Rule 12    valor -> numero
Rule 13    valor -> BOOL
Rule 14    valor -> STRING
Rule 15    valor -> IDENTIFICADOR
Rule 16    numero -> FLOAT
Rule 17    numero -> DOUBLE
Rule 18    numero -> INT
Rule 19    ftipo -> valor_tipo
Rule 20    ftipo -> VOID
Rule 21    valor_tipo -> CHAR_TYPE
Rule 22    valor_tipo -> FLOAT_TYPE
Rule 23    valor_tipo -> DOUBLE_TYPE
Rule 24    valor_tipo -> INT_TYPE
Rule 25    valor_tipo -> BOOL_TYPE
Rule 26    valor_tipo -> STRING_TYPE
Rule 27    valor_tipo_inicializador -> FLOAT_TYPE
Rule 28    valor_tipo_inicializador -> DOUBLE_TYPE
Rule 29    valor_tipo_inicializador -> STRING_TYPE
Rule 30    valor_tipo_inicializador -> INT_TYPE
Rule 31    valor_tipo_inicializador -> BOOL_TYPE
Rule 32    valor_tipo_inicializador -> CHAR_TYPE
Rule 33    valor_tipo_inicializador -> IDENTIFICADOR
Rule 34    modificador_acceso -> PRIVATE
Rule 35    modificador_acceso -> PROTECTED
Rule 36    modificador_acceso -> PUBLIC
Rule 37    operador_realacional -> IGUAL_IGUAL
Rule 38    operador_realacional -> NO_IGUAL
Rule 39    operador_realacional -> MENOR_QUE
Rule 40    operador_realacional -> MENOR_O_IGUAL_QUE
Rule 41    operador_realacional -> MAYOR_QUE
Rule 42    operador_realacional -> MAYOR_O_IGUAL_QUE
Rule 43    operador_aritmentico -> SUMA
Rule 44    operador_aritmentico -> RESTA
Rule 45    operador_aritmentico -> MULTIPLICACION
Rule 46    operador_aritmentico -> DIVISION
Rule 47    operador_aritmentico -> MODULO
Rule 48    operador_condicional -> IGUAL_IGUAL
Rule 49    operador_condicional -> NO_IGUAL
Rule 50    operador_condicional -> MENOR_QUE
Rule 51    operador_condicional -> MENOR_O_IGUAL_QUE
Rule 52    operador_condicional -> MAYOR_QUE
Rule 53    operador_condicional -> MAYOR_O_IGUAL_QUE
Rule 54    operacion_string -> STRING SUMA STRING
Rule 55    operacion_string -> STRING SUMA IDENTIFICADOR
Rule 56    operacion_string -> IDENTIFICADOR SUMA STRING
Rule 57    operacion_string -> IDENTIFICADOR SUMA IDENTIFICADOR
Rule 58    empty -> END_OF_LINE
Rule 59    asignacion -> asignacionSimple
Rule 60    asignacion -> asignacionCompuesta
Rule 61    asignacionSimple -> IDENTIFICADOR IGUAL valor
Rule 62    asignacionSimple -> IDENTIFICADOR IGUAL expresion
Rule 63    asignacionSimple -> IDENTIFICADOR IGUAL salida_entrada
Rule 64    asignacionCompuesta -> asignacionCompuesta_Logic
Rule 65    asignacionCompuesta -> asignacionCompuesta_Number
Rule 66    asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic BOOL
Rule 67    asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic expresion_condicional
Rule 68    asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR
Rule 69    asignacionCompuesta_Number -> IDENTIFICADOR operadoresCompuestosNumber numero
Rule 70    asignacionCompuesta_Number -> IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica
Rule 71    asignacionCompuesta_Number -> IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR
Rule 72    operadoresCompuestosNumber -> AUMENTADO
Rule 73    operadoresCompuestosNumber -> DECREMENTADO
Rule 74    operadoresCompuestosNumber -> MULTIPLICADO_POR
Rule 75    operadoresCompuestosNumber -> DIVIDIDO_POR
Rule 76    operadoresCompuestosNumber -> MODULO_DE
Rule 77    operadoresCompuestosLogic -> AND_EQUAL
Rule 78    operadoresCompuestosLogic -> OR_EQUAL
Rule 79    operadoresCompuestosLogic -> EXC_OREQUAL
Rule 80    declaracion -> valor_tipo IDENTIFICADOR
Rule 81    declaracion -> valor_tipo asignacionSimple
Rule 82    comparacion -> valor operador_realacional valor
Rule 83    estructura_control -> while
Rule 84    estructura_control -> switch_case
Rule 85    estructura_control -> for
Rule 86    while -> while_normal
Rule 87    while -> while_do
Rule 88    while_normal -> WHILE PAR_IZQ expresion_condicional PAR_DER LLAVE_IZQ body_while LLAVE_DER
Rule 89    while_do -> DO LLAVE_IZQ body_while LLAVE_DER WHILE PAR_IZQ expresion_condicional PAR_DER END_OF_LINE
Rule 90    body_while -> asignacion END_OF_LINE
Rule 91    body_while -> declaracion END_OF_LINE
Rule 92    body_while -> salida_entrada END_OF_LINE
Rule 93    body_while -> BREAK END_OF_LINE
Rule 94    body_while -> CONTINUE END_OF_LINE
Rule 95    body_while -> asignacion END_OF_LINE body_while
Rule 96    body_while -> declaracion END_OF_LINE body_while
Rule 97    body_while -> salida_entrada END_OF_LINE body_while
Rule 98    body_while -> BREAK END_OF_LINE body_while
Rule 99    body_while -> CONTINUE END_OF_LINE body_while
Rule 100   switch_case -> SWITCH PAR_IZQ valor PAR_DER LLAVE_IZQ casos LLAVE_DER
Rule 101   casos -> CASE valor DOS_PUNTOS body_case BREAK END_OF_LINE
Rule 102   casos -> CASE valor DOS_PUNTOS BREAK END_OF_LINE
Rule 103   casos -> CASE valor DOS_PUNTOS body_case BREAK END_OF_LINE casos
Rule 104   casos -> CASE valor DOS_PUNTOS BREAK END_OF_LINE casos
Rule 105   body_case -> asignacion END_OF_LINE
Rule 106   body_case -> declaracion END_OF_LINE
Rule 107   body_case -> comparacion END_OF_LINE
Rule 108   body_case -> salida_entrada END_OF_LINE
Rule 109   body_case -> asignacion END_OF_LINE body_case
Rule 110   body_case -> declaracion END_OF_LINE body_case
Rule 111   body_case -> salida_entrada END_OF_LINE body_case
Rule 112   body_case -> comparacion END_OF_LINE body_case
Rule 113   for -> FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DER
Rule 114   forIterador -> IDENTIFICADOR operadorForIteracion
Rule 115   operadorForIteracion -> INCREMENTO
Rule 116   operadorForIteracion -> DECREMENTO
Rule 117   forCondicion -> IDENTIFICADOR operador_condicional valorForCondicion
Rule 118   valorForCondicion -> FLOAT
Rule 119   valorForCondicion -> DOUBLE
Rule 120   valorForCondicion -> INT
Rule 121   valorForCondicion -> IDENTIFICADOR
Rule 122   forInicializador -> tipoDatoForInicializador IDENTIFICADOR IGUAL valorForInicializador
Rule 123   forInicializador -> IDENTIFICADOR IGUAL valorForInicializador
Rule 124   tipoDatoForInicializador -> FLOAT_TYPE
Rule 125   tipoDatoForInicializador -> DOUBLE_TYPE
Rule 126   tipoDatoForInicializador -> INT_TYPE
Rule 127   valorForInicializador -> FLOAT
Rule 128   valorForInicializador -> DOUBLE
Rule 129   valorForInicializador -> INT
Rule 130   valorForInicializador -> IDENTIFICADOR
Rule 131   estructura_datos -> lista
Rule 132   estructura_datos -> stack
Rule 133   lista -> LIST tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINE
Rule 134   tipoLista -> MENOR_QUE valor_tipo_inicializador MAYOR_QUE
Rule 135   stack -> STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL NEW STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINE
Rule 136   funciones_estructura_datos -> stack_push
Rule 137   funciones_estructura_datos -> stack_pop
Rule 138   stack_push -> IDENTIFICADOR PUNTO PUSH PAR_IZQ valor PAR_DER
Rule 139   stack_pop -> IDENTIFICADOR PUNTO POP PAR_IZQ PAR_DER
Rule 140   expresion -> expresion_operacion_aritmetica
Rule 141   expresion -> expresion_condicional
Rule 142   expresion_operacion_aritmetica -> numero operador_aritmentico numero
Rule 143   expresion_operacion_aritmetica -> numero operador_aritmentico IDENTIFICADOR
Rule 144   expresion_operacion_aritmetica -> IDENTIFICADOR operador_aritmentico numero
Rule 145   expresion_operacion_aritmetica -> IDENTIFICADOR operador_aritmentico IDENTIFICADOR
Rule 146   expresion_condicional -> numero operador_condicional numero
Rule 147   expresion_condicional -> IDENTIFICADOR operador_condicional IDENTIFICADOR
Rule 148   expresion_condicional -> IDENTIFICADOR operador_condicional numero
Rule 149   expresion_condicional -> numero operador_condicional IDENTIFICADOR
Rule 150   salida_entrada -> salida_uno
Rule 151   salida_entrada -> salida_dos
Rule 152   salida_entrada -> salida_tres
Rule 153   salida_uno -> CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER
Rule 154   salida_uno -> CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER
Rule 155   salida_uno -> CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER
Rule 156   salida_dos -> CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER
Rule 157   salida_tres -> CONSOLE_READLINE PAR_IZQ PAR_DER
Rule 158   funcion -> funcion_tipo_uno
Rule 159   funcion -> funcion_tipo_tres
Rule 160   funcion_tipo_uno -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ body LLAVE_DER
Rule 161   funcion_tipo_tres -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ parametrosF PAR_DER LLAVE_IZQ bodyF LLAVE_DER
Rule 162   parametrosF -> declaracion
Rule 163   parametrosF -> declaracion COMA parametrosF
Rule 164   bodyF -> asignacion END_OF_LINE
Rule 165   bodyF -> declaracion END_OF_LINE
Rule 166   bodyF -> salida_entrada END_OF_LINE
Rule 167   bodyF -> asignacion END_OF_LINE bodyF
Rule 168   bodyF -> declaracion END_OF_LINE bodyF
Rule 169   bodyF -> salida_entrada END_OF_LINE bodyF

Terminals, with rules where they appear

ADD                  : 
AND                  : 
AND_EQUAL            : 77
AUMENTADO            : 72
BOOL                 : 13 66
BOOL_TYPE            : 25 31
BREAK                : 93 98 101 102 103 104
BYTE                 : 
CASE                 : 101 102 103 104
CHAR                 : 11
CHAR_TYPE            : 21 32
CLASS                : 
COMA                 : 163
COMILLA_DOBLE        : 
COMILLA_SIMPLE       : 
CONSOLE_READLINE     : 157
CONSOLE_WRITELINE    : 153 154 155 156
CONST                : 
CONTINUE             : 94 99
COR_DER              : 
COR_IZQ              : 
C_CADENA_INTERPOLADA : 156
C_IDENT_TEXTUAL      : 
DECREMENTADO         : 73
DECREMENTO           : 116
DEFAULT              : 
DIVIDIDO_POR         : 75
DIVISION             : 46
DO                   : 89
DOS_PUNTOS           : 101 102 103 104
DOUBLE               : 17 119 128
DOUBLE_TYPE          : 23 28 125
ELSE                 : 
END_OF_LINE          : 1 5 6 8 10 58 89 90 91 92 93 94 95 96 97 98 99 101 102 103 104 105 106 107 108 109 110 111 112 113 113 133 135 164 165 166 167 168 169
EXC_OREQUAL          : 79
FINALLY              : 
FLOAT                : 16 118 127
FLOAT_TYPE           : 22 27 124
FOR                  : 113
GLOBAL               : 
IDENTIFICADOR        : 15 33 55 56 57 57 61 62 63 66 67 68 68 69 70 71 71 80 114 117 121 122 123 130 133 135 138 139 143 144 145 145 147 147 148 149 155 160 161
IGUAL                : 61 62 63 122 123 133 135
IGUAL_IGUAL          : 37 48
IN                   : 
INCREMENTO           : 115
INT                  : 18 120 129
INT_TYPE             : 24 30 126
IR                   : 
LAMBDA               : 
LEFTSHIFT_EQUAL      : 
LET                  : 
LIST                 : 133 133
LLAVE_DER            : 88 89 100 113 160 161
LLAVE_IZQ            : 88 89 100 113 160 161
MAYOR_O_IGUAL_QUE    : 42 53
MAYOR_QUE            : 41 52 134 135 135
MENOR_O_IGUAL_QUE    : 40 51
MENOR_QUE            : 39 50 134 135 135
MODULO               : 47
MODULO_DE            : 76
MULTIPLICACION       : 45
MULTIPLICADO_POR     : 74
NEGACION             : 
NEW                  : 133 135
NOR                  : 
NO_IGUAL             : 38 49
NULL                 : 
NULL_EQUAL           : 
NULL_VAL             : 
OBJECT               : 
ON                   : 
OP_TERNARIO          : 
OR                   : 
ORDERBY              : 
OR_EQUAL             : 78
PAR_DER              : 88 89 100 113 133 135 138 139 153 154 155 156 157 160 161
PAR_IZQ              : 88 89 100 113 133 135 138 139 153 154 155 156 157 160 161
POP                  : 139
PRIVATE              : 34
PROTECTED            : 35
PUBLIC               : 36
PUNTO                : 138 139
PUSH                 : 138
RESTA                : 44
RETURN               : 
RIGHTSHIFT_EQUAL     : 
SHIFT_MAYOR          : 
SHIFT_MENOR          : 
SIMPLE_AND           : 
SIMPLE_OR            : 
STACK                : 135 135
STRING               : 14 54 54 55 56 153 156
STRING_TYPE          : 26 29
STRUCT               : 
SUMA                 : 43 54 55 56 57
SWITCH               : 100
THIS                 : 
TO_UPPER             : 
TYPEOF               : 
VAR                  : 
VOID                 : 20 160 161
WHEN                 : 
WHERE                : 
WHILE                : 88 89
error                : 

Nonterminals, with rules where they appear

asignacion           : 1 90 95 105 109 164 167
asignacionCompuesta  : 60
asignacionCompuesta_Logic : 64
asignacionCompuesta_Number : 65
asignacionSimple     : 59 81
body                 : 113 160 0
bodyF                : 161 167 168 169
body_case            : 101 103 109 110 111 112
body_while           : 88 89 95 96 97 98 99
casos                : 100 103 104
comparacion          : 2 107 112
declaracion          : 8 91 96 106 110 162 163 165 168
empty                : 9
estructura_control   : 3
estructura_datos     : 4
expresion            : 5 62
expresion_condicional : 67 88 89 141
expresion_operacion_aritmetica : 70 140
for                  : 85
forCondicion         : 113
forInicializador     : 113
forIterador          : 113
ftipo                : 
funcion              : 7
funcion_tipo_tres    : 159
funcion_tipo_uno     : 158
funciones_estructura_datos : 10
lista                : 131
modificador_acceso   : 160 161
numero               : 12 69 142 142 143 144 146 146 148 149
operacion_string     : 154
operadorForIteracion : 114
operador_aritmentico : 142 143 144 145
operador_condicional : 117 146 147 148 149
operador_realacional : 82
operadoresCompuestosLogic : 66 67 68
operadoresCompuestosNumber : 69 70 71
parametrosF          : 161 163
salida_dos           : 151
salida_entrada       : 6 63 92 97 108 111 166 169
salida_tres          : 152
salida_uno           : 150
stack                : 132
stack_pop            : 137
stack_push           : 136
switch_case          : 84
tipoDatoForInicializador : 122
tipoLista            : 133 133
valor                : 61 82 82 100 101 102 103 104 138
valorForCondicion    : 117
valorForInicializador : 122 123
valor_tipo           : 19 80 81
valor_tipo_inicializador : 134 135 135
while                : 83
while_do             : 87
while_normal         : 86

Parsing method: LALR

state 0

    (0) S' -> . body
    (1) body -> . asignacion END_OF_LINE
    (2) body -> . comparacion
    (3) body -> . estructura_control
    (4) body -> . estructura_datos
    (5) body -> . expresion END_OF_LINE
    (6) body -> . salida_entrada END_OF_LINE
    (7) body -> . funcion
    (8) body -> . declaracion END_OF_LINE
    (9) body -> . empty
    (10) body -> . funciones_estructura_datos END_OF_LINE
    (59) asignacion -> . asignacionSimple
    (60) asignacion -> . asignacionCompuesta
    (82) comparacion -> . valor operador_realacional valor
    (83) estructura_control -> . while
    (84) estructura_control -> . switch_case
    (85) estructura_control -> . for
    (131) estructura_datos -> . lista
    (132) estructura_datos -> . stack
    (140) expresion -> . expresion_operacion_aritmetica
    (141) expresion -> . expresion_condicional
    (150) salida_entrada -> . salida_uno
    (151) salida_entrada -> . salida_dos
    (152) salida_entrada -> . salida_tres
    (158) funcion -> . funcion_tipo_uno
    (159) funcion -> . funcion_tipo_tres
    (80) declaracion -> . valor_tipo IDENTIFICADOR
    (81) declaracion -> . valor_tipo asignacionSimple
    (58) empty -> . END_OF_LINE
    (136) funciones_estructura_datos -> . stack_push
    (137) funciones_estructura_datos -> . stack_pop
    (61) asignacionSimple -> . IDENTIFICADOR IGUAL valor
    (62) asignacionSimple -> . IDENTIFICADOR IGUAL expresion
    (63) asignacionSimple -> . IDENTIFICADOR IGUAL salida_entrada
    (64) asignacionCompuesta -> . asignacionCompuesta_Logic
    (65) asignacionCompuesta -> . asignacionCompuesta_Number
    (11) valor -> . CHAR
    (12) valor -> . numero
    (13) valor -> . BOOL
    (14) valor -> . STRING
    (15) valor -> . IDENTIFICADOR
    (86) while -> . while_normal
    (87) while -> . while_do
    (100) switch_case -> . SWITCH PAR_IZQ valor PAR_DER LLAVE_IZQ casos LLAVE_DER
    (113) for -> . FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DER
    (133) lista -> . LIST tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINE
    (135) stack -> . STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL NEW STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINE
    (142) expresion_operacion_aritmetica -> . numero operador_aritmentico numero
    (143) expresion_operacion_aritmetica -> . numero operador_aritmentico IDENTIFICADOR
    (144) expresion_operacion_aritmetica -> . IDENTIFICADOR operador_aritmentico numero
    (145) expresion_operacion_aritmetica -> . IDENTIFICADOR operador_aritmentico IDENTIFICADOR
    (146) expresion_condicional -> . numero operador_condicional numero
    (147) expresion_condicional -> . IDENTIFICADOR operador_condicional IDENTIFICADOR
    (148) expresion_condicional -> . IDENTIFICADOR operador_condicional numero
    (149) expresion_condicional -> . numero operador_condicional IDENTIFICADOR
    (153) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER
    (154) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER
    (155) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER
    (156) salida_dos -> . CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER
    (157) salida_tres -> . CONSOLE_READLINE PAR_IZQ PAR_DER
    (160) funcion_tipo_uno -> . modificador_acceso VOID IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ body LLAVE_DER
    (161) funcion_tipo_tres -> . modificador_acceso VOID IDENTIFICADOR PAR_IZQ parametrosF PAR_DER LLAVE_IZQ bodyF LLAVE_DER
    (21) valor_tipo -> . CHAR_TYPE
    (22) valor_tipo -> . FLOAT_TYPE
    (23) valor_tipo -> . DOUBLE_TYPE
    (24) valor_tipo -> . INT_TYPE
    (25) valor_tipo -> . BOOL_TYPE
    (26) valor_tipo -> . STRING_TYPE
    (138) stack_push -> . IDENTIFICADOR PUNTO PUSH PAR_IZQ valor PAR_DER
    (139) stack_pop -> . IDENTIFICADOR PUNTO POP PAR_IZQ PAR_DER
    (66) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic BOOL
    (67) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic expresion_condicional
    (68) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR
    (69) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber numero
    (70) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica
    (71) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR
    (16) numero -> . FLOAT
    (17) numero -> . DOUBLE
    (18) numero -> . INT
    (88) while_normal -> . WHILE PAR_IZQ expresion_condicional PAR_DER LLAVE_IZQ body_while LLAVE_DER
    (89) while_do -> . DO LLAVE_IZQ body_while LLAVE_DER WHILE PAR_IZQ expresion_condicional PAR_DER END_OF_LINE
    (34) modificador_acceso -> . PRIVATE
    (35) modificador_acceso -> . PROTECTED
    (36) modificador_acceso -> . PUBLIC

    END_OF_LINE     shift and go to state 3
    IDENTIFICADOR   shift and go to state 29
    CHAR            shift and go to state 34
    BOOL            shift and go to state 36
    STRING          shift and go to state 37
    SWITCH          shift and go to state 40
    FOR             shift and go to state 41
    LIST            shift and go to state 42
    STACK           shift and go to state 43
    CONSOLE_WRITELINE shift and go to state 44
    CONSOLE_READLINE shift and go to state 45
    CHAR_TYPE       shift and go to state 47
    FLOAT_TYPE      shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    INT_TYPE        shift and go to state 50
    BOOL_TYPE       shift and go to state 51
    STRING_TYPE     shift and go to state 52
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55
    WHILE           shift and go to state 56
    DO              shift and go to state 57
    PRIVATE         shift and go to state 58
    PROTECTED       shift and go to state 59
    PUBLIC          shift and go to state 60

    body                           shift and go to state 1
    asignacion                     shift and go to state 2
    comparacion                    shift and go to state 4
    estructura_control             shift and go to state 5
    estructura_datos               shift and go to state 6
    expresion                      shift and go to state 7
    salida_entrada                 shift and go to state 8
    funcion                        shift and go to state 9
    declaracion                    shift and go to state 10
    empty                          shift and go to state 11
    funciones_estructura_datos     shift and go to state 12
    asignacionSimple               shift and go to state 13
    asignacionCompuesta            shift and go to state 14
    valor                          shift and go to state 15
    while                          shift and go to state 16
    switch_case                    shift and go to state 17
    for                            shift and go to state 18
    lista                          shift and go to state 19
    stack                          shift and go to state 20
    expresion_operacion_aritmetica shift and go to state 21
    expresion_condicional          shift and go to state 22
    salida_uno                     shift and go to state 23
    salida_dos                     shift and go to state 24
    salida_tres                    shift and go to state 25
    funcion_tipo_uno               shift and go to state 26
    funcion_tipo_tres              shift and go to state 27
    valor_tipo                     shift and go to state 28
    stack_push                     shift and go to state 30
    stack_pop                      shift and go to state 31
    asignacionCompuesta_Logic      shift and go to state 32
    asignacionCompuesta_Number     shift and go to state 33
    numero                         shift and go to state 35
    while_normal                   shift and go to state 38
    while_do                       shift and go to state 39
    modificador_acceso             shift and go to state 46

state 1

    (0) S' -> body .



state 2

    (1) body -> asignacion . END_OF_LINE

    END_OF_LINE     shift and go to state 61


state 3

    (58) empty -> END_OF_LINE .

    $end            reduce using rule 58 (empty -> END_OF_LINE .)
    LLAVE_DER       reduce using rule 58 (empty -> END_OF_LINE .)


state 4

    (2) body -> comparacion .

    $end            reduce using rule 2 (body -> comparacion .)
    LLAVE_DER       reduce using rule 2 (body -> comparacion .)


state 5

    (3) body -> estructura_control .

    $end            reduce using rule 3 (body -> estructura_control .)
    LLAVE_DER       reduce using rule 3 (body -> estructura_control .)


state 6

    (4) body -> estructura_datos .

    $end            reduce using rule 4 (body -> estructura_datos .)
    LLAVE_DER       reduce using rule 4 (body -> estructura_datos .)


state 7

    (5) body -> expresion . END_OF_LINE

    END_OF_LINE     shift and go to state 62


state 8

    (6) body -> salida_entrada . END_OF_LINE

    END_OF_LINE     shift and go to state 63


state 9

    (7) body -> funcion .

    $end            reduce using rule 7 (body -> funcion .)
    LLAVE_DER       reduce using rule 7 (body -> funcion .)


state 10

    (8) body -> declaracion . END_OF_LINE

    END_OF_LINE     shift and go to state 64


state 11

    (9) body -> empty .

    $end            reduce using rule 9 (body -> empty .)
    LLAVE_DER       reduce using rule 9 (body -> empty .)


state 12

    (10) body -> funciones_estructura_datos . END_OF_LINE

    END_OF_LINE     shift and go to state 65


state 13

    (59) asignacion -> asignacionSimple .

    END_OF_LINE     reduce using rule 59 (asignacion -> asignacionSimple .)


state 14

    (60) asignacion -> asignacionCompuesta .

    END_OF_LINE     reduce using rule 60 (asignacion -> asignacionCompuesta .)


state 15

    (82) comparacion -> valor . operador_realacional valor
    (37) operador_realacional -> . IGUAL_IGUAL
    (38) operador_realacional -> . NO_IGUAL
    (39) operador_realacional -> . MENOR_QUE
    (40) operador_realacional -> . MENOR_O_IGUAL_QUE
    (41) operador_realacional -> . MAYOR_QUE
    (42) operador_realacional -> . MAYOR_O_IGUAL_QUE

    IGUAL_IGUAL     shift and go to state 67
    NO_IGUAL        shift and go to state 68
    MENOR_QUE       shift and go to state 69
    MENOR_O_IGUAL_QUE shift and go to state 70
    MAYOR_QUE       shift and go to state 71
    MAYOR_O_IGUAL_QUE shift and go to state 72

    operador_realacional           shift and go to state 66

state 16

    (83) estructura_control -> while .

    $end            reduce using rule 83 (estructura_control -> while .)
    LLAVE_DER       reduce using rule 83 (estructura_control -> while .)


state 17

    (84) estructura_control -> switch_case .

    $end            reduce using rule 84 (estructura_control -> switch_case .)
    LLAVE_DER       reduce using rule 84 (estructura_control -> switch_case .)


state 18

    (85) estructura_control -> for .

    $end            reduce using rule 85 (estructura_control -> for .)
    LLAVE_DER       reduce using rule 85 (estructura_control -> for .)


state 19

    (131) estructura_datos -> lista .

    $end            reduce using rule 131 (estructura_datos -> lista .)
    LLAVE_DER       reduce using rule 131 (estructura_datos -> lista .)


state 20

    (132) estructura_datos -> stack .

    $end            reduce using rule 132 (estructura_datos -> stack .)
    LLAVE_DER       reduce using rule 132 (estructura_datos -> stack .)


state 21

    (140) expresion -> expresion_operacion_aritmetica .

    END_OF_LINE     reduce using rule 140 (expresion -> expresion_operacion_aritmetica .)
    COMA            reduce using rule 140 (expresion -> expresion_operacion_aritmetica .)
    PAR_DER         reduce using rule 140 (expresion -> expresion_operacion_aritmetica .)


state 22

    (141) expresion -> expresion_condicional .

    END_OF_LINE     reduce using rule 141 (expresion -> expresion_condicional .)
    COMA            reduce using rule 141 (expresion -> expresion_condicional .)
    PAR_DER         reduce using rule 141 (expresion -> expresion_condicional .)


state 23

    (150) salida_entrada -> salida_uno .

    END_OF_LINE     reduce using rule 150 (salida_entrada -> salida_uno .)
    COMA            reduce using rule 150 (salida_entrada -> salida_uno .)
    PAR_DER         reduce using rule 150 (salida_entrada -> salida_uno .)


state 24

    (151) salida_entrada -> salida_dos .

    END_OF_LINE     reduce using rule 151 (salida_entrada -> salida_dos .)
    COMA            reduce using rule 151 (salida_entrada -> salida_dos .)
    PAR_DER         reduce using rule 151 (salida_entrada -> salida_dos .)


state 25

    (152) salida_entrada -> salida_tres .

    END_OF_LINE     reduce using rule 152 (salida_entrada -> salida_tres .)
    COMA            reduce using rule 152 (salida_entrada -> salida_tres .)
    PAR_DER         reduce using rule 152 (salida_entrada -> salida_tres .)


state 26

    (158) funcion -> funcion_tipo_uno .

    $end            reduce using rule 158 (funcion -> funcion_tipo_uno .)
    LLAVE_DER       reduce using rule 158 (funcion -> funcion_tipo_uno .)


state 27

    (159) funcion -> funcion_tipo_tres .

    $end            reduce using rule 159 (funcion -> funcion_tipo_tres .)
    LLAVE_DER       reduce using rule 159 (funcion -> funcion_tipo_tres .)


state 28

    (80) declaracion -> valor_tipo . IDENTIFICADOR
    (81) declaracion -> valor_tipo . asignacionSimple
    (61) asignacionSimple -> . IDENTIFICADOR IGUAL valor
    (62) asignacionSimple -> . IDENTIFICADOR IGUAL expresion
    (63) asignacionSimple -> . IDENTIFICADOR IGUAL salida_entrada

    IDENTIFICADOR   shift and go to state 73

    asignacionSimple               shift and go to state 74

state 29

    (61) asignacionSimple -> IDENTIFICADOR . IGUAL valor
    (62) asignacionSimple -> IDENTIFICADOR . IGUAL expresion
    (63) asignacionSimple -> IDENTIFICADOR . IGUAL salida_entrada
    (15) valor -> IDENTIFICADOR .
    (144) expresion_operacion_aritmetica -> IDENTIFICADOR . operador_aritmentico numero
    (145) expresion_operacion_aritmetica -> IDENTIFICADOR . operador_aritmentico IDENTIFICADOR
    (147) expresion_condicional -> IDENTIFICADOR . operador_condicional IDENTIFICADOR
    (148) expresion_condicional -> IDENTIFICADOR . operador_condicional numero
    (138) stack_push -> IDENTIFICADOR . PUNTO PUSH PAR_IZQ valor PAR_DER
    (139) stack_pop -> IDENTIFICADOR . PUNTO POP PAR_IZQ PAR_DER
    (66) asignacionCompuesta_Logic -> IDENTIFICADOR . operadoresCompuestosLogic BOOL
    (67) asignacionCompuesta_Logic -> IDENTIFICADOR . operadoresCompuestosLogic expresion_condicional
    (68) asignacionCompuesta_Logic -> IDENTIFICADOR . operadoresCompuestosLogic IDENTIFICADOR
    (69) asignacionCompuesta_Number -> IDENTIFICADOR . operadoresCompuestosNumber numero
    (70) asignacionCompuesta_Number -> IDENTIFICADOR . operadoresCompuestosNumber expresion_operacion_aritmetica
    (71) asignacionCompuesta_Number -> IDENTIFICADOR . operadoresCompuestosNumber IDENTIFICADOR
    (43) operador_aritmentico -> . SUMA
    (44) operador_aritmentico -> . RESTA
    (45) operador_aritmentico -> . MULTIPLICACION
    (46) operador_aritmentico -> . DIVISION
    (47) operador_aritmentico -> . MODULO
    (48) operador_condicional -> . IGUAL_IGUAL
    (49) operador_condicional -> . NO_IGUAL
    (50) operador_condicional -> . MENOR_QUE
    (51) operador_condicional -> . MENOR_O_IGUAL_QUE
    (52) operador_condicional -> . MAYOR_QUE
    (53) operador_condicional -> . MAYOR_O_IGUAL_QUE
    (77) operadoresCompuestosLogic -> . AND_EQUAL
    (78) operadoresCompuestosLogic -> . OR_EQUAL
    (79) operadoresCompuestosLogic -> . EXC_OREQUAL
    (72) operadoresCompuestosNumber -> . AUMENTADO
    (73) operadoresCompuestosNumber -> . DECREMENTADO
    (74) operadoresCompuestosNumber -> . MULTIPLICADO_POR
    (75) operadoresCompuestosNumber -> . DIVIDIDO_POR
    (76) operadoresCompuestosNumber -> . MODULO_DE

  ! shift/reduce conflict for IGUAL_IGUAL resolved as shift
  ! shift/reduce conflict for NO_IGUAL resolved as shift
  ! shift/reduce conflict for MENOR_QUE resolved as shift
  ! shift/reduce conflict for MENOR_O_IGUAL_QUE resolved as shift
  ! shift/reduce conflict for MAYOR_QUE resolved as shift
  ! shift/reduce conflict for MAYOR_O_IGUAL_QUE resolved as shift
    IGUAL           shift and go to state 75
    PUNTO           shift and go to state 78
    SUMA            shift and go to state 81
    RESTA           shift and go to state 82
    MULTIPLICACION  shift and go to state 83
    DIVISION        shift and go to state 84
    MODULO          shift and go to state 85
    IGUAL_IGUAL     shift and go to state 86
    NO_IGUAL        shift and go to state 87
    MENOR_QUE       shift and go to state 88
    MENOR_O_IGUAL_QUE shift and go to state 89
    MAYOR_QUE       shift and go to state 90
    MAYOR_O_IGUAL_QUE shift and go to state 91
    AND_EQUAL       shift and go to state 92
    OR_EQUAL        shift and go to state 93
    EXC_OREQUAL     shift and go to state 94
    AUMENTADO       shift and go to state 95
    DECREMENTADO    shift and go to state 96
    MULTIPLICADO_POR shift and go to state 97
    DIVIDIDO_POR    shift and go to state 98
    MODULO_DE       shift and go to state 99

  ! IGUAL_IGUAL     [ reduce using rule 15 (valor -> IDENTIFICADOR .) ]
  ! NO_IGUAL        [ reduce using rule 15 (valor -> IDENTIFICADOR .) ]
  ! MENOR_QUE       [ reduce using rule 15 (valor -> IDENTIFICADOR .) ]
  ! MENOR_O_IGUAL_QUE [ reduce using rule 15 (valor -> IDENTIFICADOR .) ]
  ! MAYOR_QUE       [ reduce using rule 15 (valor -> IDENTIFICADOR .) ]
  ! MAYOR_O_IGUAL_QUE [ reduce using rule 15 (valor -> IDENTIFICADOR .) ]

    operador_aritmentico           shift and go to state 76
    operador_condicional           shift and go to state 77
    operadoresCompuestosLogic      shift and go to state 79
    operadoresCompuestosNumber     shift and go to state 80

state 30

    (136) funciones_estructura_datos -> stack_push .

    END_OF_LINE     reduce using rule 136 (funciones_estructura_datos -> stack_push .)


state 31

    (137) funciones_estructura_datos -> stack_pop .

    END_OF_LINE     reduce using rule 137 (funciones_estructura_datos -> stack_pop .)


state 32

    (64) asignacionCompuesta -> asignacionCompuesta_Logic .

    END_OF_LINE     reduce using rule 64 (asignacionCompuesta -> asignacionCompuesta_Logic .)


state 33

    (65) asignacionCompuesta -> asignacionCompuesta_Number .

    END_OF_LINE     reduce using rule 65 (asignacionCompuesta -> asignacionCompuesta_Number .)


state 34

    (11) valor -> CHAR .

    IGUAL_IGUAL     reduce using rule 11 (valor -> CHAR .)
    NO_IGUAL        reduce using rule 11 (valor -> CHAR .)
    MENOR_QUE       reduce using rule 11 (valor -> CHAR .)
    MENOR_O_IGUAL_QUE reduce using rule 11 (valor -> CHAR .)
    MAYOR_QUE       reduce using rule 11 (valor -> CHAR .)
    MAYOR_O_IGUAL_QUE reduce using rule 11 (valor -> CHAR .)
    $end            reduce using rule 11 (valor -> CHAR .)
    LLAVE_DER       reduce using rule 11 (valor -> CHAR .)
    END_OF_LINE     reduce using rule 11 (valor -> CHAR .)
    COMA            reduce using rule 11 (valor -> CHAR .)
    PAR_DER         reduce using rule 11 (valor -> CHAR .)
    DOS_PUNTOS      reduce using rule 11 (valor -> CHAR .)


state 35

    (12) valor -> numero .
    (142) expresion_operacion_aritmetica -> numero . operador_aritmentico numero
    (143) expresion_operacion_aritmetica -> numero . operador_aritmentico IDENTIFICADOR
    (146) expresion_condicional -> numero . operador_condicional numero
    (149) expresion_condicional -> numero . operador_condicional IDENTIFICADOR
    (43) operador_aritmentico -> . SUMA
    (44) operador_aritmentico -> . RESTA
    (45) operador_aritmentico -> . MULTIPLICACION
    (46) operador_aritmentico -> . DIVISION
    (47) operador_aritmentico -> . MODULO
    (48) operador_condicional -> . IGUAL_IGUAL
    (49) operador_condicional -> . NO_IGUAL
    (50) operador_condicional -> . MENOR_QUE
    (51) operador_condicional -> . MENOR_O_IGUAL_QUE
    (52) operador_condicional -> . MAYOR_QUE
    (53) operador_condicional -> . MAYOR_O_IGUAL_QUE

  ! shift/reduce conflict for IGUAL_IGUAL resolved as shift
  ! shift/reduce conflict for NO_IGUAL resolved as shift
  ! shift/reduce conflict for MENOR_QUE resolved as shift
  ! shift/reduce conflict for MENOR_O_IGUAL_QUE resolved as shift
  ! shift/reduce conflict for MAYOR_QUE resolved as shift
  ! shift/reduce conflict for MAYOR_O_IGUAL_QUE resolved as shift
    END_OF_LINE     reduce using rule 12 (valor -> numero .)
    COMA            reduce using rule 12 (valor -> numero .)
    PAR_DER         reduce using rule 12 (valor -> numero .)
    SUMA            shift and go to state 81
    RESTA           shift and go to state 82
    MULTIPLICACION  shift and go to state 83
    DIVISION        shift and go to state 84
    MODULO          shift and go to state 85
    IGUAL_IGUAL     shift and go to state 86
    NO_IGUAL        shift and go to state 87
    MENOR_QUE       shift and go to state 88
    MENOR_O_IGUAL_QUE shift and go to state 89
    MAYOR_QUE       shift and go to state 90
    MAYOR_O_IGUAL_QUE shift and go to state 91

  ! IGUAL_IGUAL     [ reduce using rule 12 (valor -> numero .) ]
  ! NO_IGUAL        [ reduce using rule 12 (valor -> numero .) ]
  ! MENOR_QUE       [ reduce using rule 12 (valor -> numero .) ]
  ! MENOR_O_IGUAL_QUE [ reduce using rule 12 (valor -> numero .) ]
  ! MAYOR_QUE       [ reduce using rule 12 (valor -> numero .) ]
  ! MAYOR_O_IGUAL_QUE [ reduce using rule 12 (valor -> numero .) ]

    operador_aritmentico           shift and go to state 100
    operador_condicional           shift and go to state 101

state 36

    (13) valor -> BOOL .

    IGUAL_IGUAL     reduce using rule 13 (valor -> BOOL .)
    NO_IGUAL        reduce using rule 13 (valor -> BOOL .)
    MENOR_QUE       reduce using rule 13 (valor -> BOOL .)
    MENOR_O_IGUAL_QUE reduce using rule 13 (valor -> BOOL .)
    MAYOR_QUE       reduce using rule 13 (valor -> BOOL .)
    MAYOR_O_IGUAL_QUE reduce using rule 13 (valor -> BOOL .)
    $end            reduce using rule 13 (valor -> BOOL .)
    LLAVE_DER       reduce using rule 13 (valor -> BOOL .)
    END_OF_LINE     reduce using rule 13 (valor -> BOOL .)
    COMA            reduce using rule 13 (valor -> BOOL .)
    PAR_DER         reduce using rule 13 (valor -> BOOL .)
    DOS_PUNTOS      reduce using rule 13 (valor -> BOOL .)


state 37

    (14) valor -> STRING .

    IGUAL_IGUAL     reduce using rule 14 (valor -> STRING .)
    NO_IGUAL        reduce using rule 14 (valor -> STRING .)
    MENOR_QUE       reduce using rule 14 (valor -> STRING .)
    MENOR_O_IGUAL_QUE reduce using rule 14 (valor -> STRING .)
    MAYOR_QUE       reduce using rule 14 (valor -> STRING .)
    MAYOR_O_IGUAL_QUE reduce using rule 14 (valor -> STRING .)
    $end            reduce using rule 14 (valor -> STRING .)
    LLAVE_DER       reduce using rule 14 (valor -> STRING .)
    END_OF_LINE     reduce using rule 14 (valor -> STRING .)
    COMA            reduce using rule 14 (valor -> STRING .)
    PAR_DER         reduce using rule 14 (valor -> STRING .)
    DOS_PUNTOS      reduce using rule 14 (valor -> STRING .)


state 38

    (86) while -> while_normal .

    $end            reduce using rule 86 (while -> while_normal .)
    LLAVE_DER       reduce using rule 86 (while -> while_normal .)


state 39

    (87) while -> while_do .

    $end            reduce using rule 87 (while -> while_do .)
    LLAVE_DER       reduce using rule 87 (while -> while_do .)


state 40

    (100) switch_case -> SWITCH . PAR_IZQ valor PAR_DER LLAVE_IZQ casos LLAVE_DER

    PAR_IZQ         shift and go to state 102


state 41

    (113) for -> FOR . PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DER

    PAR_IZQ         shift and go to state 103


state 42

    (133) lista -> LIST . tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINE
    (134) tipoLista -> . MENOR_QUE valor_tipo_inicializador MAYOR_QUE

    MENOR_QUE       shift and go to state 105

    tipoLista                      shift and go to state 104

state 43

    (135) stack -> STACK . MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL NEW STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINE

    MENOR_QUE       shift and go to state 106


state 44

    (153) salida_uno -> CONSOLE_WRITELINE . PAR_IZQ STRING PAR_DER
    (154) salida_uno -> CONSOLE_WRITELINE . PAR_IZQ operacion_string PAR_DER
    (155) salida_uno -> CONSOLE_WRITELINE . PAR_IZQ IDENTIFICADOR PAR_DER
    (156) salida_dos -> CONSOLE_WRITELINE . PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER

    PAR_IZQ         shift and go to state 107


state 45

    (157) salida_tres -> CONSOLE_READLINE . PAR_IZQ PAR_DER

    PAR_IZQ         shift and go to state 108


state 46

    (160) funcion_tipo_uno -> modificador_acceso . VOID IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ body LLAVE_DER
    (161) funcion_tipo_tres -> modificador_acceso . VOID IDENTIFICADOR PAR_IZQ parametrosF PAR_DER LLAVE_IZQ bodyF LLAVE_DER

    VOID            shift and go to state 109


state 47

    (21) valor_tipo -> CHAR_TYPE .

    IDENTIFICADOR   reduce using rule 21 (valor_tipo -> CHAR_TYPE .)


state 48

    (22) valor_tipo -> FLOAT_TYPE .

    IDENTIFICADOR   reduce using rule 22 (valor_tipo -> FLOAT_TYPE .)


state 49

    (23) valor_tipo -> DOUBLE_TYPE .

    IDENTIFICADOR   reduce using rule 23 (valor_tipo -> DOUBLE_TYPE .)


state 50

    (24) valor_tipo -> INT_TYPE .

    IDENTIFICADOR   reduce using rule 24 (valor_tipo -> INT_TYPE .)


state 51

    (25) valor_tipo -> BOOL_TYPE .

    IDENTIFICADOR   reduce using rule 25 (valor_tipo -> BOOL_TYPE .)


state 52

    (26) valor_tipo -> STRING_TYPE .

    IDENTIFICADOR   reduce using rule 26 (valor_tipo -> STRING_TYPE .)


state 53

    (16) numero -> FLOAT .

    SUMA            reduce using rule 16 (numero -> FLOAT .)
    RESTA           reduce using rule 16 (numero -> FLOAT .)
    MULTIPLICACION  reduce using rule 16 (numero -> FLOAT .)
    DIVISION        reduce using rule 16 (numero -> FLOAT .)
    MODULO          reduce using rule 16 (numero -> FLOAT .)
    IGUAL_IGUAL     reduce using rule 16 (numero -> FLOAT .)
    NO_IGUAL        reduce using rule 16 (numero -> FLOAT .)
    MENOR_QUE       reduce using rule 16 (numero -> FLOAT .)
    MENOR_O_IGUAL_QUE reduce using rule 16 (numero -> FLOAT .)
    MAYOR_QUE       reduce using rule 16 (numero -> FLOAT .)
    MAYOR_O_IGUAL_QUE reduce using rule 16 (numero -> FLOAT .)
    $end            reduce using rule 16 (numero -> FLOAT .)
    LLAVE_DER       reduce using rule 16 (numero -> FLOAT .)
    END_OF_LINE     reduce using rule 16 (numero -> FLOAT .)
    COMA            reduce using rule 16 (numero -> FLOAT .)
    PAR_DER         reduce using rule 16 (numero -> FLOAT .)
    DOS_PUNTOS      reduce using rule 16 (numero -> FLOAT .)


state 54

    (17) numero -> DOUBLE .

    SUMA            reduce using rule 17 (numero -> DOUBLE .)
    RESTA           reduce using rule 17 (numero -> DOUBLE .)
    MULTIPLICACION  reduce using rule 17 (numero -> DOUBLE .)
    DIVISION        reduce using rule 17 (numero -> DOUBLE .)
    MODULO          reduce using rule 17 (numero -> DOUBLE .)
    IGUAL_IGUAL     reduce using rule 17 (numero -> DOUBLE .)
    NO_IGUAL        reduce using rule 17 (numero -> DOUBLE .)
    MENOR_QUE       reduce using rule 17 (numero -> DOUBLE .)
    MENOR_O_IGUAL_QUE reduce using rule 17 (numero -> DOUBLE .)
    MAYOR_QUE       reduce using rule 17 (numero -> DOUBLE .)
    MAYOR_O_IGUAL_QUE reduce using rule 17 (numero -> DOUBLE .)
    $end            reduce using rule 17 (numero -> DOUBLE .)
    LLAVE_DER       reduce using rule 17 (numero -> DOUBLE .)
    END_OF_LINE     reduce using rule 17 (numero -> DOUBLE .)
    COMA            reduce using rule 17 (numero -> DOUBLE .)
    PAR_DER         reduce using rule 17 (numero -> DOUBLE .)
    DOS_PUNTOS      reduce using rule 17 (numero -> DOUBLE .)


state 55

    (18) numero -> INT .

    SUMA            reduce using rule 18 (numero -> INT .)
    RESTA           reduce using rule 18 (numero -> INT .)
    MULTIPLICACION  reduce using rule 18 (numero -> INT .)
    DIVISION        reduce using rule 18 (numero -> INT .)
    MODULO          reduce using rule 18 (numero -> INT .)
    IGUAL_IGUAL     reduce using rule 18 (numero -> INT .)
    NO_IGUAL        reduce using rule 18 (numero -> INT .)
    MENOR_QUE       reduce using rule 18 (numero -> INT .)
    MENOR_O_IGUAL_QUE reduce using rule 18 (numero -> INT .)
    MAYOR_QUE       reduce using rule 18 (numero -> INT .)
    MAYOR_O_IGUAL_QUE reduce using rule 18 (numero -> INT .)
    $end            reduce using rule 18 (numero -> INT .)
    LLAVE_DER       reduce using rule 18 (numero -> INT .)
    END_OF_LINE     reduce using rule 18 (numero -> INT .)
    COMA            reduce using rule 18 (numero -> INT .)
    PAR_DER         reduce using rule 18 (numero -> INT .)
    DOS_PUNTOS      reduce using rule 18 (numero -> INT .)


state 56

    (88) while_normal -> WHILE . PAR_IZQ expresion_condicional PAR_DER LLAVE_IZQ body_while LLAVE_DER

    PAR_IZQ         shift and go to state 110


state 57

    (89) while_do -> DO . LLAVE_IZQ body_while LLAVE_DER WHILE PAR_IZQ expresion_condicional PAR_DER END_OF_LINE

    LLAVE_IZQ       shift and go to state 111


state 58

    (34) modificador_acceso -> PRIVATE .

    VOID            reduce using rule 34 (modificador_acceso -> PRIVATE .)


state 59

    (35) modificador_acceso -> PROTECTED .

    VOID            reduce using rule 35 (modificador_acceso -> PROTECTED .)


state 60

    (36) modificador_acceso -> PUBLIC .

    VOID            reduce using rule 36 (modificador_acceso -> PUBLIC .)


state 61

    (1) body -> asignacion END_OF_LINE .

    $end            reduce using rule 1 (body -> asignacion END_OF_LINE .)
    LLAVE_DER       reduce using rule 1 (body -> asignacion END_OF_LINE .)


state 62

    (5) body -> expresion END_OF_LINE .

    $end            reduce using rule 5 (body -> expresion END_OF_LINE .)
    LLAVE_DER       reduce using rule 5 (body -> expresion END_OF_LINE .)


state 63

    (6) body -> salida_entrada END_OF_LINE .

    $end            reduce using rule 6 (body -> salida_entrada END_OF_LINE .)
    LLAVE_DER       reduce using rule 6 (body -> salida_entrada END_OF_LINE .)


state 64

    (8) body -> declaracion END_OF_LINE .

    $end            reduce using rule 8 (body -> declaracion END_OF_LINE .)
    LLAVE_DER       reduce using rule 8 (body -> declaracion END_OF_LINE .)


state 65

    (10) body -> funciones_estructura_datos END_OF_LINE .

    $end            reduce using rule 10 (body -> funciones_estructura_datos END_OF_LINE .)
    LLAVE_DER       reduce using rule 10 (body -> funciones_estructura_datos END_OF_LINE .)


state 66

    (82) comparacion -> valor operador_realacional . valor
    (11) valor -> . CHAR
    (12) valor -> . numero
    (13) valor -> . BOOL
    (14) valor -> . STRING
    (15) valor -> . IDENTIFICADOR
    (16) numero -> . FLOAT
    (17) numero -> . DOUBLE
    (18) numero -> . INT

    CHAR            shift and go to state 34
    BOOL            shift and go to state 36
    STRING          shift and go to state 37
    IDENTIFICADOR   shift and go to state 114
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55

    valor                          shift and go to state 112
    numero                         shift and go to state 113

state 67

    (37) operador_realacional -> IGUAL_IGUAL .

    CHAR            reduce using rule 37 (operador_realacional -> IGUAL_IGUAL .)
    BOOL            reduce using rule 37 (operador_realacional -> IGUAL_IGUAL .)
    STRING          reduce using rule 37 (operador_realacional -> IGUAL_IGUAL .)
    IDENTIFICADOR   reduce using rule 37 (operador_realacional -> IGUAL_IGUAL .)
    FLOAT           reduce using rule 37 (operador_realacional -> IGUAL_IGUAL .)
    DOUBLE          reduce using rule 37 (operador_realacional -> IGUAL_IGUAL .)
    INT             reduce using rule 37 (operador_realacional -> IGUAL_IGUAL .)


state 68

    (38) operador_realacional -> NO_IGUAL .

    CHAR            reduce using rule 38 (operador_realacional -> NO_IGUAL .)
    BOOL            reduce using rule 38 (operador_realacional -> NO_IGUAL .)
    STRING          reduce using rule 38 (operador_realacional -> NO_IGUAL .)
    IDENTIFICADOR   reduce using rule 38 (operador_realacional -> NO_IGUAL .)
    FLOAT           reduce using rule 38 (operador_realacional -> NO_IGUAL .)
    DOUBLE          reduce using rule 38 (operador_realacional -> NO_IGUAL .)
    INT             reduce using rule 38 (operador_realacional -> NO_IGUAL .)


state 69

    (39) operador_realacional -> MENOR_QUE .

    CHAR            reduce using rule 39 (operador_realacional -> MENOR_QUE .)
    BOOL            reduce using rule 39 (operador_realacional -> MENOR_QUE .)
    STRING          reduce using rule 39 (operador_realacional -> MENOR_QUE .)
    IDENTIFICADOR   reduce using rule 39 (operador_realacional -> MENOR_QUE .)
    FLOAT           reduce using rule 39 (operador_realacional -> MENOR_QUE .)
    DOUBLE          reduce using rule 39 (operador_realacional -> MENOR_QUE .)
    INT             reduce using rule 39 (operador_realacional -> MENOR_QUE .)


state 70

    (40) operador_realacional -> MENOR_O_IGUAL_QUE .

    CHAR            reduce using rule 40 (operador_realacional -> MENOR_O_IGUAL_QUE .)
    BOOL            reduce using rule 40 (operador_realacional -> MENOR_O_IGUAL_QUE .)
    STRING          reduce using rule 40 (operador_realacional -> MENOR_O_IGUAL_QUE .)
    IDENTIFICADOR   reduce using rule 40 (operador_realacional -> MENOR_O_IGUAL_QUE .)
    FLOAT           reduce using rule 40 (operador_realacional -> MENOR_O_IGUAL_QUE .)
    DOUBLE          reduce using rule 40 (operador_realacional -> MENOR_O_IGUAL_QUE .)
    INT             reduce using rule 40 (operador_realacional -> MENOR_O_IGUAL_QUE .)


state 71

    (41) operador_realacional -> MAYOR_QUE .

    CHAR            reduce using rule 41 (operador_realacional -> MAYOR_QUE .)
    BOOL            reduce using rule 41 (operador_realacional -> MAYOR_QUE .)
    STRING          reduce using rule 41 (operador_realacional -> MAYOR_QUE .)
    IDENTIFICADOR   reduce using rule 41 (operador_realacional -> MAYOR_QUE .)
    FLOAT           reduce using rule 41 (operador_realacional -> MAYOR_QUE .)
    DOUBLE          reduce using rule 41 (operador_realacional -> MAYOR_QUE .)
    INT             reduce using rule 41 (operador_realacional -> MAYOR_QUE .)


state 72

    (42) operador_realacional -> MAYOR_O_IGUAL_QUE .

    CHAR            reduce using rule 42 (operador_realacional -> MAYOR_O_IGUAL_QUE .)
    BOOL            reduce using rule 42 (operador_realacional -> MAYOR_O_IGUAL_QUE .)
    STRING          reduce using rule 42 (operador_realacional -> MAYOR_O_IGUAL_QUE .)
    IDENTIFICADOR   reduce using rule 42 (operador_realacional -> MAYOR_O_IGUAL_QUE .)
    FLOAT           reduce using rule 42 (operador_realacional -> MAYOR_O_IGUAL_QUE .)
    DOUBLE          reduce using rule 42 (operador_realacional -> MAYOR_O_IGUAL_QUE .)
    INT             reduce using rule 42 (operador_realacional -> MAYOR_O_IGUAL_QUE .)


state 73

    (80) declaracion -> valor_tipo IDENTIFICADOR .
    (61) asignacionSimple -> IDENTIFICADOR . IGUAL valor
    (62) asignacionSimple -> IDENTIFICADOR . IGUAL expresion
    (63) asignacionSimple -> IDENTIFICADOR . IGUAL salida_entrada

    END_OF_LINE     reduce using rule 80 (declaracion -> valor_tipo IDENTIFICADOR .)
    COMA            reduce using rule 80 (declaracion -> valor_tipo IDENTIFICADOR .)
    PAR_DER         reduce using rule 80 (declaracion -> valor_tipo IDENTIFICADOR .)
    IGUAL           shift and go to state 75


state 74

    (81) declaracion -> valor_tipo asignacionSimple .

    END_OF_LINE     reduce using rule 81 (declaracion -> valor_tipo asignacionSimple .)
    COMA            reduce using rule 81 (declaracion -> valor_tipo asignacionSimple .)
    PAR_DER         reduce using rule 81 (declaracion -> valor_tipo asignacionSimple .)


state 75

    (61) asignacionSimple -> IDENTIFICADOR IGUAL . valor
    (62) asignacionSimple -> IDENTIFICADOR IGUAL . expresion
    (63) asignacionSimple -> IDENTIFICADOR IGUAL . salida_entrada
    (11) valor -> . CHAR
    (12) valor -> . numero
    (13) valor -> . BOOL
    (14) valor -> . STRING
    (15) valor -> . IDENTIFICADOR
    (140) expresion -> . expresion_operacion_aritmetica
    (141) expresion -> . expresion_condicional
    (150) salida_entrada -> . salida_uno
    (151) salida_entrada -> . salida_dos
    (152) salida_entrada -> . salida_tres
    (16) numero -> . FLOAT
    (17) numero -> . DOUBLE
    (18) numero -> . INT
    (142) expresion_operacion_aritmetica -> . numero operador_aritmentico numero
    (143) expresion_operacion_aritmetica -> . numero operador_aritmentico IDENTIFICADOR
    (144) expresion_operacion_aritmetica -> . IDENTIFICADOR operador_aritmentico numero
    (145) expresion_operacion_aritmetica -> . IDENTIFICADOR operador_aritmentico IDENTIFICADOR
    (146) expresion_condicional -> . numero operador_condicional numero
    (147) expresion_condicional -> . IDENTIFICADOR operador_condicional IDENTIFICADOR
    (148) expresion_condicional -> . IDENTIFICADOR operador_condicional numero
    (149) expresion_condicional -> . numero operador_condicional IDENTIFICADOR
    (153) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER
    (154) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER
    (155) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER
    (156) salida_dos -> . CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER
    (157) salida_tres -> . CONSOLE_READLINE PAR_IZQ PAR_DER

    CHAR            shift and go to state 34
    BOOL            shift and go to state 36
    STRING          shift and go to state 37
    IDENTIFICADOR   shift and go to state 115
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55
    CONSOLE_WRITELINE shift and go to state 44
    CONSOLE_READLINE shift and go to state 45

    valor                          shift and go to state 116
    expresion                      shift and go to state 117
    salida_entrada                 shift and go to state 118
    numero                         shift and go to state 35
    expresion_operacion_aritmetica shift and go to state 21
    expresion_condicional          shift and go to state 22
    salida_uno                     shift and go to state 23
    salida_dos                     shift and go to state 24
    salida_tres                    shift and go to state 25

state 76

    (144) expresion_operacion_aritmetica -> IDENTIFICADOR operador_aritmentico . numero
    (145) expresion_operacion_aritmetica -> IDENTIFICADOR operador_aritmentico . IDENTIFICADOR
    (16) numero -> . FLOAT
    (17) numero -> . DOUBLE
    (18) numero -> . INT

    IDENTIFICADOR   shift and go to state 119
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55

    numero                         shift and go to state 120

state 77

    (147) expresion_condicional -> IDENTIFICADOR operador_condicional . IDENTIFICADOR
    (148) expresion_condicional -> IDENTIFICADOR operador_condicional . numero
    (16) numero -> . FLOAT
    (17) numero -> . DOUBLE
    (18) numero -> . INT

    IDENTIFICADOR   shift and go to state 121
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55

    numero                         shift and go to state 122

state 78

    (138) stack_push -> IDENTIFICADOR PUNTO . PUSH PAR_IZQ valor PAR_DER
    (139) stack_pop -> IDENTIFICADOR PUNTO . POP PAR_IZQ PAR_DER

    PUSH            shift and go to state 123
    POP             shift and go to state 124


state 79

    (66) asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic . BOOL
    (67) asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic . expresion_condicional
    (68) asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic . IDENTIFICADOR
    (146) expresion_condicional -> . numero operador_condicional numero
    (147) expresion_condicional -> . IDENTIFICADOR operador_condicional IDENTIFICADOR
    (148) expresion_condicional -> . IDENTIFICADOR operador_condicional numero
    (149) expresion_condicional -> . numero operador_condicional IDENTIFICADOR
    (16) numero -> . FLOAT
    (17) numero -> . DOUBLE
    (18) numero -> . INT

    BOOL            shift and go to state 126
    IDENTIFICADOR   shift and go to state 125
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55

    expresion_condicional          shift and go to state 127
    numero                         shift and go to state 128

state 80

    (69) asignacionCompuesta_Number -> IDENTIFICADOR operadoresCompuestosNumber . numero
    (70) asignacionCompuesta_Number -> IDENTIFICADOR operadoresCompuestosNumber . expresion_operacion_aritmetica
    (71) asignacionCompuesta_Number -> IDENTIFICADOR operadoresCompuestosNumber . IDENTIFICADOR
    (16) numero -> . FLOAT
    (17) numero -> . DOUBLE
    (18) numero -> . INT
    (142) expresion_operacion_aritmetica -> . numero operador_aritmentico numero
    (143) expresion_operacion_aritmetica -> . numero operador_aritmentico IDENTIFICADOR
    (144) expresion_operacion_aritmetica -> . IDENTIFICADOR operador_aritmentico numero
    (145) expresion_operacion_aritmetica -> . IDENTIFICADOR operador_aritmentico IDENTIFICADOR

    IDENTIFICADOR   shift and go to state 129
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55

    numero                         shift and go to state 130
    expresion_operacion_aritmetica shift and go to state 131

state 81

    (43) operador_aritmentico -> SUMA .

    IDENTIFICADOR   reduce using rule 43 (operador_aritmentico -> SUMA .)
    FLOAT           reduce using rule 43 (operador_aritmentico -> SUMA .)
    DOUBLE          reduce using rule 43 (operador_aritmentico -> SUMA .)
    INT             reduce using rule 43 (operador_aritmentico -> SUMA .)


state 82

    (44) operador_aritmentico -> RESTA .

    IDENTIFICADOR   reduce using rule 44 (operador_aritmentico -> RESTA .)
    FLOAT           reduce using rule 44 (operador_aritmentico -> RESTA .)
    DOUBLE          reduce using rule 44 (operador_aritmentico -> RESTA .)
    INT             reduce using rule 44 (operador_aritmentico -> RESTA .)


state 83

    (45) operador_aritmentico -> MULTIPLICACION .

    IDENTIFICADOR   reduce using rule 45 (operador_aritmentico -> MULTIPLICACION .)
    FLOAT           reduce using rule 45 (operador_aritmentico -> MULTIPLICACION .)
    DOUBLE          reduce using rule 45 (operador_aritmentico -> MULTIPLICACION .)
    INT             reduce using rule 45 (operador_aritmentico -> MULTIPLICACION .)


state 84

    (46) operador_aritmentico -> DIVISION .

    IDENTIFICADOR   reduce using rule 46 (operador_aritmentico -> DIVISION .)
    FLOAT           reduce using rule 46 (operador_aritmentico -> DIVISION .)
    DOUBLE          reduce using rule 46 (operador_aritmentico -> DIVISION .)
    INT             reduce using rule 46 (operador_aritmentico -> DIVISION .)


state 85

    (47) operador_aritmentico -> MODULO .

    IDENTIFICADOR   reduce using rule 47 (operador_aritmentico -> MODULO .)
    FLOAT           reduce using rule 47 (operador_aritmentico -> MODULO .)
    DOUBLE          reduce using rule 47 (operador_aritmentico -> MODULO .)
    INT             reduce using rule 47 (operador_aritmentico -> MODULO .)


state 86

    (48) operador_condicional -> IGUAL_IGUAL .

    IDENTIFICADOR   reduce using rule 48 (operador_condicional -> IGUAL_IGUAL .)
    FLOAT           reduce using rule 48 (operador_condicional -> IGUAL_IGUAL .)
    DOUBLE          reduce using rule 48 (operador_condicional -> IGUAL_IGUAL .)
    INT             reduce using rule 48 (operador_condicional -> IGUAL_IGUAL .)


state 87

    (49) operador_condicional -> NO_IGUAL .

    IDENTIFICADOR   reduce using rule 49 (operador_condicional -> NO_IGUAL .)
    FLOAT           reduce using rule 49 (operador_condicional -> NO_IGUAL .)
    DOUBLE          reduce using rule 49 (operador_condicional -> NO_IGUAL .)
    INT             reduce using rule 49 (operador_condicional -> NO_IGUAL .)


state 88

    (50) operador_condicional -> MENOR_QUE .

    IDENTIFICADOR   reduce using rule 50 (operador_condicional -> MENOR_QUE .)
    FLOAT           reduce using rule 50 (operador_condicional -> MENOR_QUE .)
    DOUBLE          reduce using rule 50 (operador_condicional -> MENOR_QUE .)
    INT             reduce using rule 50 (operador_condicional -> MENOR_QUE .)


state 89

    (51) operador_condicional -> MENOR_O_IGUAL_QUE .

    IDENTIFICADOR   reduce using rule 51 (operador_condicional -> MENOR_O_IGUAL_QUE .)
    FLOAT           reduce using rule 51 (operador_condicional -> MENOR_O_IGUAL_QUE .)
    DOUBLE          reduce using rule 51 (operador_condicional -> MENOR_O_IGUAL_QUE .)
    INT             reduce using rule 51 (operador_condicional -> MENOR_O_IGUAL_QUE .)


state 90

    (52) operador_condicional -> MAYOR_QUE .

    IDENTIFICADOR   reduce using rule 52 (operador_condicional -> MAYOR_QUE .)
    FLOAT           reduce using rule 52 (operador_condicional -> MAYOR_QUE .)
    DOUBLE          reduce using rule 52 (operador_condicional -> MAYOR_QUE .)
    INT             reduce using rule 52 (operador_condicional -> MAYOR_QUE .)


state 91

    (53) operador_condicional -> MAYOR_O_IGUAL_QUE .

    IDENTIFICADOR   reduce using rule 53 (operador_condicional -> MAYOR_O_IGUAL_QUE .)
    FLOAT           reduce using rule 53 (operador_condicional -> MAYOR_O_IGUAL_QUE .)
    DOUBLE          reduce using rule 53 (operador_condicional -> MAYOR_O_IGUAL_QUE .)
    INT             reduce using rule 53 (operador_condicional -> MAYOR_O_IGUAL_QUE .)


state 92

    (77) operadoresCompuestosLogic -> AND_EQUAL .

    BOOL            reduce using rule 77 (operadoresCompuestosLogic -> AND_EQUAL .)
    IDENTIFICADOR   reduce using rule 77 (operadoresCompuestosLogic -> AND_EQUAL .)
    FLOAT           reduce using rule 77 (operadoresCompuestosLogic -> AND_EQUAL .)
    DOUBLE          reduce using rule 77 (operadoresCompuestosLogic -> AND_EQUAL .)
    INT             reduce using rule 77 (operadoresCompuestosLogic -> AND_EQUAL .)


state 93

    (78) operadoresCompuestosLogic -> OR_EQUAL .

    BOOL            reduce using rule 78 (operadoresCompuestosLogic -> OR_EQUAL .)
    IDENTIFICADOR   reduce using rule 78 (operadoresCompuestosLogic -> OR_EQUAL .)
    FLOAT           reduce using rule 78 (operadoresCompuestosLogic -> OR_EQUAL .)
    DOUBLE          reduce using rule 78 (operadoresCompuestosLogic -> OR_EQUAL .)
    INT             reduce using rule 78 (operadoresCompuestosLogic -> OR_EQUAL .)


state 94

    (79) operadoresCompuestosLogic -> EXC_OREQUAL .

    BOOL            reduce using rule 79 (operadoresCompuestosLogic -> EXC_OREQUAL .)
    IDENTIFICADOR   reduce using rule 79 (operadoresCompuestosLogic -> EXC_OREQUAL .)
    FLOAT           reduce using rule 79 (operadoresCompuestosLogic -> EXC_OREQUAL .)
    DOUBLE          reduce using rule 79 (operadoresCompuestosLogic -> EXC_OREQUAL .)
    INT             reduce using rule 79 (operadoresCompuestosLogic -> EXC_OREQUAL .)


state 95

    (72) operadoresCompuestosNumber -> AUMENTADO .

    IDENTIFICADOR   reduce using rule 72 (operadoresCompuestosNumber -> AUMENTADO .)
    FLOAT           reduce using rule 72 (operadoresCompuestosNumber -> AUMENTADO .)
    DOUBLE          reduce using rule 72 (operadoresCompuestosNumber -> AUMENTADO .)
    INT             reduce using rule 72 (operadoresCompuestosNumber -> AUMENTADO .)


state 96

    (73) operadoresCompuestosNumber -> DECREMENTADO .

    IDENTIFICADOR   reduce using rule 73 (operadoresCompuestosNumber -> DECREMENTADO .)
    FLOAT           reduce using rule 73 (operadoresCompuestosNumber -> DECREMENTADO .)
    DOUBLE          reduce using rule 73 (operadoresCompuestosNumber -> DECREMENTADO .)
    INT             reduce using rule 73 (operadoresCompuestosNumber -> DECREMENTADO .)


state 97

    (74) operadoresCompuestosNumber -> MULTIPLICADO_POR .

    IDENTIFICADOR   reduce using rule 74 (operadoresCompuestosNumber -> MULTIPLICADO_POR .)
    FLOAT           reduce using rule 74 (operadoresCompuestosNumber -> MULTIPLICADO_POR .)
    DOUBLE          reduce using rule 74 (operadoresCompuestosNumber -> MULTIPLICADO_POR .)
    INT             reduce using rule 74 (operadoresCompuestosNumber -> MULTIPLICADO_POR .)


state 98

    (75) operadoresCompuestosNumber -> DIVIDIDO_POR .

    IDENTIFICADOR   reduce using rule 75 (operadoresCompuestosNumber -> DIVIDIDO_POR .)
    FLOAT           reduce using rule 75 (operadoresCompuestosNumber -> DIVIDIDO_POR .)
    DOUBLE          reduce using rule 75 (operadoresCompuestosNumber -> DIVIDIDO_POR .)
    INT             reduce using rule 75 (operadoresCompuestosNumber -> DIVIDIDO_POR .)


state 99

    (76) operadoresCompuestosNumber -> MODULO_DE .

    IDENTIFICADOR   reduce using rule 76 (operadoresCompuestosNumber -> MODULO_DE .)
    FLOAT           reduce using rule 76 (operadoresCompuestosNumber -> MODULO_DE .)
    DOUBLE          reduce using rule 76 (operadoresCompuestosNumber -> MODULO_DE .)
    INT             reduce using rule 76 (operadoresCompuestosNumber -> MODULO_DE .)


state 100

    (142) expresion_operacion_aritmetica -> numero operador_aritmentico . numero
    (143) expresion_operacion_aritmetica -> numero operador_aritmentico . IDENTIFICADOR
    (16) numero -> . FLOAT
    (17) numero -> . DOUBLE
    (18) numero -> . INT

    IDENTIFICADOR   shift and go to state 133
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55

    numero                         shift and go to state 132

state 101

    (146) expresion_condicional -> numero operador_condicional . numero
    (149) expresion_condicional -> numero operador_condicional . IDENTIFICADOR
    (16) numero -> . FLOAT
    (17) numero -> . DOUBLE
    (18) numero -> . INT

    IDENTIFICADOR   shift and go to state 135
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55

    numero                         shift and go to state 134

state 102

    (100) switch_case -> SWITCH PAR_IZQ . valor PAR_DER LLAVE_IZQ casos LLAVE_DER
    (11) valor -> . CHAR
    (12) valor -> . numero
    (13) valor -> . BOOL
    (14) valor -> . STRING
    (15) valor -> . IDENTIFICADOR
    (16) numero -> . FLOAT
    (17) numero -> . DOUBLE
    (18) numero -> . INT

    CHAR            shift and go to state 34
    BOOL            shift and go to state 36
    STRING          shift and go to state 37
    IDENTIFICADOR   shift and go to state 114
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55

    valor                          shift and go to state 136
    numero                         shift and go to state 113

state 103

    (113) for -> FOR PAR_IZQ . forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DER
    (122) forInicializador -> . tipoDatoForInicializador IDENTIFICADOR IGUAL valorForInicializador
    (123) forInicializador -> . IDENTIFICADOR IGUAL valorForInicializador
    (124) tipoDatoForInicializador -> . FLOAT_TYPE
    (125) tipoDatoForInicializador -> . DOUBLE_TYPE
    (126) tipoDatoForInicializador -> . INT_TYPE

    IDENTIFICADOR   shift and go to state 139
    FLOAT_TYPE      shift and go to state 140
    DOUBLE_TYPE     shift and go to state 141
    INT_TYPE        shift and go to state 142

    forInicializador               shift and go to state 137
    tipoDatoForInicializador       shift and go to state 138

state 104

    (133) lista -> LIST tipoLista . IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINE

    IDENTIFICADOR   shift and go to state 143


state 105

    (134) tipoLista -> MENOR_QUE . valor_tipo_inicializador MAYOR_QUE
    (27) valor_tipo_inicializador -> . FLOAT_TYPE
    (28) valor_tipo_inicializador -> . DOUBLE_TYPE
    (29) valor_tipo_inicializador -> . STRING_TYPE
    (30) valor_tipo_inicializador -> . INT_TYPE
    (31) valor_tipo_inicializador -> . BOOL_TYPE
    (32) valor_tipo_inicializador -> . CHAR_TYPE
    (33) valor_tipo_inicializador -> . IDENTIFICADOR

    FLOAT_TYPE      shift and go to state 145
    DOUBLE_TYPE     shift and go to state 146
    STRING_TYPE     shift and go to state 147
    INT_TYPE        shift and go to state 148
    BOOL_TYPE       shift and go to state 149
    CHAR_TYPE       shift and go to state 150
    IDENTIFICADOR   shift and go to state 151

    valor_tipo_inicializador       shift and go to state 144

state 106

    (135) stack -> STACK MENOR_QUE . valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL NEW STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINE
    (27) valor_tipo_inicializador -> . FLOAT_TYPE
    (28) valor_tipo_inicializador -> . DOUBLE_TYPE
    (29) valor_tipo_inicializador -> . STRING_TYPE
    (30) valor_tipo_inicializador -> . INT_TYPE
    (31) valor_tipo_inicializador -> . BOOL_TYPE
    (32) valor_tipo_inicializador -> . CHAR_TYPE
    (33) valor_tipo_inicializador -> . IDENTIFICADOR

    FLOAT_TYPE      shift and go to state 145
    DOUBLE_TYPE     shift and go to state 146
    STRING_TYPE     shift and go to state 147
    INT_TYPE        shift and go to state 148
    BOOL_TYPE       shift and go to state 149
    CHAR_TYPE       shift and go to state 150
    IDENTIFICADOR   shift and go to state 151

    valor_tipo_inicializador       shift and go to state 152

state 107

    (153) salida_uno -> CONSOLE_WRITELINE PAR_IZQ . STRING PAR_DER
    (154) salida_uno -> CONSOLE_WRITELINE PAR_IZQ . operacion_string PAR_DER
    (155) salida_uno -> CONSOLE_WRITELINE PAR_IZQ . IDENTIFICADOR PAR_DER
    (156) salida_dos -> CONSOLE_WRITELINE PAR_IZQ . C_CADENA_INTERPOLADA STRING PAR_DER
    (54) operacion_string -> . STRING SUMA STRING
    (55) operacion_string -> . STRING SUMA IDENTIFICADOR
    (56) operacion_string -> . IDENTIFICADOR SUMA STRING
    (57) operacion_string -> . IDENTIFICADOR SUMA IDENTIFICADOR

    STRING          shift and go to state 153
    IDENTIFICADOR   shift and go to state 155
    C_CADENA_INTERPOLADA shift and go to state 156

    operacion_string               shift and go to state 154

state 108

    (157) salida_tres -> CONSOLE_READLINE PAR_IZQ . PAR_DER

    PAR_DER         shift and go to state 157


state 109

    (160) funcion_tipo_uno -> modificador_acceso VOID . IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ body LLAVE_DER
    (161) funcion_tipo_tres -> modificador_acceso VOID . IDENTIFICADOR PAR_IZQ parametrosF PAR_DER LLAVE_IZQ bodyF LLAVE_DER

    IDENTIFICADOR   shift and go to state 158


state 110

    (88) while_normal -> WHILE PAR_IZQ . expresion_condicional PAR_DER LLAVE_IZQ body_while LLAVE_DER
    (146) expresion_condicional -> . numero operador_condicional numero
    (147) expresion_condicional -> . IDENTIFICADOR operador_condicional IDENTIFICADOR
    (148) expresion_condicional -> . IDENTIFICADOR operador_condicional numero
    (149) expresion_condicional -> . numero operador_condicional IDENTIFICADOR
    (16) numero -> . FLOAT
    (17) numero -> . DOUBLE
    (18) numero -> . INT

    IDENTIFICADOR   shift and go to state 160
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55

    expresion_condicional          shift and go to state 159
    numero                         shift and go to state 128

state 111

    (89) while_do -> DO LLAVE_IZQ . body_while LLAVE_DER WHILE PAR_IZQ expresion_condicional PAR_DER END_OF_LINE
    (90) body_while -> . asignacion END_OF_LINE
    (91) body_while -> . declaracion END_OF_LINE
    (92) body_while -> . salida_entrada END_OF_LINE
    (93) body_while -> . BREAK END_OF_LINE
    (94) body_while -> . CONTINUE END_OF_LINE
    (95) body_while -> . asignacion END_OF_LINE body_while
    (96) body_while -> . declaracion END_OF_LINE body_while
    (97) body_while -> . salida_entrada END_OF_LINE body_while
    (98) body_while -> . BREAK END_OF_LINE body_while
    (99) body_while -> . CONTINUE END_OF_LINE body_while
    (59) asignacion -> . asignacionSimple
    (60) asignacion -> . asignacionCompuesta
    (80) declaracion -> . valor_tipo IDENTIFICADOR
    (81) declaracion -> . valor_tipo asignacionSimple
    (150) salida_entrada -> . salida_uno
    (151) salida_entrada -> . salida_dos
    (152) salida_entrada -> . salida_tres
    (61) asignacionSimple -> . IDENTIFICADOR IGUAL valor
    (62) asignacionSimple -> . IDENTIFICADOR IGUAL expresion
    (63) asignacionSimple -> . IDENTIFICADOR IGUAL salida_entrada
    (64) asignacionCompuesta -> . asignacionCompuesta_Logic
    (65) asignacionCompuesta -> . asignacionCompuesta_Number
    (21) valor_tipo -> . CHAR_TYPE
    (22) valor_tipo -> . FLOAT_TYPE
    (23) valor_tipo -> . DOUBLE_TYPE
    (24) valor_tipo -> . INT_TYPE
    (25) valor_tipo -> . BOOL_TYPE
    (26) valor_tipo -> . STRING_TYPE
    (153) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER
    (154) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER
    (155) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER
    (156) salida_dos -> . CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER
    (157) salida_tres -> . CONSOLE_READLINE PAR_IZQ PAR_DER
    (66) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic BOOL
    (67) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic expresion_condicional
    (68) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR
    (69) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber numero
    (70) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica
    (71) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR

    BREAK           shift and go to state 165
    CONTINUE        shift and go to state 166
    IDENTIFICADOR   shift and go to state 167
    CHAR_TYPE       shift and go to state 47
    FLOAT_TYPE      shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    INT_TYPE        shift and go to state 50
    BOOL_TYPE       shift and go to state 51
    STRING_TYPE     shift and go to state 52
    CONSOLE_WRITELINE shift and go to state 44
    CONSOLE_READLINE shift and go to state 45

    body_while                     shift and go to state 161
    asignacion                     shift and go to state 162
    declaracion                    shift and go to state 163
    salida_entrada                 shift and go to state 164
    asignacionSimple               shift and go to state 13
    asignacionCompuesta            shift and go to state 14
    valor_tipo                     shift and go to state 28
    salida_uno                     shift and go to state 23
    salida_dos                     shift and go to state 24
    salida_tres                    shift and go to state 25
    asignacionCompuesta_Logic      shift and go to state 32
    asignacionCompuesta_Number     shift and go to state 33

state 112

    (82) comparacion -> valor operador_realacional valor .

    $end            reduce using rule 82 (comparacion -> valor operador_realacional valor .)
    LLAVE_DER       reduce using rule 82 (comparacion -> valor operador_realacional valor .)
    END_OF_LINE     reduce using rule 82 (comparacion -> valor operador_realacional valor .)


state 113

    (12) valor -> numero .

    $end            reduce using rule 12 (valor -> numero .)
    LLAVE_DER       reduce using rule 12 (valor -> numero .)
    END_OF_LINE     reduce using rule 12 (valor -> numero .)
    PAR_DER         reduce using rule 12 (valor -> numero .)
    DOS_PUNTOS      reduce using rule 12 (valor -> numero .)
    IGUAL_IGUAL     reduce using rule 12 (valor -> numero .)
    NO_IGUAL        reduce using rule 12 (valor -> numero .)
    MENOR_QUE       reduce using rule 12 (valor -> numero .)
    MENOR_O_IGUAL_QUE reduce using rule 12 (valor -> numero .)
    MAYOR_QUE       reduce using rule 12 (valor -> numero .)
    MAYOR_O_IGUAL_QUE reduce using rule 12 (valor -> numero .)


state 114

    (15) valor -> IDENTIFICADOR .

    $end            reduce using rule 15 (valor -> IDENTIFICADOR .)
    LLAVE_DER       reduce using rule 15 (valor -> IDENTIFICADOR .)
    END_OF_LINE     reduce using rule 15 (valor -> IDENTIFICADOR .)
    PAR_DER         reduce using rule 15 (valor -> IDENTIFICADOR .)
    DOS_PUNTOS      reduce using rule 15 (valor -> IDENTIFICADOR .)


state 115

    (15) valor -> IDENTIFICADOR .
    (144) expresion_operacion_aritmetica -> IDENTIFICADOR . operador_aritmentico numero
    (145) expresion_operacion_aritmetica -> IDENTIFICADOR . operador_aritmentico IDENTIFICADOR
    (147) expresion_condicional -> IDENTIFICADOR . operador_condicional IDENTIFICADOR
    (148) expresion_condicional -> IDENTIFICADOR . operador_condicional numero
    (43) operador_aritmentico -> . SUMA
    (44) operador_aritmentico -> . RESTA
    (45) operador_aritmentico -> . MULTIPLICACION
    (46) operador_aritmentico -> . DIVISION
    (47) operador_aritmentico -> . MODULO
    (48) operador_condicional -> . IGUAL_IGUAL
    (49) operador_condicional -> . NO_IGUAL
    (50) operador_condicional -> . MENOR_QUE
    (51) operador_condicional -> . MENOR_O_IGUAL_QUE
    (52) operador_condicional -> . MAYOR_QUE
    (53) operador_condicional -> . MAYOR_O_IGUAL_QUE

    END_OF_LINE     reduce using rule 15 (valor -> IDENTIFICADOR .)
    COMA            reduce using rule 15 (valor -> IDENTIFICADOR .)
    PAR_DER         reduce using rule 15 (valor -> IDENTIFICADOR .)
    SUMA            shift and go to state 81
    RESTA           shift and go to state 82
    MULTIPLICACION  shift and go to state 83
    DIVISION        shift and go to state 84
    MODULO          shift and go to state 85
    IGUAL_IGUAL     shift and go to state 86
    NO_IGUAL        shift and go to state 87
    MENOR_QUE       shift and go to state 88
    MENOR_O_IGUAL_QUE shift and go to state 89
    MAYOR_QUE       shift and go to state 90
    MAYOR_O_IGUAL_QUE shift and go to state 91

    operador_aritmentico           shift and go to state 76
    operador_condicional           shift and go to state 77

state 116

    (61) asignacionSimple -> IDENTIFICADOR IGUAL valor .

    END_OF_LINE     reduce using rule 61 (asignacionSimple -> IDENTIFICADOR IGUAL valor .)
    COMA            reduce using rule 61 (asignacionSimple -> IDENTIFICADOR IGUAL valor .)
    PAR_DER         reduce using rule 61 (asignacionSimple -> IDENTIFICADOR IGUAL valor .)


state 117

    (62) asignacionSimple -> IDENTIFICADOR IGUAL expresion .

    END_OF_LINE     reduce using rule 62 (asignacionSimple -> IDENTIFICADOR IGUAL expresion .)
    COMA            reduce using rule 62 (asignacionSimple -> IDENTIFICADOR IGUAL expresion .)
    PAR_DER         reduce using rule 62 (asignacionSimple -> IDENTIFICADOR IGUAL expresion .)


state 118

    (63) asignacionSimple -> IDENTIFICADOR IGUAL salida_entrada .

    END_OF_LINE     reduce using rule 63 (asignacionSimple -> IDENTIFICADOR IGUAL salida_entrada .)
    COMA            reduce using rule 63 (asignacionSimple -> IDENTIFICADOR IGUAL salida_entrada .)
    PAR_DER         reduce using rule 63 (asignacionSimple -> IDENTIFICADOR IGUAL salida_entrada .)


state 119

    (145) expresion_operacion_aritmetica -> IDENTIFICADOR operador_aritmentico IDENTIFICADOR .

    END_OF_LINE     reduce using rule 145 (expresion_operacion_aritmetica -> IDENTIFICADOR operador_aritmentico IDENTIFICADOR .)
    COMA            reduce using rule 145 (expresion_operacion_aritmetica -> IDENTIFICADOR operador_aritmentico IDENTIFICADOR .)
    PAR_DER         reduce using rule 145 (expresion_operacion_aritmetica -> IDENTIFICADOR operador_aritmentico IDENTIFICADOR .)


state 120

    (144) expresion_operacion_aritmetica -> IDENTIFICADOR operador_aritmentico numero .

    END_OF_LINE     reduce using rule 144 (expresion_operacion_aritmetica -> IDENTIFICADOR operador_aritmentico numero .)
    COMA            reduce using rule 144 (expresion_operacion_aritmetica -> IDENTIFICADOR operador_aritmentico numero .)
    PAR_DER         reduce using rule 144 (expresion_operacion_aritmetica -> IDENTIFICADOR operador_aritmentico numero .)


state 121

    (147) expresion_condicional -> IDENTIFICADOR operador_condicional IDENTIFICADOR .

    END_OF_LINE     reduce using rule 147 (expresion_condicional -> IDENTIFICADOR operador_condicional IDENTIFICADOR .)
    COMA            reduce using rule 147 (expresion_condicional -> IDENTIFICADOR operador_condicional IDENTIFICADOR .)
    PAR_DER         reduce using rule 147 (expresion_condicional -> IDENTIFICADOR operador_condicional IDENTIFICADOR .)


state 122

    (148) expresion_condicional -> IDENTIFICADOR operador_condicional numero .

    END_OF_LINE     reduce using rule 148 (expresion_condicional -> IDENTIFICADOR operador_condicional numero .)
    COMA            reduce using rule 148 (expresion_condicional -> IDENTIFICADOR operador_condicional numero .)
    PAR_DER         reduce using rule 148 (expresion_condicional -> IDENTIFICADOR operador_condicional numero .)


state 123

    (138) stack_push -> IDENTIFICADOR PUNTO PUSH . PAR_IZQ valor PAR_DER

    PAR_IZQ         shift and go to state 168


state 124

    (139) stack_pop -> IDENTIFICADOR PUNTO POP . PAR_IZQ PAR_DER

    PAR_IZQ         shift and go to state 169


state 125

    (68) asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR .
    (147) expresion_condicional -> IDENTIFICADOR . operador_condicional IDENTIFICADOR
    (148) expresion_condicional -> IDENTIFICADOR . operador_condicional numero
    (48) operador_condicional -> . IGUAL_IGUAL
    (49) operador_condicional -> . NO_IGUAL
    (50) operador_condicional -> . MENOR_QUE
    (51) operador_condicional -> . MENOR_O_IGUAL_QUE
    (52) operador_condicional -> . MAYOR_QUE
    (53) operador_condicional -> . MAYOR_O_IGUAL_QUE

    END_OF_LINE     reduce using rule 68 (asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR .)
    IGUAL_IGUAL     shift and go to state 86
    NO_IGUAL        shift and go to state 87
    MENOR_QUE       shift and go to state 88
    MENOR_O_IGUAL_QUE shift and go to state 89
    MAYOR_QUE       shift and go to state 90
    MAYOR_O_IGUAL_QUE shift and go to state 91

    operador_condicional           shift and go to state 77

state 126

    (66) asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic BOOL .

    END_OF_LINE     reduce using rule 66 (asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic BOOL .)


state 127

    (67) asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic expresion_condicional .

    END_OF_LINE     reduce using rule 67 (asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic expresion_condicional .)


state 128

    (146) expresion_condicional -> numero . operador_condicional numero
    (149) expresion_condicional -> numero . operador_condicional IDENTIFICADOR
    (48) operador_condicional -> . IGUAL_IGUAL
    (49) operador_condicional -> . NO_IGUAL
    (50) operador_condicional -> . MENOR_QUE
    (51) operador_condicional -> . MENOR_O_IGUAL_QUE
    (52) operador_condicional -> . MAYOR_QUE
    (53) operador_condicional -> . MAYOR_O_IGUAL_QUE

    IGUAL_IGUAL     shift and go to state 86
    NO_IGUAL        shift and go to state 87
    MENOR_QUE       shift and go to state 88
    MENOR_O_IGUAL_QUE shift and go to state 89
    MAYOR_QUE       shift and go to state 90
    MAYOR_O_IGUAL_QUE shift and go to state 91

    operador_condicional           shift and go to state 101

state 129

    (71) asignacionCompuesta_Number -> IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR .
    (144) expresion_operacion_aritmetica -> IDENTIFICADOR . operador_aritmentico numero
    (145) expresion_operacion_aritmetica -> IDENTIFICADOR . operador_aritmentico IDENTIFICADOR
    (43) operador_aritmentico -> . SUMA
    (44) operador_aritmentico -> . RESTA
    (45) operador_aritmentico -> . MULTIPLICACION
    (46) operador_aritmentico -> . DIVISION
    (47) operador_aritmentico -> . MODULO

    END_OF_LINE     reduce using rule 71 (asignacionCompuesta_Number -> IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR .)
    SUMA            shift and go to state 81
    RESTA           shift and go to state 82
    MULTIPLICACION  shift and go to state 83
    DIVISION        shift and go to state 84
    MODULO          shift and go to state 85

    operador_aritmentico           shift and go to state 76

state 130

    (69) asignacionCompuesta_Number -> IDENTIFICADOR operadoresCompuestosNumber numero .
    (142) expresion_operacion_aritmetica -> numero . operador_aritmentico numero
    (143) expresion_operacion_aritmetica -> numero . operador_aritmentico IDENTIFICADOR
    (43) operador_aritmentico -> . SUMA
    (44) operador_aritmentico -> . RESTA
    (45) operador_aritmentico -> . MULTIPLICACION
    (46) operador_aritmentico -> . DIVISION
    (47) operador_aritmentico -> . MODULO

    END_OF_LINE     reduce using rule 69 (asignacionCompuesta_Number -> IDENTIFICADOR operadoresCompuestosNumber numero .)
    SUMA            shift and go to state 81
    RESTA           shift and go to state 82
    MULTIPLICACION  shift and go to state 83
    DIVISION        shift and go to state 84
    MODULO          shift and go to state 85

    operador_aritmentico           shift and go to state 100

state 131

    (70) asignacionCompuesta_Number -> IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica .

    END_OF_LINE     reduce using rule 70 (asignacionCompuesta_Number -> IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica .)


state 132

    (142) expresion_operacion_aritmetica -> numero operador_aritmentico numero .

    END_OF_LINE     reduce using rule 142 (expresion_operacion_aritmetica -> numero operador_aritmentico numero .)
    COMA            reduce using rule 142 (expresion_operacion_aritmetica -> numero operador_aritmentico numero .)
    PAR_DER         reduce using rule 142 (expresion_operacion_aritmetica -> numero operador_aritmentico numero .)


state 133

    (143) expresion_operacion_aritmetica -> numero operador_aritmentico IDENTIFICADOR .

    END_OF_LINE     reduce using rule 143 (expresion_operacion_aritmetica -> numero operador_aritmentico IDENTIFICADOR .)
    COMA            reduce using rule 143 (expresion_operacion_aritmetica -> numero operador_aritmentico IDENTIFICADOR .)
    PAR_DER         reduce using rule 143 (expresion_operacion_aritmetica -> numero operador_aritmentico IDENTIFICADOR .)


state 134

    (146) expresion_condicional -> numero operador_condicional numero .

    END_OF_LINE     reduce using rule 146 (expresion_condicional -> numero operador_condicional numero .)
    COMA            reduce using rule 146 (expresion_condicional -> numero operador_condicional numero .)
    PAR_DER         reduce using rule 146 (expresion_condicional -> numero operador_condicional numero .)


state 135

    (149) expresion_condicional -> numero operador_condicional IDENTIFICADOR .

    END_OF_LINE     reduce using rule 149 (expresion_condicional -> numero operador_condicional IDENTIFICADOR .)
    COMA            reduce using rule 149 (expresion_condicional -> numero operador_condicional IDENTIFICADOR .)
    PAR_DER         reduce using rule 149 (expresion_condicional -> numero operador_condicional IDENTIFICADOR .)


state 136

    (100) switch_case -> SWITCH PAR_IZQ valor . PAR_DER LLAVE_IZQ casos LLAVE_DER

    PAR_DER         shift and go to state 170


state 137

    (113) for -> FOR PAR_IZQ forInicializador . END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DER

    END_OF_LINE     shift and go to state 171


state 138

    (122) forInicializador -> tipoDatoForInicializador . IDENTIFICADOR IGUAL valorForInicializador

    IDENTIFICADOR   shift and go to state 172


state 139

    (123) forInicializador -> IDENTIFICADOR . IGUAL valorForInicializador

    IGUAL           shift and go to state 173


state 140

    (124) tipoDatoForInicializador -> FLOAT_TYPE .

    IDENTIFICADOR   reduce using rule 124 (tipoDatoForInicializador -> FLOAT_TYPE .)


state 141

    (125) tipoDatoForInicializador -> DOUBLE_TYPE .

    IDENTIFICADOR   reduce using rule 125 (tipoDatoForInicializador -> DOUBLE_TYPE .)


state 142

    (126) tipoDatoForInicializador -> INT_TYPE .

    IDENTIFICADOR   reduce using rule 126 (tipoDatoForInicializador -> INT_TYPE .)


state 143

    (133) lista -> LIST tipoLista IDENTIFICADOR . IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINE

    IGUAL           shift and go to state 174


state 144

    (134) tipoLista -> MENOR_QUE valor_tipo_inicializador . MAYOR_QUE

    MAYOR_QUE       shift and go to state 175


state 145

    (27) valor_tipo_inicializador -> FLOAT_TYPE .

    MAYOR_QUE       reduce using rule 27 (valor_tipo_inicializador -> FLOAT_TYPE .)


state 146

    (28) valor_tipo_inicializador -> DOUBLE_TYPE .

    MAYOR_QUE       reduce using rule 28 (valor_tipo_inicializador -> DOUBLE_TYPE .)


state 147

    (29) valor_tipo_inicializador -> STRING_TYPE .

    MAYOR_QUE       reduce using rule 29 (valor_tipo_inicializador -> STRING_TYPE .)


state 148

    (30) valor_tipo_inicializador -> INT_TYPE .

    MAYOR_QUE       reduce using rule 30 (valor_tipo_inicializador -> INT_TYPE .)


state 149

    (31) valor_tipo_inicializador -> BOOL_TYPE .

    MAYOR_QUE       reduce using rule 31 (valor_tipo_inicializador -> BOOL_TYPE .)


state 150

    (32) valor_tipo_inicializador -> CHAR_TYPE .

    MAYOR_QUE       reduce using rule 32 (valor_tipo_inicializador -> CHAR_TYPE .)


state 151

    (33) valor_tipo_inicializador -> IDENTIFICADOR .

    MAYOR_QUE       reduce using rule 33 (valor_tipo_inicializador -> IDENTIFICADOR .)


state 152

    (135) stack -> STACK MENOR_QUE valor_tipo_inicializador . MAYOR_QUE IDENTIFICADOR IGUAL NEW STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINE

    MAYOR_QUE       shift and go to state 176


state 153

    (153) salida_uno -> CONSOLE_WRITELINE PAR_IZQ STRING . PAR_DER
    (54) operacion_string -> STRING . SUMA STRING
    (55) operacion_string -> STRING . SUMA IDENTIFICADOR

    PAR_DER         shift and go to state 177
    SUMA            shift and go to state 178


state 154

    (154) salida_uno -> CONSOLE_WRITELINE PAR_IZQ operacion_string . PAR_DER

    PAR_DER         shift and go to state 179


state 155

    (155) salida_uno -> CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR . PAR_DER
    (56) operacion_string -> IDENTIFICADOR . SUMA STRING
    (57) operacion_string -> IDENTIFICADOR . SUMA IDENTIFICADOR

    PAR_DER         shift and go to state 180
    SUMA            shift and go to state 181


state 156

    (156) salida_dos -> CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA . STRING PAR_DER

    STRING          shift and go to state 182


state 157

    (157) salida_tres -> CONSOLE_READLINE PAR_IZQ PAR_DER .

    END_OF_LINE     reduce using rule 157 (salida_tres -> CONSOLE_READLINE PAR_IZQ PAR_DER .)
    COMA            reduce using rule 157 (salida_tres -> CONSOLE_READLINE PAR_IZQ PAR_DER .)
    PAR_DER         reduce using rule 157 (salida_tres -> CONSOLE_READLINE PAR_IZQ PAR_DER .)


state 158

    (160) funcion_tipo_uno -> modificador_acceso VOID IDENTIFICADOR . PAR_IZQ PAR_DER LLAVE_IZQ body LLAVE_DER
    (161) funcion_tipo_tres -> modificador_acceso VOID IDENTIFICADOR . PAR_IZQ parametrosF PAR_DER LLAVE_IZQ bodyF LLAVE_DER

    PAR_IZQ         shift and go to state 183


state 159

    (88) while_normal -> WHILE PAR_IZQ expresion_condicional . PAR_DER LLAVE_IZQ body_while LLAVE_DER

    PAR_DER         shift and go to state 184


state 160

    (147) expresion_condicional -> IDENTIFICADOR . operador_condicional IDENTIFICADOR
    (148) expresion_condicional -> IDENTIFICADOR . operador_condicional numero
    (48) operador_condicional -> . IGUAL_IGUAL
    (49) operador_condicional -> . NO_IGUAL
    (50) operador_condicional -> . MENOR_QUE
    (51) operador_condicional -> . MENOR_O_IGUAL_QUE
    (52) operador_condicional -> . MAYOR_QUE
    (53) operador_condicional -> . MAYOR_O_IGUAL_QUE

    IGUAL_IGUAL     shift and go to state 86
    NO_IGUAL        shift and go to state 87
    MENOR_QUE       shift and go to state 88
    MENOR_O_IGUAL_QUE shift and go to state 89
    MAYOR_QUE       shift and go to state 90
    MAYOR_O_IGUAL_QUE shift and go to state 91

    operador_condicional           shift and go to state 77

state 161

    (89) while_do -> DO LLAVE_IZQ body_while . LLAVE_DER WHILE PAR_IZQ expresion_condicional PAR_DER END_OF_LINE

    LLAVE_DER       shift and go to state 185


state 162

    (90) body_while -> asignacion . END_OF_LINE
    (95) body_while -> asignacion . END_OF_LINE body_while

    END_OF_LINE     shift and go to state 186


state 163

    (91) body_while -> declaracion . END_OF_LINE
    (96) body_while -> declaracion . END_OF_LINE body_while

    END_OF_LINE     shift and go to state 187


state 164

    (92) body_while -> salida_entrada . END_OF_LINE
    (97) body_while -> salida_entrada . END_OF_LINE body_while

    END_OF_LINE     shift and go to state 188


state 165

    (93) body_while -> BREAK . END_OF_LINE
    (98) body_while -> BREAK . END_OF_LINE body_while

    END_OF_LINE     shift and go to state 189


state 166

    (94) body_while -> CONTINUE . END_OF_LINE
    (99) body_while -> CONTINUE . END_OF_LINE body_while

    END_OF_LINE     shift and go to state 190


state 167

    (61) asignacionSimple -> IDENTIFICADOR . IGUAL valor
    (62) asignacionSimple -> IDENTIFICADOR . IGUAL expresion
    (63) asignacionSimple -> IDENTIFICADOR . IGUAL salida_entrada
    (66) asignacionCompuesta_Logic -> IDENTIFICADOR . operadoresCompuestosLogic BOOL
    (67) asignacionCompuesta_Logic -> IDENTIFICADOR . operadoresCompuestosLogic expresion_condicional
    (68) asignacionCompuesta_Logic -> IDENTIFICADOR . operadoresCompuestosLogic IDENTIFICADOR
    (69) asignacionCompuesta_Number -> IDENTIFICADOR . operadoresCompuestosNumber numero
    (70) asignacionCompuesta_Number -> IDENTIFICADOR . operadoresCompuestosNumber expresion_operacion_aritmetica
    (71) asignacionCompuesta_Number -> IDENTIFICADOR . operadoresCompuestosNumber IDENTIFICADOR
    (77) operadoresCompuestosLogic -> . AND_EQUAL
    (78) operadoresCompuestosLogic -> . OR_EQUAL
    (79) operadoresCompuestosLogic -> . EXC_OREQUAL
    (72) operadoresCompuestosNumber -> . AUMENTADO
    (73) operadoresCompuestosNumber -> . DECREMENTADO
    (74) operadoresCompuestosNumber -> . MULTIPLICADO_POR
    (75) operadoresCompuestosNumber -> . DIVIDIDO_POR
    (76) operadoresCompuestosNumber -> . MODULO_DE

    IGUAL           shift and go to state 75
    AND_EQUAL       shift and go to state 92
    OR_EQUAL        shift and go to state 93
    EXC_OREQUAL     shift and go to state 94
    AUMENTADO       shift and go to state 95
    DECREMENTADO    shift and go to state 96
    MULTIPLICADO_POR shift and go to state 97
    DIVIDIDO_POR    shift and go to state 98
    MODULO_DE       shift and go to state 99

    operadoresCompuestosLogic      shift and go to state 79
    operadoresCompuestosNumber     shift and go to state 80

state 168

    (138) stack_push -> IDENTIFICADOR PUNTO PUSH PAR_IZQ . valor PAR_DER
    (11) valor -> . CHAR
    (12) valor -> . numero
    (13) valor -> . BOOL
    (14) valor -> . STRING
    (15) valor -> . IDENTIFICADOR
    (16) numero -> . FLOAT
    (17) numero -> . DOUBLE
    (18) numero -> . INT

    CHAR            shift and go to state 34
    BOOL            shift and go to state 36
    STRING          shift and go to state 37
    IDENTIFICADOR   shift and go to state 114
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55

    valor                          shift and go to state 191
    numero                         shift and go to state 113

state 169

    (139) stack_pop -> IDENTIFICADOR PUNTO POP PAR_IZQ . PAR_DER

    PAR_DER         shift and go to state 192


state 170

    (100) switch_case -> SWITCH PAR_IZQ valor PAR_DER . LLAVE_IZQ casos LLAVE_DER

    LLAVE_IZQ       shift and go to state 193


state 171

    (113) for -> FOR PAR_IZQ forInicializador END_OF_LINE . forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DER
    (117) forCondicion -> . IDENTIFICADOR operador_condicional valorForCondicion

    IDENTIFICADOR   shift and go to state 195

    forCondicion                   shift and go to state 194

state 172

    (122) forInicializador -> tipoDatoForInicializador IDENTIFICADOR . IGUAL valorForInicializador

    IGUAL           shift and go to state 196


state 173

    (123) forInicializador -> IDENTIFICADOR IGUAL . valorForInicializador
    (127) valorForInicializador -> . FLOAT
    (128) valorForInicializador -> . DOUBLE
    (129) valorForInicializador -> . INT
    (130) valorForInicializador -> . IDENTIFICADOR

    FLOAT           shift and go to state 199
    DOUBLE          shift and go to state 200
    INT             shift and go to state 201
    IDENTIFICADOR   shift and go to state 197

    valorForInicializador          shift and go to state 198

state 174

    (133) lista -> LIST tipoLista IDENTIFICADOR IGUAL . NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINE

    NEW             shift and go to state 202


state 175

    (134) tipoLista -> MENOR_QUE valor_tipo_inicializador MAYOR_QUE .

    IDENTIFICADOR   reduce using rule 134 (tipoLista -> MENOR_QUE valor_tipo_inicializador MAYOR_QUE .)
    PAR_IZQ         reduce using rule 134 (tipoLista -> MENOR_QUE valor_tipo_inicializador MAYOR_QUE .)


state 176

    (135) stack -> STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE . IDENTIFICADOR IGUAL NEW STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINE

    IDENTIFICADOR   shift and go to state 203


state 177

    (153) salida_uno -> CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER .

    END_OF_LINE     reduce using rule 153 (salida_uno -> CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER .)
    COMA            reduce using rule 153 (salida_uno -> CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER .)
    PAR_DER         reduce using rule 153 (salida_uno -> CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER .)


state 178

    (54) operacion_string -> STRING SUMA . STRING
    (55) operacion_string -> STRING SUMA . IDENTIFICADOR

    STRING          shift and go to state 204
    IDENTIFICADOR   shift and go to state 205


state 179

    (154) salida_uno -> CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER .

    END_OF_LINE     reduce using rule 154 (salida_uno -> CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER .)
    COMA            reduce using rule 154 (salida_uno -> CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER .)
    PAR_DER         reduce using rule 154 (salida_uno -> CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER .)


state 180

    (155) salida_uno -> CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER .

    END_OF_LINE     reduce using rule 155 (salida_uno -> CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER .)
    COMA            reduce using rule 155 (salida_uno -> CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER .)
    PAR_DER         reduce using rule 155 (salida_uno -> CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER .)


state 181

    (56) operacion_string -> IDENTIFICADOR SUMA . STRING
    (57) operacion_string -> IDENTIFICADOR SUMA . IDENTIFICADOR

    STRING          shift and go to state 207
    IDENTIFICADOR   shift and go to state 206


state 182

    (156) salida_dos -> CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING . PAR_DER

    PAR_DER         shift and go to state 208


state 183

    (160) funcion_tipo_uno -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ . PAR_DER LLAVE_IZQ body LLAVE_DER
    (161) funcion_tipo_tres -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ . parametrosF PAR_DER LLAVE_IZQ bodyF LLAVE_DER
    (162) parametrosF -> . declaracion
    (163) parametrosF -> . declaracion COMA parametrosF
    (80) declaracion -> . valor_tipo IDENTIFICADOR
    (81) declaracion -> . valor_tipo asignacionSimple
    (21) valor_tipo -> . CHAR_TYPE
    (22) valor_tipo -> . FLOAT_TYPE
    (23) valor_tipo -> . DOUBLE_TYPE
    (24) valor_tipo -> . INT_TYPE
    (25) valor_tipo -> . BOOL_TYPE
    (26) valor_tipo -> . STRING_TYPE

    PAR_DER         shift and go to state 209
    CHAR_TYPE       shift and go to state 47
    FLOAT_TYPE      shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    INT_TYPE        shift and go to state 50
    BOOL_TYPE       shift and go to state 51
    STRING_TYPE     shift and go to state 52

    parametrosF                    shift and go to state 210
    declaracion                    shift and go to state 211
    valor_tipo                     shift and go to state 28

state 184

    (88) while_normal -> WHILE PAR_IZQ expresion_condicional PAR_DER . LLAVE_IZQ body_while LLAVE_DER

    LLAVE_IZQ       shift and go to state 212


state 185

    (89) while_do -> DO LLAVE_IZQ body_while LLAVE_DER . WHILE PAR_IZQ expresion_condicional PAR_DER END_OF_LINE

    WHILE           shift and go to state 213


state 186

    (90) body_while -> asignacion END_OF_LINE .
    (95) body_while -> asignacion END_OF_LINE . body_while
    (90) body_while -> . asignacion END_OF_LINE
    (91) body_while -> . declaracion END_OF_LINE
    (92) body_while -> . salida_entrada END_OF_LINE
    (93) body_while -> . BREAK END_OF_LINE
    (94) body_while -> . CONTINUE END_OF_LINE
    (95) body_while -> . asignacion END_OF_LINE body_while
    (96) body_while -> . declaracion END_OF_LINE body_while
    (97) body_while -> . salida_entrada END_OF_LINE body_while
    (98) body_while -> . BREAK END_OF_LINE body_while
    (99) body_while -> . CONTINUE END_OF_LINE body_while
    (59) asignacion -> . asignacionSimple
    (60) asignacion -> . asignacionCompuesta
    (80) declaracion -> . valor_tipo IDENTIFICADOR
    (81) declaracion -> . valor_tipo asignacionSimple
    (150) salida_entrada -> . salida_uno
    (151) salida_entrada -> . salida_dos
    (152) salida_entrada -> . salida_tres
    (61) asignacionSimple -> . IDENTIFICADOR IGUAL valor
    (62) asignacionSimple -> . IDENTIFICADOR IGUAL expresion
    (63) asignacionSimple -> . IDENTIFICADOR IGUAL salida_entrada
    (64) asignacionCompuesta -> . asignacionCompuesta_Logic
    (65) asignacionCompuesta -> . asignacionCompuesta_Number
    (21) valor_tipo -> . CHAR_TYPE
    (22) valor_tipo -> . FLOAT_TYPE
    (23) valor_tipo -> . DOUBLE_TYPE
    (24) valor_tipo -> . INT_TYPE
    (25) valor_tipo -> . BOOL_TYPE
    (26) valor_tipo -> . STRING_TYPE
    (153) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER
    (154) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER
    (155) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER
    (156) salida_dos -> . CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER
    (157) salida_tres -> . CONSOLE_READLINE PAR_IZQ PAR_DER
    (66) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic BOOL
    (67) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic expresion_condicional
    (68) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR
    (69) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber numero
    (70) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica
    (71) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR

    LLAVE_DER       reduce using rule 90 (body_while -> asignacion END_OF_LINE .)
    BREAK           shift and go to state 165
    CONTINUE        shift and go to state 166
    IDENTIFICADOR   shift and go to state 167
    CHAR_TYPE       shift and go to state 47
    FLOAT_TYPE      shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    INT_TYPE        shift and go to state 50
    BOOL_TYPE       shift and go to state 51
    STRING_TYPE     shift and go to state 52
    CONSOLE_WRITELINE shift and go to state 44
    CONSOLE_READLINE shift and go to state 45

    asignacion                     shift and go to state 162
    body_while                     shift and go to state 214
    declaracion                    shift and go to state 163
    salida_entrada                 shift and go to state 164
    asignacionSimple               shift and go to state 13
    asignacionCompuesta            shift and go to state 14
    valor_tipo                     shift and go to state 28
    salida_uno                     shift and go to state 23
    salida_dos                     shift and go to state 24
    salida_tres                    shift and go to state 25
    asignacionCompuesta_Logic      shift and go to state 32
    asignacionCompuesta_Number     shift and go to state 33

state 187

    (91) body_while -> declaracion END_OF_LINE .
    (96) body_while -> declaracion END_OF_LINE . body_while
    (90) body_while -> . asignacion END_OF_LINE
    (91) body_while -> . declaracion END_OF_LINE
    (92) body_while -> . salida_entrada END_OF_LINE
    (93) body_while -> . BREAK END_OF_LINE
    (94) body_while -> . CONTINUE END_OF_LINE
    (95) body_while -> . asignacion END_OF_LINE body_while
    (96) body_while -> . declaracion END_OF_LINE body_while
    (97) body_while -> . salida_entrada END_OF_LINE body_while
    (98) body_while -> . BREAK END_OF_LINE body_while
    (99) body_while -> . CONTINUE END_OF_LINE body_while
    (59) asignacion -> . asignacionSimple
    (60) asignacion -> . asignacionCompuesta
    (80) declaracion -> . valor_tipo IDENTIFICADOR
    (81) declaracion -> . valor_tipo asignacionSimple
    (150) salida_entrada -> . salida_uno
    (151) salida_entrada -> . salida_dos
    (152) salida_entrada -> . salida_tres
    (61) asignacionSimple -> . IDENTIFICADOR IGUAL valor
    (62) asignacionSimple -> . IDENTIFICADOR IGUAL expresion
    (63) asignacionSimple -> . IDENTIFICADOR IGUAL salida_entrada
    (64) asignacionCompuesta -> . asignacionCompuesta_Logic
    (65) asignacionCompuesta -> . asignacionCompuesta_Number
    (21) valor_tipo -> . CHAR_TYPE
    (22) valor_tipo -> . FLOAT_TYPE
    (23) valor_tipo -> . DOUBLE_TYPE
    (24) valor_tipo -> . INT_TYPE
    (25) valor_tipo -> . BOOL_TYPE
    (26) valor_tipo -> . STRING_TYPE
    (153) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER
    (154) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER
    (155) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER
    (156) salida_dos -> . CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER
    (157) salida_tres -> . CONSOLE_READLINE PAR_IZQ PAR_DER
    (66) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic BOOL
    (67) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic expresion_condicional
    (68) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR
    (69) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber numero
    (70) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica
    (71) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR

    LLAVE_DER       reduce using rule 91 (body_while -> declaracion END_OF_LINE .)
    BREAK           shift and go to state 165
    CONTINUE        shift and go to state 166
    IDENTIFICADOR   shift and go to state 167
    CHAR_TYPE       shift and go to state 47
    FLOAT_TYPE      shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    INT_TYPE        shift and go to state 50
    BOOL_TYPE       shift and go to state 51
    STRING_TYPE     shift and go to state 52
    CONSOLE_WRITELINE shift and go to state 44
    CONSOLE_READLINE shift and go to state 45

    declaracion                    shift and go to state 163
    body_while                     shift and go to state 215
    asignacion                     shift and go to state 162
    salida_entrada                 shift and go to state 164
    asignacionSimple               shift and go to state 13
    asignacionCompuesta            shift and go to state 14
    valor_tipo                     shift and go to state 28
    salida_uno                     shift and go to state 23
    salida_dos                     shift and go to state 24
    salida_tres                    shift and go to state 25
    asignacionCompuesta_Logic      shift and go to state 32
    asignacionCompuesta_Number     shift and go to state 33

state 188

    (92) body_while -> salida_entrada END_OF_LINE .
    (97) body_while -> salida_entrada END_OF_LINE . body_while
    (90) body_while -> . asignacion END_OF_LINE
    (91) body_while -> . declaracion END_OF_LINE
    (92) body_while -> . salida_entrada END_OF_LINE
    (93) body_while -> . BREAK END_OF_LINE
    (94) body_while -> . CONTINUE END_OF_LINE
    (95) body_while -> . asignacion END_OF_LINE body_while
    (96) body_while -> . declaracion END_OF_LINE body_while
    (97) body_while -> . salida_entrada END_OF_LINE body_while
    (98) body_while -> . BREAK END_OF_LINE body_while
    (99) body_while -> . CONTINUE END_OF_LINE body_while
    (59) asignacion -> . asignacionSimple
    (60) asignacion -> . asignacionCompuesta
    (80) declaracion -> . valor_tipo IDENTIFICADOR
    (81) declaracion -> . valor_tipo asignacionSimple
    (150) salida_entrada -> . salida_uno
    (151) salida_entrada -> . salida_dos
    (152) salida_entrada -> . salida_tres
    (61) asignacionSimple -> . IDENTIFICADOR IGUAL valor
    (62) asignacionSimple -> . IDENTIFICADOR IGUAL expresion
    (63) asignacionSimple -> . IDENTIFICADOR IGUAL salida_entrada
    (64) asignacionCompuesta -> . asignacionCompuesta_Logic
    (65) asignacionCompuesta -> . asignacionCompuesta_Number
    (21) valor_tipo -> . CHAR_TYPE
    (22) valor_tipo -> . FLOAT_TYPE
    (23) valor_tipo -> . DOUBLE_TYPE
    (24) valor_tipo -> . INT_TYPE
    (25) valor_tipo -> . BOOL_TYPE
    (26) valor_tipo -> . STRING_TYPE
    (153) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER
    (154) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER
    (155) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER
    (156) salida_dos -> . CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER
    (157) salida_tres -> . CONSOLE_READLINE PAR_IZQ PAR_DER
    (66) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic BOOL
    (67) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic expresion_condicional
    (68) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR
    (69) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber numero
    (70) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica
    (71) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR

    LLAVE_DER       reduce using rule 92 (body_while -> salida_entrada END_OF_LINE .)
    BREAK           shift and go to state 165
    CONTINUE        shift and go to state 166
    IDENTIFICADOR   shift and go to state 167
    CHAR_TYPE       shift and go to state 47
    FLOAT_TYPE      shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    INT_TYPE        shift and go to state 50
    BOOL_TYPE       shift and go to state 51
    STRING_TYPE     shift and go to state 52
    CONSOLE_WRITELINE shift and go to state 44
    CONSOLE_READLINE shift and go to state 45

    salida_entrada                 shift and go to state 164
    body_while                     shift and go to state 216
    asignacion                     shift and go to state 162
    declaracion                    shift and go to state 163
    asignacionSimple               shift and go to state 13
    asignacionCompuesta            shift and go to state 14
    valor_tipo                     shift and go to state 28
    salida_uno                     shift and go to state 23
    salida_dos                     shift and go to state 24
    salida_tres                    shift and go to state 25
    asignacionCompuesta_Logic      shift and go to state 32
    asignacionCompuesta_Number     shift and go to state 33

state 189

    (93) body_while -> BREAK END_OF_LINE .
    (98) body_while -> BREAK END_OF_LINE . body_while
    (90) body_while -> . asignacion END_OF_LINE
    (91) body_while -> . declaracion END_OF_LINE
    (92) body_while -> . salida_entrada END_OF_LINE
    (93) body_while -> . BREAK END_OF_LINE
    (94) body_while -> . CONTINUE END_OF_LINE
    (95) body_while -> . asignacion END_OF_LINE body_while
    (96) body_while -> . declaracion END_OF_LINE body_while
    (97) body_while -> . salida_entrada END_OF_LINE body_while
    (98) body_while -> . BREAK END_OF_LINE body_while
    (99) body_while -> . CONTINUE END_OF_LINE body_while
    (59) asignacion -> . asignacionSimple
    (60) asignacion -> . asignacionCompuesta
    (80) declaracion -> . valor_tipo IDENTIFICADOR
    (81) declaracion -> . valor_tipo asignacionSimple
    (150) salida_entrada -> . salida_uno
    (151) salida_entrada -> . salida_dos
    (152) salida_entrada -> . salida_tres
    (61) asignacionSimple -> . IDENTIFICADOR IGUAL valor
    (62) asignacionSimple -> . IDENTIFICADOR IGUAL expresion
    (63) asignacionSimple -> . IDENTIFICADOR IGUAL salida_entrada
    (64) asignacionCompuesta -> . asignacionCompuesta_Logic
    (65) asignacionCompuesta -> . asignacionCompuesta_Number
    (21) valor_tipo -> . CHAR_TYPE
    (22) valor_tipo -> . FLOAT_TYPE
    (23) valor_tipo -> . DOUBLE_TYPE
    (24) valor_tipo -> . INT_TYPE
    (25) valor_tipo -> . BOOL_TYPE
    (26) valor_tipo -> . STRING_TYPE
    (153) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER
    (154) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER
    (155) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER
    (156) salida_dos -> . CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER
    (157) salida_tres -> . CONSOLE_READLINE PAR_IZQ PAR_DER
    (66) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic BOOL
    (67) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic expresion_condicional
    (68) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR
    (69) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber numero
    (70) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica
    (71) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR

    LLAVE_DER       reduce using rule 93 (body_while -> BREAK END_OF_LINE .)
    BREAK           shift and go to state 165
    CONTINUE        shift and go to state 166
    IDENTIFICADOR   shift and go to state 167
    CHAR_TYPE       shift and go to state 47
    FLOAT_TYPE      shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    INT_TYPE        shift and go to state 50
    BOOL_TYPE       shift and go to state 51
    STRING_TYPE     shift and go to state 52
    CONSOLE_WRITELINE shift and go to state 44
    CONSOLE_READLINE shift and go to state 45

    body_while                     shift and go to state 217
    asignacion                     shift and go to state 162
    declaracion                    shift and go to state 163
    salida_entrada                 shift and go to state 164
    asignacionSimple               shift and go to state 13
    asignacionCompuesta            shift and go to state 14
    valor_tipo                     shift and go to state 28
    salida_uno                     shift and go to state 23
    salida_dos                     shift and go to state 24
    salida_tres                    shift and go to state 25
    asignacionCompuesta_Logic      shift and go to state 32
    asignacionCompuesta_Number     shift and go to state 33

state 190

    (94) body_while -> CONTINUE END_OF_LINE .
    (99) body_while -> CONTINUE END_OF_LINE . body_while
    (90) body_while -> . asignacion END_OF_LINE
    (91) body_while -> . declaracion END_OF_LINE
    (92) body_while -> . salida_entrada END_OF_LINE
    (93) body_while -> . BREAK END_OF_LINE
    (94) body_while -> . CONTINUE END_OF_LINE
    (95) body_while -> . asignacion END_OF_LINE body_while
    (96) body_while -> . declaracion END_OF_LINE body_while
    (97) body_while -> . salida_entrada END_OF_LINE body_while
    (98) body_while -> . BREAK END_OF_LINE body_while
    (99) body_while -> . CONTINUE END_OF_LINE body_while
    (59) asignacion -> . asignacionSimple
    (60) asignacion -> . asignacionCompuesta
    (80) declaracion -> . valor_tipo IDENTIFICADOR
    (81) declaracion -> . valor_tipo asignacionSimple
    (150) salida_entrada -> . salida_uno
    (151) salida_entrada -> . salida_dos
    (152) salida_entrada -> . salida_tres
    (61) asignacionSimple -> . IDENTIFICADOR IGUAL valor
    (62) asignacionSimple -> . IDENTIFICADOR IGUAL expresion
    (63) asignacionSimple -> . IDENTIFICADOR IGUAL salida_entrada
    (64) asignacionCompuesta -> . asignacionCompuesta_Logic
    (65) asignacionCompuesta -> . asignacionCompuesta_Number
    (21) valor_tipo -> . CHAR_TYPE
    (22) valor_tipo -> . FLOAT_TYPE
    (23) valor_tipo -> . DOUBLE_TYPE
    (24) valor_tipo -> . INT_TYPE
    (25) valor_tipo -> . BOOL_TYPE
    (26) valor_tipo -> . STRING_TYPE
    (153) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER
    (154) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER
    (155) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER
    (156) salida_dos -> . CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER
    (157) salida_tres -> . CONSOLE_READLINE PAR_IZQ PAR_DER
    (66) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic BOOL
    (67) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic expresion_condicional
    (68) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR
    (69) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber numero
    (70) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica
    (71) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR

    LLAVE_DER       reduce using rule 94 (body_while -> CONTINUE END_OF_LINE .)
    BREAK           shift and go to state 165
    CONTINUE        shift and go to state 166
    IDENTIFICADOR   shift and go to state 167
    CHAR_TYPE       shift and go to state 47
    FLOAT_TYPE      shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    INT_TYPE        shift and go to state 50
    BOOL_TYPE       shift and go to state 51
    STRING_TYPE     shift and go to state 52
    CONSOLE_WRITELINE shift and go to state 44
    CONSOLE_READLINE shift and go to state 45

    body_while                     shift and go to state 218
    asignacion                     shift and go to state 162
    declaracion                    shift and go to state 163
    salida_entrada                 shift and go to state 164
    asignacionSimple               shift and go to state 13
    asignacionCompuesta            shift and go to state 14
    valor_tipo                     shift and go to state 28
    salida_uno                     shift and go to state 23
    salida_dos                     shift and go to state 24
    salida_tres                    shift and go to state 25
    asignacionCompuesta_Logic      shift and go to state 32
    asignacionCompuesta_Number     shift and go to state 33

state 191

    (138) stack_push -> IDENTIFICADOR PUNTO PUSH PAR_IZQ valor . PAR_DER

    PAR_DER         shift and go to state 219


state 192

    (139) stack_pop -> IDENTIFICADOR PUNTO POP PAR_IZQ PAR_DER .

    END_OF_LINE     reduce using rule 139 (stack_pop -> IDENTIFICADOR PUNTO POP PAR_IZQ PAR_DER .)


state 193

    (100) switch_case -> SWITCH PAR_IZQ valor PAR_DER LLAVE_IZQ . casos LLAVE_DER
    (101) casos -> . CASE valor DOS_PUNTOS body_case BREAK END_OF_LINE
    (102) casos -> . CASE valor DOS_PUNTOS BREAK END_OF_LINE
    (103) casos -> . CASE valor DOS_PUNTOS body_case BREAK END_OF_LINE casos
    (104) casos -> . CASE valor DOS_PUNTOS BREAK END_OF_LINE casos

    CASE            shift and go to state 221

    casos                          shift and go to state 220

state 194

    (113) for -> FOR PAR_IZQ forInicializador END_OF_LINE forCondicion . END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DER

    END_OF_LINE     shift and go to state 222


state 195

    (117) forCondicion -> IDENTIFICADOR . operador_condicional valorForCondicion
    (48) operador_condicional -> . IGUAL_IGUAL
    (49) operador_condicional -> . NO_IGUAL
    (50) operador_condicional -> . MENOR_QUE
    (51) operador_condicional -> . MENOR_O_IGUAL_QUE
    (52) operador_condicional -> . MAYOR_QUE
    (53) operador_condicional -> . MAYOR_O_IGUAL_QUE

    IGUAL_IGUAL     shift and go to state 86
    NO_IGUAL        shift and go to state 87
    MENOR_QUE       shift and go to state 88
    MENOR_O_IGUAL_QUE shift and go to state 89
    MAYOR_QUE       shift and go to state 90
    MAYOR_O_IGUAL_QUE shift and go to state 91

    operador_condicional           shift and go to state 223

state 196

    (122) forInicializador -> tipoDatoForInicializador IDENTIFICADOR IGUAL . valorForInicializador
    (127) valorForInicializador -> . FLOAT
    (128) valorForInicializador -> . DOUBLE
    (129) valorForInicializador -> . INT
    (130) valorForInicializador -> . IDENTIFICADOR

    FLOAT           shift and go to state 199
    DOUBLE          shift and go to state 200
    INT             shift and go to state 201
    IDENTIFICADOR   shift and go to state 197

    valorForInicializador          shift and go to state 224

state 197

    (130) valorForInicializador -> IDENTIFICADOR .

    END_OF_LINE     reduce using rule 130 (valorForInicializador -> IDENTIFICADOR .)


state 198

    (123) forInicializador -> IDENTIFICADOR IGUAL valorForInicializador .

    END_OF_LINE     reduce using rule 123 (forInicializador -> IDENTIFICADOR IGUAL valorForInicializador .)


state 199

    (127) valorForInicializador -> FLOAT .

    END_OF_LINE     reduce using rule 127 (valorForInicializador -> FLOAT .)


state 200

    (128) valorForInicializador -> DOUBLE .

    END_OF_LINE     reduce using rule 128 (valorForInicializador -> DOUBLE .)


state 201

    (129) valorForInicializador -> INT .

    END_OF_LINE     reduce using rule 129 (valorForInicializador -> INT .)


state 202

    (133) lista -> LIST tipoLista IDENTIFICADOR IGUAL NEW . LIST tipoLista PAR_IZQ PAR_DER END_OF_LINE

    LIST            shift and go to state 225


state 203

    (135) stack -> STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR . IGUAL NEW STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINE

    IGUAL           shift and go to state 226


state 204

    (54) operacion_string -> STRING SUMA STRING .

    PAR_DER         reduce using rule 54 (operacion_string -> STRING SUMA STRING .)


state 205

    (55) operacion_string -> STRING SUMA IDENTIFICADOR .

    PAR_DER         reduce using rule 55 (operacion_string -> STRING SUMA IDENTIFICADOR .)


state 206

    (57) operacion_string -> IDENTIFICADOR SUMA IDENTIFICADOR .

    PAR_DER         reduce using rule 57 (operacion_string -> IDENTIFICADOR SUMA IDENTIFICADOR .)


state 207

    (56) operacion_string -> IDENTIFICADOR SUMA STRING .

    PAR_DER         reduce using rule 56 (operacion_string -> IDENTIFICADOR SUMA STRING .)


state 208

    (156) salida_dos -> CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER .

    END_OF_LINE     reduce using rule 156 (salida_dos -> CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER .)
    COMA            reduce using rule 156 (salida_dos -> CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER .)
    PAR_DER         reduce using rule 156 (salida_dos -> CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER .)


state 209

    (160) funcion_tipo_uno -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ PAR_DER . LLAVE_IZQ body LLAVE_DER

    LLAVE_IZQ       shift and go to state 227


state 210

    (161) funcion_tipo_tres -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ parametrosF . PAR_DER LLAVE_IZQ bodyF LLAVE_DER

    PAR_DER         shift and go to state 228


state 211

    (162) parametrosF -> declaracion .
    (163) parametrosF -> declaracion . COMA parametrosF

    PAR_DER         reduce using rule 162 (parametrosF -> declaracion .)
    COMA            shift and go to state 229


state 212

    (88) while_normal -> WHILE PAR_IZQ expresion_condicional PAR_DER LLAVE_IZQ . body_while LLAVE_DER
    (90) body_while -> . asignacion END_OF_LINE
    (91) body_while -> . declaracion END_OF_LINE
    (92) body_while -> . salida_entrada END_OF_LINE
    (93) body_while -> . BREAK END_OF_LINE
    (94) body_while -> . CONTINUE END_OF_LINE
    (95) body_while -> . asignacion END_OF_LINE body_while
    (96) body_while -> . declaracion END_OF_LINE body_while
    (97) body_while -> . salida_entrada END_OF_LINE body_while
    (98) body_while -> . BREAK END_OF_LINE body_while
    (99) body_while -> . CONTINUE END_OF_LINE body_while
    (59) asignacion -> . asignacionSimple
    (60) asignacion -> . asignacionCompuesta
    (80) declaracion -> . valor_tipo IDENTIFICADOR
    (81) declaracion -> . valor_tipo asignacionSimple
    (150) salida_entrada -> . salida_uno
    (151) salida_entrada -> . salida_dos
    (152) salida_entrada -> . salida_tres
    (61) asignacionSimple -> . IDENTIFICADOR IGUAL valor
    (62) asignacionSimple -> . IDENTIFICADOR IGUAL expresion
    (63) asignacionSimple -> . IDENTIFICADOR IGUAL salida_entrada
    (64) asignacionCompuesta -> . asignacionCompuesta_Logic
    (65) asignacionCompuesta -> . asignacionCompuesta_Number
    (21) valor_tipo -> . CHAR_TYPE
    (22) valor_tipo -> . FLOAT_TYPE
    (23) valor_tipo -> . DOUBLE_TYPE
    (24) valor_tipo -> . INT_TYPE
    (25) valor_tipo -> . BOOL_TYPE
    (26) valor_tipo -> . STRING_TYPE
    (153) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER
    (154) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER
    (155) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER
    (156) salida_dos -> . CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER
    (157) salida_tres -> . CONSOLE_READLINE PAR_IZQ PAR_DER
    (66) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic BOOL
    (67) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic expresion_condicional
    (68) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR
    (69) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber numero
    (70) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica
    (71) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR

    BREAK           shift and go to state 165
    CONTINUE        shift and go to state 166
    IDENTIFICADOR   shift and go to state 167
    CHAR_TYPE       shift and go to state 47
    FLOAT_TYPE      shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    INT_TYPE        shift and go to state 50
    BOOL_TYPE       shift and go to state 51
    STRING_TYPE     shift and go to state 52
    CONSOLE_WRITELINE shift and go to state 44
    CONSOLE_READLINE shift and go to state 45

    body_while                     shift and go to state 230
    asignacion                     shift and go to state 162
    declaracion                    shift and go to state 163
    salida_entrada                 shift and go to state 164
    asignacionSimple               shift and go to state 13
    asignacionCompuesta            shift and go to state 14
    valor_tipo                     shift and go to state 28
    salida_uno                     shift and go to state 23
    salida_dos                     shift and go to state 24
    salida_tres                    shift and go to state 25
    asignacionCompuesta_Logic      shift and go to state 32
    asignacionCompuesta_Number     shift and go to state 33

state 213

    (89) while_do -> DO LLAVE_IZQ body_while LLAVE_DER WHILE . PAR_IZQ expresion_condicional PAR_DER END_OF_LINE

    PAR_IZQ         shift and go to state 231


state 214

    (95) body_while -> asignacion END_OF_LINE body_while .

    LLAVE_DER       reduce using rule 95 (body_while -> asignacion END_OF_LINE body_while .)


state 215

    (96) body_while -> declaracion END_OF_LINE body_while .

    LLAVE_DER       reduce using rule 96 (body_while -> declaracion END_OF_LINE body_while .)


state 216

    (97) body_while -> salida_entrada END_OF_LINE body_while .

    LLAVE_DER       reduce using rule 97 (body_while -> salida_entrada END_OF_LINE body_while .)


state 217

    (98) body_while -> BREAK END_OF_LINE body_while .

    LLAVE_DER       reduce using rule 98 (body_while -> BREAK END_OF_LINE body_while .)


state 218

    (99) body_while -> CONTINUE END_OF_LINE body_while .

    LLAVE_DER       reduce using rule 99 (body_while -> CONTINUE END_OF_LINE body_while .)


state 219

    (138) stack_push -> IDENTIFICADOR PUNTO PUSH PAR_IZQ valor PAR_DER .

    END_OF_LINE     reduce using rule 138 (stack_push -> IDENTIFICADOR PUNTO PUSH PAR_IZQ valor PAR_DER .)


state 220

    (100) switch_case -> SWITCH PAR_IZQ valor PAR_DER LLAVE_IZQ casos . LLAVE_DER

    LLAVE_DER       shift and go to state 232


state 221

    (101) casos -> CASE . valor DOS_PUNTOS body_case BREAK END_OF_LINE
    (102) casos -> CASE . valor DOS_PUNTOS BREAK END_OF_LINE
    (103) casos -> CASE . valor DOS_PUNTOS body_case BREAK END_OF_LINE casos
    (104) casos -> CASE . valor DOS_PUNTOS BREAK END_OF_LINE casos
    (11) valor -> . CHAR
    (12) valor -> . numero
    (13) valor -> . BOOL
    (14) valor -> . STRING
    (15) valor -> . IDENTIFICADOR
    (16) numero -> . FLOAT
    (17) numero -> . DOUBLE
    (18) numero -> . INT

    CHAR            shift and go to state 34
    BOOL            shift and go to state 36
    STRING          shift and go to state 37
    IDENTIFICADOR   shift and go to state 114
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55

    valor                          shift and go to state 233
    numero                         shift and go to state 113

state 222

    (113) for -> FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE . forIterador PAR_DER LLAVE_IZQ body LLAVE_DER
    (114) forIterador -> . IDENTIFICADOR operadorForIteracion

    IDENTIFICADOR   shift and go to state 235

    forIterador                    shift and go to state 234

state 223

    (117) forCondicion -> IDENTIFICADOR operador_condicional . valorForCondicion
    (118) valorForCondicion -> . FLOAT
    (119) valorForCondicion -> . DOUBLE
    (120) valorForCondicion -> . INT
    (121) valorForCondicion -> . IDENTIFICADOR

    FLOAT           shift and go to state 238
    DOUBLE          shift and go to state 239
    INT             shift and go to state 240
    IDENTIFICADOR   shift and go to state 236

    valorForCondicion              shift and go to state 237

state 224

    (122) forInicializador -> tipoDatoForInicializador IDENTIFICADOR IGUAL valorForInicializador .

    END_OF_LINE     reduce using rule 122 (forInicializador -> tipoDatoForInicializador IDENTIFICADOR IGUAL valorForInicializador .)


state 225

    (133) lista -> LIST tipoLista IDENTIFICADOR IGUAL NEW LIST . tipoLista PAR_IZQ PAR_DER END_OF_LINE
    (134) tipoLista -> . MENOR_QUE valor_tipo_inicializador MAYOR_QUE

    MENOR_QUE       shift and go to state 105

    tipoLista                      shift and go to state 241

state 226

    (135) stack -> STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL . NEW STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINE

    NEW             shift and go to state 242


state 227

    (160) funcion_tipo_uno -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ . body LLAVE_DER
    (1) body -> . asignacion END_OF_LINE
    (2) body -> . comparacion
    (3) body -> . estructura_control
    (4) body -> . estructura_datos
    (5) body -> . expresion END_OF_LINE
    (6) body -> . salida_entrada END_OF_LINE
    (7) body -> . funcion
    (8) body -> . declaracion END_OF_LINE
    (9) body -> . empty
    (10) body -> . funciones_estructura_datos END_OF_LINE
    (59) asignacion -> . asignacionSimple
    (60) asignacion -> . asignacionCompuesta
    (82) comparacion -> . valor operador_realacional valor
    (83) estructura_control -> . while
    (84) estructura_control -> . switch_case
    (85) estructura_control -> . for
    (131) estructura_datos -> . lista
    (132) estructura_datos -> . stack
    (140) expresion -> . expresion_operacion_aritmetica
    (141) expresion -> . expresion_condicional
    (150) salida_entrada -> . salida_uno
    (151) salida_entrada -> . salida_dos
    (152) salida_entrada -> . salida_tres
    (158) funcion -> . funcion_tipo_uno
    (159) funcion -> . funcion_tipo_tres
    (80) declaracion -> . valor_tipo IDENTIFICADOR
    (81) declaracion -> . valor_tipo asignacionSimple
    (58) empty -> . END_OF_LINE
    (136) funciones_estructura_datos -> . stack_push
    (137) funciones_estructura_datos -> . stack_pop
    (61) asignacionSimple -> . IDENTIFICADOR IGUAL valor
    (62) asignacionSimple -> . IDENTIFICADOR IGUAL expresion
    (63) asignacionSimple -> . IDENTIFICADOR IGUAL salida_entrada
    (64) asignacionCompuesta -> . asignacionCompuesta_Logic
    (65) asignacionCompuesta -> . asignacionCompuesta_Number
    (11) valor -> . CHAR
    (12) valor -> . numero
    (13) valor -> . BOOL
    (14) valor -> . STRING
    (15) valor -> . IDENTIFICADOR
    (86) while -> . while_normal
    (87) while -> . while_do
    (100) switch_case -> . SWITCH PAR_IZQ valor PAR_DER LLAVE_IZQ casos LLAVE_DER
    (113) for -> . FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DER
    (133) lista -> . LIST tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINE
    (135) stack -> . STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL NEW STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINE
    (142) expresion_operacion_aritmetica -> . numero operador_aritmentico numero
    (143) expresion_operacion_aritmetica -> . numero operador_aritmentico IDENTIFICADOR
    (144) expresion_operacion_aritmetica -> . IDENTIFICADOR operador_aritmentico numero
    (145) expresion_operacion_aritmetica -> . IDENTIFICADOR operador_aritmentico IDENTIFICADOR
    (146) expresion_condicional -> . numero operador_condicional numero
    (147) expresion_condicional -> . IDENTIFICADOR operador_condicional IDENTIFICADOR
    (148) expresion_condicional -> . IDENTIFICADOR operador_condicional numero
    (149) expresion_condicional -> . numero operador_condicional IDENTIFICADOR
    (153) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER
    (154) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER
    (155) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER
    (156) salida_dos -> . CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER
    (157) salida_tres -> . CONSOLE_READLINE PAR_IZQ PAR_DER
    (160) funcion_tipo_uno -> . modificador_acceso VOID IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ body LLAVE_DER
    (161) funcion_tipo_tres -> . modificador_acceso VOID IDENTIFICADOR PAR_IZQ parametrosF PAR_DER LLAVE_IZQ bodyF LLAVE_DER
    (21) valor_tipo -> . CHAR_TYPE
    (22) valor_tipo -> . FLOAT_TYPE
    (23) valor_tipo -> . DOUBLE_TYPE
    (24) valor_tipo -> . INT_TYPE
    (25) valor_tipo -> . BOOL_TYPE
    (26) valor_tipo -> . STRING_TYPE
    (138) stack_push -> . IDENTIFICADOR PUNTO PUSH PAR_IZQ valor PAR_DER
    (139) stack_pop -> . IDENTIFICADOR PUNTO POP PAR_IZQ PAR_DER
    (66) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic BOOL
    (67) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic expresion_condicional
    (68) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR
    (69) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber numero
    (70) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica
    (71) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR
    (16) numero -> . FLOAT
    (17) numero -> . DOUBLE
    (18) numero -> . INT
    (88) while_normal -> . WHILE PAR_IZQ expresion_condicional PAR_DER LLAVE_IZQ body_while LLAVE_DER
    (89) while_do -> . DO LLAVE_IZQ body_while LLAVE_DER WHILE PAR_IZQ expresion_condicional PAR_DER END_OF_LINE
    (34) modificador_acceso -> . PRIVATE
    (35) modificador_acceso -> . PROTECTED
    (36) modificador_acceso -> . PUBLIC

    END_OF_LINE     shift and go to state 3
    IDENTIFICADOR   shift and go to state 29
    CHAR            shift and go to state 34
    BOOL            shift and go to state 36
    STRING          shift and go to state 37
    SWITCH          shift and go to state 40
    FOR             shift and go to state 41
    LIST            shift and go to state 42
    STACK           shift and go to state 43
    CONSOLE_WRITELINE shift and go to state 44
    CONSOLE_READLINE shift and go to state 45
    CHAR_TYPE       shift and go to state 47
    FLOAT_TYPE      shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    INT_TYPE        shift and go to state 50
    BOOL_TYPE       shift and go to state 51
    STRING_TYPE     shift and go to state 52
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55
    WHILE           shift and go to state 56
    DO              shift and go to state 57
    PRIVATE         shift and go to state 58
    PROTECTED       shift and go to state 59
    PUBLIC          shift and go to state 60

    modificador_acceso             shift and go to state 46
    body                           shift and go to state 243
    asignacion                     shift and go to state 2
    comparacion                    shift and go to state 4
    estructura_control             shift and go to state 5
    estructura_datos               shift and go to state 6
    expresion                      shift and go to state 7
    salida_entrada                 shift and go to state 8
    funcion                        shift and go to state 9
    declaracion                    shift and go to state 10
    empty                          shift and go to state 11
    funciones_estructura_datos     shift and go to state 12
    asignacionSimple               shift and go to state 13
    asignacionCompuesta            shift and go to state 14
    valor                          shift and go to state 15
    while                          shift and go to state 16
    switch_case                    shift and go to state 17
    for                            shift and go to state 18
    lista                          shift and go to state 19
    stack                          shift and go to state 20
    expresion_operacion_aritmetica shift and go to state 21
    expresion_condicional          shift and go to state 22
    salida_uno                     shift and go to state 23
    salida_dos                     shift and go to state 24
    salida_tres                    shift and go to state 25
    funcion_tipo_uno               shift and go to state 26
    funcion_tipo_tres              shift and go to state 27
    valor_tipo                     shift and go to state 28
    stack_push                     shift and go to state 30
    stack_pop                      shift and go to state 31
    asignacionCompuesta_Logic      shift and go to state 32
    asignacionCompuesta_Number     shift and go to state 33
    numero                         shift and go to state 35
    while_normal                   shift and go to state 38
    while_do                       shift and go to state 39

state 228

    (161) funcion_tipo_tres -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ parametrosF PAR_DER . LLAVE_IZQ bodyF LLAVE_DER

    LLAVE_IZQ       shift and go to state 244


state 229

    (163) parametrosF -> declaracion COMA . parametrosF
    (162) parametrosF -> . declaracion
    (163) parametrosF -> . declaracion COMA parametrosF
    (80) declaracion -> . valor_tipo IDENTIFICADOR
    (81) declaracion -> . valor_tipo asignacionSimple
    (21) valor_tipo -> . CHAR_TYPE
    (22) valor_tipo -> . FLOAT_TYPE
    (23) valor_tipo -> . DOUBLE_TYPE
    (24) valor_tipo -> . INT_TYPE
    (25) valor_tipo -> . BOOL_TYPE
    (26) valor_tipo -> . STRING_TYPE

    CHAR_TYPE       shift and go to state 47
    FLOAT_TYPE      shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    INT_TYPE        shift and go to state 50
    BOOL_TYPE       shift and go to state 51
    STRING_TYPE     shift and go to state 52

    declaracion                    shift and go to state 211
    parametrosF                    shift and go to state 245
    valor_tipo                     shift and go to state 28

state 230

    (88) while_normal -> WHILE PAR_IZQ expresion_condicional PAR_DER LLAVE_IZQ body_while . LLAVE_DER

    LLAVE_DER       shift and go to state 246


state 231

    (89) while_do -> DO LLAVE_IZQ body_while LLAVE_DER WHILE PAR_IZQ . expresion_condicional PAR_DER END_OF_LINE
    (146) expresion_condicional -> . numero operador_condicional numero
    (147) expresion_condicional -> . IDENTIFICADOR operador_condicional IDENTIFICADOR
    (148) expresion_condicional -> . IDENTIFICADOR operador_condicional numero
    (149) expresion_condicional -> . numero operador_condicional IDENTIFICADOR
    (16) numero -> . FLOAT
    (17) numero -> . DOUBLE
    (18) numero -> . INT

    IDENTIFICADOR   shift and go to state 160
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55

    expresion_condicional          shift and go to state 247
    numero                         shift and go to state 128

state 232

    (100) switch_case -> SWITCH PAR_IZQ valor PAR_DER LLAVE_IZQ casos LLAVE_DER .

    $end            reduce using rule 100 (switch_case -> SWITCH PAR_IZQ valor PAR_DER LLAVE_IZQ casos LLAVE_DER .)
    LLAVE_DER       reduce using rule 100 (switch_case -> SWITCH PAR_IZQ valor PAR_DER LLAVE_IZQ casos LLAVE_DER .)


state 233

    (101) casos -> CASE valor . DOS_PUNTOS body_case BREAK END_OF_LINE
    (102) casos -> CASE valor . DOS_PUNTOS BREAK END_OF_LINE
    (103) casos -> CASE valor . DOS_PUNTOS body_case BREAK END_OF_LINE casos
    (104) casos -> CASE valor . DOS_PUNTOS BREAK END_OF_LINE casos

    DOS_PUNTOS      shift and go to state 248


state 234

    (113) for -> FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador . PAR_DER LLAVE_IZQ body LLAVE_DER

    PAR_DER         shift and go to state 249


state 235

    (114) forIterador -> IDENTIFICADOR . operadorForIteracion
    (115) operadorForIteracion -> . INCREMENTO
    (116) operadorForIteracion -> . DECREMENTO

    INCREMENTO      shift and go to state 251
    DECREMENTO      shift and go to state 252

    operadorForIteracion           shift and go to state 250

state 236

    (121) valorForCondicion -> IDENTIFICADOR .

    END_OF_LINE     reduce using rule 121 (valorForCondicion -> IDENTIFICADOR .)


state 237

    (117) forCondicion -> IDENTIFICADOR operador_condicional valorForCondicion .

    END_OF_LINE     reduce using rule 117 (forCondicion -> IDENTIFICADOR operador_condicional valorForCondicion .)


state 238

    (118) valorForCondicion -> FLOAT .

    END_OF_LINE     reduce using rule 118 (valorForCondicion -> FLOAT .)


state 239

    (119) valorForCondicion -> DOUBLE .

    END_OF_LINE     reduce using rule 119 (valorForCondicion -> DOUBLE .)


state 240

    (120) valorForCondicion -> INT .

    END_OF_LINE     reduce using rule 120 (valorForCondicion -> INT .)


state 241

    (133) lista -> LIST tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista . PAR_IZQ PAR_DER END_OF_LINE

    PAR_IZQ         shift and go to state 253


state 242

    (135) stack -> STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL NEW . STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINE

    STACK           shift and go to state 254


state 243

    (160) funcion_tipo_uno -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ body . LLAVE_DER

    LLAVE_DER       shift and go to state 255


state 244

    (161) funcion_tipo_tres -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ parametrosF PAR_DER LLAVE_IZQ . bodyF LLAVE_DER
    (164) bodyF -> . asignacion END_OF_LINE
    (165) bodyF -> . declaracion END_OF_LINE
    (166) bodyF -> . salida_entrada END_OF_LINE
    (167) bodyF -> . asignacion END_OF_LINE bodyF
    (168) bodyF -> . declaracion END_OF_LINE bodyF
    (169) bodyF -> . salida_entrada END_OF_LINE bodyF
    (59) asignacion -> . asignacionSimple
    (60) asignacion -> . asignacionCompuesta
    (80) declaracion -> . valor_tipo IDENTIFICADOR
    (81) declaracion -> . valor_tipo asignacionSimple
    (150) salida_entrada -> . salida_uno
    (151) salida_entrada -> . salida_dos
    (152) salida_entrada -> . salida_tres
    (61) asignacionSimple -> . IDENTIFICADOR IGUAL valor
    (62) asignacionSimple -> . IDENTIFICADOR IGUAL expresion
    (63) asignacionSimple -> . IDENTIFICADOR IGUAL salida_entrada
    (64) asignacionCompuesta -> . asignacionCompuesta_Logic
    (65) asignacionCompuesta -> . asignacionCompuesta_Number
    (21) valor_tipo -> . CHAR_TYPE
    (22) valor_tipo -> . FLOAT_TYPE
    (23) valor_tipo -> . DOUBLE_TYPE
    (24) valor_tipo -> . INT_TYPE
    (25) valor_tipo -> . BOOL_TYPE
    (26) valor_tipo -> . STRING_TYPE
    (153) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER
    (154) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER
    (155) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER
    (156) salida_dos -> . CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER
    (157) salida_tres -> . CONSOLE_READLINE PAR_IZQ PAR_DER
    (66) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic BOOL
    (67) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic expresion_condicional
    (68) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR
    (69) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber numero
    (70) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica
    (71) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR

    IDENTIFICADOR   shift and go to state 167
    CHAR_TYPE       shift and go to state 47
    FLOAT_TYPE      shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    INT_TYPE        shift and go to state 50
    BOOL_TYPE       shift and go to state 51
    STRING_TYPE     shift and go to state 52
    CONSOLE_WRITELINE shift and go to state 44
    CONSOLE_READLINE shift and go to state 45

    bodyF                          shift and go to state 256
    asignacion                     shift and go to state 257
    declaracion                    shift and go to state 258
    salida_entrada                 shift and go to state 259
    asignacionSimple               shift and go to state 13
    asignacionCompuesta            shift and go to state 14
    valor_tipo                     shift and go to state 28
    salida_uno                     shift and go to state 23
    salida_dos                     shift and go to state 24
    salida_tres                    shift and go to state 25
    asignacionCompuesta_Logic      shift and go to state 32
    asignacionCompuesta_Number     shift and go to state 33

state 245

    (163) parametrosF -> declaracion COMA parametrosF .

    PAR_DER         reduce using rule 163 (parametrosF -> declaracion COMA parametrosF .)


state 246

    (88) while_normal -> WHILE PAR_IZQ expresion_condicional PAR_DER LLAVE_IZQ body_while LLAVE_DER .

    $end            reduce using rule 88 (while_normal -> WHILE PAR_IZQ expresion_condicional PAR_DER LLAVE_IZQ body_while LLAVE_DER .)
    LLAVE_DER       reduce using rule 88 (while_normal -> WHILE PAR_IZQ expresion_condicional PAR_DER LLAVE_IZQ body_while LLAVE_DER .)


state 247

    (89) while_do -> DO LLAVE_IZQ body_while LLAVE_DER WHILE PAR_IZQ expresion_condicional . PAR_DER END_OF_LINE

    PAR_DER         shift and go to state 260


state 248

    (101) casos -> CASE valor DOS_PUNTOS . body_case BREAK END_OF_LINE
    (102) casos -> CASE valor DOS_PUNTOS . BREAK END_OF_LINE
    (103) casos -> CASE valor DOS_PUNTOS . body_case BREAK END_OF_LINE casos
    (104) casos -> CASE valor DOS_PUNTOS . BREAK END_OF_LINE casos
    (105) body_case -> . asignacion END_OF_LINE
    (106) body_case -> . declaracion END_OF_LINE
    (107) body_case -> . comparacion END_OF_LINE
    (108) body_case -> . salida_entrada END_OF_LINE
    (109) body_case -> . asignacion END_OF_LINE body_case
    (110) body_case -> . declaracion END_OF_LINE body_case
    (111) body_case -> . salida_entrada END_OF_LINE body_case
    (112) body_case -> . comparacion END_OF_LINE body_case
    (59) asignacion -> . asignacionSimple
    (60) asignacion -> . asignacionCompuesta
    (80) declaracion -> . valor_tipo IDENTIFICADOR
    (81) declaracion -> . valor_tipo asignacionSimple
    (82) comparacion -> . valor operador_realacional valor
    (150) salida_entrada -> . salida_uno
    (151) salida_entrada -> . salida_dos
    (152) salida_entrada -> . salida_tres
    (61) asignacionSimple -> . IDENTIFICADOR IGUAL valor
    (62) asignacionSimple -> . IDENTIFICADOR IGUAL expresion
    (63) asignacionSimple -> . IDENTIFICADOR IGUAL salida_entrada
    (64) asignacionCompuesta -> . asignacionCompuesta_Logic
    (65) asignacionCompuesta -> . asignacionCompuesta_Number
    (21) valor_tipo -> . CHAR_TYPE
    (22) valor_tipo -> . FLOAT_TYPE
    (23) valor_tipo -> . DOUBLE_TYPE
    (24) valor_tipo -> . INT_TYPE
    (25) valor_tipo -> . BOOL_TYPE
    (26) valor_tipo -> . STRING_TYPE
    (11) valor -> . CHAR
    (12) valor -> . numero
    (13) valor -> . BOOL
    (14) valor -> . STRING
    (15) valor -> . IDENTIFICADOR
    (153) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER
    (154) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER
    (155) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER
    (156) salida_dos -> . CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER
    (157) salida_tres -> . CONSOLE_READLINE PAR_IZQ PAR_DER
    (66) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic BOOL
    (67) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic expresion_condicional
    (68) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR
    (69) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber numero
    (70) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica
    (71) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR
    (16) numero -> . FLOAT
    (17) numero -> . DOUBLE
    (18) numero -> . INT

    BREAK           shift and go to state 262
    IDENTIFICADOR   shift and go to state 267
    CHAR_TYPE       shift and go to state 47
    FLOAT_TYPE      shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    INT_TYPE        shift and go to state 50
    BOOL_TYPE       shift and go to state 51
    STRING_TYPE     shift and go to state 52
    CHAR            shift and go to state 34
    BOOL            shift and go to state 36
    STRING          shift and go to state 37
    CONSOLE_WRITELINE shift and go to state 44
    CONSOLE_READLINE shift and go to state 45
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55

    valor                          shift and go to state 15
    body_case                      shift and go to state 261
    asignacion                     shift and go to state 263
    declaracion                    shift and go to state 264
    comparacion                    shift and go to state 265
    salida_entrada                 shift and go to state 266
    asignacionSimple               shift and go to state 13
    asignacionCompuesta            shift and go to state 14
    valor_tipo                     shift and go to state 28
    salida_uno                     shift and go to state 23
    salida_dos                     shift and go to state 24
    salida_tres                    shift and go to state 25
    asignacionCompuesta_Logic      shift and go to state 32
    asignacionCompuesta_Number     shift and go to state 33
    numero                         shift and go to state 113

state 249

    (113) for -> FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER . LLAVE_IZQ body LLAVE_DER

    LLAVE_IZQ       shift and go to state 268


state 250

    (114) forIterador -> IDENTIFICADOR operadorForIteracion .

    PAR_DER         reduce using rule 114 (forIterador -> IDENTIFICADOR operadorForIteracion .)


state 251

    (115) operadorForIteracion -> INCREMENTO .

    PAR_DER         reduce using rule 115 (operadorForIteracion -> INCREMENTO .)


state 252

    (116) operadorForIteracion -> DECREMENTO .

    PAR_DER         reduce using rule 116 (operadorForIteracion -> DECREMENTO .)


state 253

    (133) lista -> LIST tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ . PAR_DER END_OF_LINE

    PAR_DER         shift and go to state 269


state 254

    (135) stack -> STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL NEW STACK . MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINE

    MENOR_QUE       shift and go to state 270


state 255

    (160) funcion_tipo_uno -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ body LLAVE_DER .

    $end            reduce using rule 160 (funcion_tipo_uno -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ body LLAVE_DER .)
    LLAVE_DER       reduce using rule 160 (funcion_tipo_uno -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ body LLAVE_DER .)


state 256

    (161) funcion_tipo_tres -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ parametrosF PAR_DER LLAVE_IZQ bodyF . LLAVE_DER

    LLAVE_DER       shift and go to state 271


state 257

    (164) bodyF -> asignacion . END_OF_LINE
    (167) bodyF -> asignacion . END_OF_LINE bodyF

    END_OF_LINE     shift and go to state 272


state 258

    (165) bodyF -> declaracion . END_OF_LINE
    (168) bodyF -> declaracion . END_OF_LINE bodyF

    END_OF_LINE     shift and go to state 273


state 259

    (166) bodyF -> salida_entrada . END_OF_LINE
    (169) bodyF -> salida_entrada . END_OF_LINE bodyF

    END_OF_LINE     shift and go to state 274


state 260

    (89) while_do -> DO LLAVE_IZQ body_while LLAVE_DER WHILE PAR_IZQ expresion_condicional PAR_DER . END_OF_LINE

    END_OF_LINE     shift and go to state 275


state 261

    (101) casos -> CASE valor DOS_PUNTOS body_case . BREAK END_OF_LINE
    (103) casos -> CASE valor DOS_PUNTOS body_case . BREAK END_OF_LINE casos

    BREAK           shift and go to state 276


state 262

    (102) casos -> CASE valor DOS_PUNTOS BREAK . END_OF_LINE
    (104) casos -> CASE valor DOS_PUNTOS BREAK . END_OF_LINE casos

    END_OF_LINE     shift and go to state 277


state 263

    (105) body_case -> asignacion . END_OF_LINE
    (109) body_case -> asignacion . END_OF_LINE body_case

    END_OF_LINE     shift and go to state 278


state 264

    (106) body_case -> declaracion . END_OF_LINE
    (110) body_case -> declaracion . END_OF_LINE body_case

    END_OF_LINE     shift and go to state 279


state 265

    (107) body_case -> comparacion . END_OF_LINE
    (112) body_case -> comparacion . END_OF_LINE body_case

    END_OF_LINE     shift and go to state 280


state 266

    (108) body_case -> salida_entrada . END_OF_LINE
    (111) body_case -> salida_entrada . END_OF_LINE body_case

    END_OF_LINE     shift and go to state 281


state 267

    (61) asignacionSimple -> IDENTIFICADOR . IGUAL valor
    (62) asignacionSimple -> IDENTIFICADOR . IGUAL expresion
    (63) asignacionSimple -> IDENTIFICADOR . IGUAL salida_entrada
    (15) valor -> IDENTIFICADOR .
    (66) asignacionCompuesta_Logic -> IDENTIFICADOR . operadoresCompuestosLogic BOOL
    (67) asignacionCompuesta_Logic -> IDENTIFICADOR . operadoresCompuestosLogic expresion_condicional
    (68) asignacionCompuesta_Logic -> IDENTIFICADOR . operadoresCompuestosLogic IDENTIFICADOR
    (69) asignacionCompuesta_Number -> IDENTIFICADOR . operadoresCompuestosNumber numero
    (70) asignacionCompuesta_Number -> IDENTIFICADOR . operadoresCompuestosNumber expresion_operacion_aritmetica
    (71) asignacionCompuesta_Number -> IDENTIFICADOR . operadoresCompuestosNumber IDENTIFICADOR
    (77) operadoresCompuestosLogic -> . AND_EQUAL
    (78) operadoresCompuestosLogic -> . OR_EQUAL
    (79) operadoresCompuestosLogic -> . EXC_OREQUAL
    (72) operadoresCompuestosNumber -> . AUMENTADO
    (73) operadoresCompuestosNumber -> . DECREMENTADO
    (74) operadoresCompuestosNumber -> . MULTIPLICADO_POR
    (75) operadoresCompuestosNumber -> . DIVIDIDO_POR
    (76) operadoresCompuestosNumber -> . MODULO_DE

    IGUAL           shift and go to state 75
    IGUAL_IGUAL     reduce using rule 15 (valor -> IDENTIFICADOR .)
    NO_IGUAL        reduce using rule 15 (valor -> IDENTIFICADOR .)
    MENOR_QUE       reduce using rule 15 (valor -> IDENTIFICADOR .)
    MENOR_O_IGUAL_QUE reduce using rule 15 (valor -> IDENTIFICADOR .)
    MAYOR_QUE       reduce using rule 15 (valor -> IDENTIFICADOR .)
    MAYOR_O_IGUAL_QUE reduce using rule 15 (valor -> IDENTIFICADOR .)
    AND_EQUAL       shift and go to state 92
    OR_EQUAL        shift and go to state 93
    EXC_OREQUAL     shift and go to state 94
    AUMENTADO       shift and go to state 95
    DECREMENTADO    shift and go to state 96
    MULTIPLICADO_POR shift and go to state 97
    DIVIDIDO_POR    shift and go to state 98
    MODULO_DE       shift and go to state 99

    operadoresCompuestosLogic      shift and go to state 79
    operadoresCompuestosNumber     shift and go to state 80

state 268

    (113) for -> FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ . body LLAVE_DER
    (1) body -> . asignacion END_OF_LINE
    (2) body -> . comparacion
    (3) body -> . estructura_control
    (4) body -> . estructura_datos
    (5) body -> . expresion END_OF_LINE
    (6) body -> . salida_entrada END_OF_LINE
    (7) body -> . funcion
    (8) body -> . declaracion END_OF_LINE
    (9) body -> . empty
    (10) body -> . funciones_estructura_datos END_OF_LINE
    (59) asignacion -> . asignacionSimple
    (60) asignacion -> . asignacionCompuesta
    (82) comparacion -> . valor operador_realacional valor
    (83) estructura_control -> . while
    (84) estructura_control -> . switch_case
    (85) estructura_control -> . for
    (131) estructura_datos -> . lista
    (132) estructura_datos -> . stack
    (140) expresion -> . expresion_operacion_aritmetica
    (141) expresion -> . expresion_condicional
    (150) salida_entrada -> . salida_uno
    (151) salida_entrada -> . salida_dos
    (152) salida_entrada -> . salida_tres
    (158) funcion -> . funcion_tipo_uno
    (159) funcion -> . funcion_tipo_tres
    (80) declaracion -> . valor_tipo IDENTIFICADOR
    (81) declaracion -> . valor_tipo asignacionSimple
    (58) empty -> . END_OF_LINE
    (136) funciones_estructura_datos -> . stack_push
    (137) funciones_estructura_datos -> . stack_pop
    (61) asignacionSimple -> . IDENTIFICADOR IGUAL valor
    (62) asignacionSimple -> . IDENTIFICADOR IGUAL expresion
    (63) asignacionSimple -> . IDENTIFICADOR IGUAL salida_entrada
    (64) asignacionCompuesta -> . asignacionCompuesta_Logic
    (65) asignacionCompuesta -> . asignacionCompuesta_Number
    (11) valor -> . CHAR
    (12) valor -> . numero
    (13) valor -> . BOOL
    (14) valor -> . STRING
    (15) valor -> . IDENTIFICADOR
    (86) while -> . while_normal
    (87) while -> . while_do
    (100) switch_case -> . SWITCH PAR_IZQ valor PAR_DER LLAVE_IZQ casos LLAVE_DER
    (113) for -> . FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DER
    (133) lista -> . LIST tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINE
    (135) stack -> . STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL NEW STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINE
    (142) expresion_operacion_aritmetica -> . numero operador_aritmentico numero
    (143) expresion_operacion_aritmetica -> . numero operador_aritmentico IDENTIFICADOR
    (144) expresion_operacion_aritmetica -> . IDENTIFICADOR operador_aritmentico numero
    (145) expresion_operacion_aritmetica -> . IDENTIFICADOR operador_aritmentico IDENTIFICADOR
    (146) expresion_condicional -> . numero operador_condicional numero
    (147) expresion_condicional -> . IDENTIFICADOR operador_condicional IDENTIFICADOR
    (148) expresion_condicional -> . IDENTIFICADOR operador_condicional numero
    (149) expresion_condicional -> . numero operador_condicional IDENTIFICADOR
    (153) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER
    (154) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER
    (155) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER
    (156) salida_dos -> . CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER
    (157) salida_tres -> . CONSOLE_READLINE PAR_IZQ PAR_DER
    (160) funcion_tipo_uno -> . modificador_acceso VOID IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ body LLAVE_DER
    (161) funcion_tipo_tres -> . modificador_acceso VOID IDENTIFICADOR PAR_IZQ parametrosF PAR_DER LLAVE_IZQ bodyF LLAVE_DER
    (21) valor_tipo -> . CHAR_TYPE
    (22) valor_tipo -> . FLOAT_TYPE
    (23) valor_tipo -> . DOUBLE_TYPE
    (24) valor_tipo -> . INT_TYPE
    (25) valor_tipo -> . BOOL_TYPE
    (26) valor_tipo -> . STRING_TYPE
    (138) stack_push -> . IDENTIFICADOR PUNTO PUSH PAR_IZQ valor PAR_DER
    (139) stack_pop -> . IDENTIFICADOR PUNTO POP PAR_IZQ PAR_DER
    (66) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic BOOL
    (67) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic expresion_condicional
    (68) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR
    (69) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber numero
    (70) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica
    (71) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR
    (16) numero -> . FLOAT
    (17) numero -> . DOUBLE
    (18) numero -> . INT
    (88) while_normal -> . WHILE PAR_IZQ expresion_condicional PAR_DER LLAVE_IZQ body_while LLAVE_DER
    (89) while_do -> . DO LLAVE_IZQ body_while LLAVE_DER WHILE PAR_IZQ expresion_condicional PAR_DER END_OF_LINE
    (34) modificador_acceso -> . PRIVATE
    (35) modificador_acceso -> . PROTECTED
    (36) modificador_acceso -> . PUBLIC

    END_OF_LINE     shift and go to state 3
    IDENTIFICADOR   shift and go to state 29
    CHAR            shift and go to state 34
    BOOL            shift and go to state 36
    STRING          shift and go to state 37
    SWITCH          shift and go to state 40
    FOR             shift and go to state 41
    LIST            shift and go to state 42
    STACK           shift and go to state 43
    CONSOLE_WRITELINE shift and go to state 44
    CONSOLE_READLINE shift and go to state 45
    CHAR_TYPE       shift and go to state 47
    FLOAT_TYPE      shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    INT_TYPE        shift and go to state 50
    BOOL_TYPE       shift and go to state 51
    STRING_TYPE     shift and go to state 52
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55
    WHILE           shift and go to state 56
    DO              shift and go to state 57
    PRIVATE         shift and go to state 58
    PROTECTED       shift and go to state 59
    PUBLIC          shift and go to state 60

    body                           shift and go to state 282
    asignacion                     shift and go to state 2
    comparacion                    shift and go to state 4
    estructura_control             shift and go to state 5
    estructura_datos               shift and go to state 6
    expresion                      shift and go to state 7
    salida_entrada                 shift and go to state 8
    funcion                        shift and go to state 9
    declaracion                    shift and go to state 10
    empty                          shift and go to state 11
    funciones_estructura_datos     shift and go to state 12
    asignacionSimple               shift and go to state 13
    asignacionCompuesta            shift and go to state 14
    valor                          shift and go to state 15
    while                          shift and go to state 16
    switch_case                    shift and go to state 17
    for                            shift and go to state 18
    lista                          shift and go to state 19
    stack                          shift and go to state 20
    expresion_operacion_aritmetica shift and go to state 21
    expresion_condicional          shift and go to state 22
    salida_uno                     shift and go to state 23
    salida_dos                     shift and go to state 24
    salida_tres                    shift and go to state 25
    funcion_tipo_uno               shift and go to state 26
    funcion_tipo_tres              shift and go to state 27
    valor_tipo                     shift and go to state 28
    stack_push                     shift and go to state 30
    stack_pop                      shift and go to state 31
    asignacionCompuesta_Logic      shift and go to state 32
    asignacionCompuesta_Number     shift and go to state 33
    numero                         shift and go to state 35
    while_normal                   shift and go to state 38
    while_do                       shift and go to state 39
    modificador_acceso             shift and go to state 46

state 269

    (133) lista -> LIST tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER . END_OF_LINE

    END_OF_LINE     shift and go to state 283


state 270

    (135) stack -> STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL NEW STACK MENOR_QUE . valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINE
    (27) valor_tipo_inicializador -> . FLOAT_TYPE
    (28) valor_tipo_inicializador -> . DOUBLE_TYPE
    (29) valor_tipo_inicializador -> . STRING_TYPE
    (30) valor_tipo_inicializador -> . INT_TYPE
    (31) valor_tipo_inicializador -> . BOOL_TYPE
    (32) valor_tipo_inicializador -> . CHAR_TYPE
    (33) valor_tipo_inicializador -> . IDENTIFICADOR

    FLOAT_TYPE      shift and go to state 145
    DOUBLE_TYPE     shift and go to state 146
    STRING_TYPE     shift and go to state 147
    INT_TYPE        shift and go to state 148
    BOOL_TYPE       shift and go to state 149
    CHAR_TYPE       shift and go to state 150
    IDENTIFICADOR   shift and go to state 151

    valor_tipo_inicializador       shift and go to state 284

state 271

    (161) funcion_tipo_tres -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ parametrosF PAR_DER LLAVE_IZQ bodyF LLAVE_DER .

    $end            reduce using rule 161 (funcion_tipo_tres -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ parametrosF PAR_DER LLAVE_IZQ bodyF LLAVE_DER .)
    LLAVE_DER       reduce using rule 161 (funcion_tipo_tres -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ parametrosF PAR_DER LLAVE_IZQ bodyF LLAVE_DER .)


state 272

    (164) bodyF -> asignacion END_OF_LINE .
    (167) bodyF -> asignacion END_OF_LINE . bodyF
    (164) bodyF -> . asignacion END_OF_LINE
    (165) bodyF -> . declaracion END_OF_LINE
    (166) bodyF -> . salida_entrada END_OF_LINE
    (167) bodyF -> . asignacion END_OF_LINE bodyF
    (168) bodyF -> . declaracion END_OF_LINE bodyF
    (169) bodyF -> . salida_entrada END_OF_LINE bodyF
    (59) asignacion -> . asignacionSimple
    (60) asignacion -> . asignacionCompuesta
    (80) declaracion -> . valor_tipo IDENTIFICADOR
    (81) declaracion -> . valor_tipo asignacionSimple
    (150) salida_entrada -> . salida_uno
    (151) salida_entrada -> . salida_dos
    (152) salida_entrada -> . salida_tres
    (61) asignacionSimple -> . IDENTIFICADOR IGUAL valor
    (62) asignacionSimple -> . IDENTIFICADOR IGUAL expresion
    (63) asignacionSimple -> . IDENTIFICADOR IGUAL salida_entrada
    (64) asignacionCompuesta -> . asignacionCompuesta_Logic
    (65) asignacionCompuesta -> . asignacionCompuesta_Number
    (21) valor_tipo -> . CHAR_TYPE
    (22) valor_tipo -> . FLOAT_TYPE
    (23) valor_tipo -> . DOUBLE_TYPE
    (24) valor_tipo -> . INT_TYPE
    (25) valor_tipo -> . BOOL_TYPE
    (26) valor_tipo -> . STRING_TYPE
    (153) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER
    (154) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER
    (155) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER
    (156) salida_dos -> . CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER
    (157) salida_tres -> . CONSOLE_READLINE PAR_IZQ PAR_DER
    (66) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic BOOL
    (67) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic expresion_condicional
    (68) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR
    (69) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber numero
    (70) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica
    (71) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR

    LLAVE_DER       reduce using rule 164 (bodyF -> asignacion END_OF_LINE .)
    IDENTIFICADOR   shift and go to state 167
    CHAR_TYPE       shift and go to state 47
    FLOAT_TYPE      shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    INT_TYPE        shift and go to state 50
    BOOL_TYPE       shift and go to state 51
    STRING_TYPE     shift and go to state 52
    CONSOLE_WRITELINE shift and go to state 44
    CONSOLE_READLINE shift and go to state 45

    asignacion                     shift and go to state 257
    bodyF                          shift and go to state 285
    declaracion                    shift and go to state 258
    salida_entrada                 shift and go to state 259
    asignacionSimple               shift and go to state 13
    asignacionCompuesta            shift and go to state 14
    valor_tipo                     shift and go to state 28
    salida_uno                     shift and go to state 23
    salida_dos                     shift and go to state 24
    salida_tres                    shift and go to state 25
    asignacionCompuesta_Logic      shift and go to state 32
    asignacionCompuesta_Number     shift and go to state 33

state 273

    (165) bodyF -> declaracion END_OF_LINE .
    (168) bodyF -> declaracion END_OF_LINE . bodyF
    (164) bodyF -> . asignacion END_OF_LINE
    (165) bodyF -> . declaracion END_OF_LINE
    (166) bodyF -> . salida_entrada END_OF_LINE
    (167) bodyF -> . asignacion END_OF_LINE bodyF
    (168) bodyF -> . declaracion END_OF_LINE bodyF
    (169) bodyF -> . salida_entrada END_OF_LINE bodyF
    (59) asignacion -> . asignacionSimple
    (60) asignacion -> . asignacionCompuesta
    (80) declaracion -> . valor_tipo IDENTIFICADOR
    (81) declaracion -> . valor_tipo asignacionSimple
    (150) salida_entrada -> . salida_uno
    (151) salida_entrada -> . salida_dos
    (152) salida_entrada -> . salida_tres
    (61) asignacionSimple -> . IDENTIFICADOR IGUAL valor
    (62) asignacionSimple -> . IDENTIFICADOR IGUAL expresion
    (63) asignacionSimple -> . IDENTIFICADOR IGUAL salida_entrada
    (64) asignacionCompuesta -> . asignacionCompuesta_Logic
    (65) asignacionCompuesta -> . asignacionCompuesta_Number
    (21) valor_tipo -> . CHAR_TYPE
    (22) valor_tipo -> . FLOAT_TYPE
    (23) valor_tipo -> . DOUBLE_TYPE
    (24) valor_tipo -> . INT_TYPE
    (25) valor_tipo -> . BOOL_TYPE
    (26) valor_tipo -> . STRING_TYPE
    (153) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER
    (154) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER
    (155) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER
    (156) salida_dos -> . CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER
    (157) salida_tres -> . CONSOLE_READLINE PAR_IZQ PAR_DER
    (66) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic BOOL
    (67) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic expresion_condicional
    (68) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR
    (69) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber numero
    (70) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica
    (71) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR

    LLAVE_DER       reduce using rule 165 (bodyF -> declaracion END_OF_LINE .)
    IDENTIFICADOR   shift and go to state 167
    CHAR_TYPE       shift and go to state 47
    FLOAT_TYPE      shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    INT_TYPE        shift and go to state 50
    BOOL_TYPE       shift and go to state 51
    STRING_TYPE     shift and go to state 52
    CONSOLE_WRITELINE shift and go to state 44
    CONSOLE_READLINE shift and go to state 45

    declaracion                    shift and go to state 258
    bodyF                          shift and go to state 286
    asignacion                     shift and go to state 257
    salida_entrada                 shift and go to state 259
    asignacionSimple               shift and go to state 13
    asignacionCompuesta            shift and go to state 14
    valor_tipo                     shift and go to state 28
    salida_uno                     shift and go to state 23
    salida_dos                     shift and go to state 24
    salida_tres                    shift and go to state 25
    asignacionCompuesta_Logic      shift and go to state 32
    asignacionCompuesta_Number     shift and go to state 33

state 274

    (166) bodyF -> salida_entrada END_OF_LINE .
    (169) bodyF -> salida_entrada END_OF_LINE . bodyF
    (164) bodyF -> . asignacion END_OF_LINE
    (165) bodyF -> . declaracion END_OF_LINE
    (166) bodyF -> . salida_entrada END_OF_LINE
    (167) bodyF -> . asignacion END_OF_LINE bodyF
    (168) bodyF -> . declaracion END_OF_LINE bodyF
    (169) bodyF -> . salida_entrada END_OF_LINE bodyF
    (59) asignacion -> . asignacionSimple
    (60) asignacion -> . asignacionCompuesta
    (80) declaracion -> . valor_tipo IDENTIFICADOR
    (81) declaracion -> . valor_tipo asignacionSimple
    (150) salida_entrada -> . salida_uno
    (151) salida_entrada -> . salida_dos
    (152) salida_entrada -> . salida_tres
    (61) asignacionSimple -> . IDENTIFICADOR IGUAL valor
    (62) asignacionSimple -> . IDENTIFICADOR IGUAL expresion
    (63) asignacionSimple -> . IDENTIFICADOR IGUAL salida_entrada
    (64) asignacionCompuesta -> . asignacionCompuesta_Logic
    (65) asignacionCompuesta -> . asignacionCompuesta_Number
    (21) valor_tipo -> . CHAR_TYPE
    (22) valor_tipo -> . FLOAT_TYPE
    (23) valor_tipo -> . DOUBLE_TYPE
    (24) valor_tipo -> . INT_TYPE
    (25) valor_tipo -> . BOOL_TYPE
    (26) valor_tipo -> . STRING_TYPE
    (153) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER
    (154) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER
    (155) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER
    (156) salida_dos -> . CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER
    (157) salida_tres -> . CONSOLE_READLINE PAR_IZQ PAR_DER
    (66) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic BOOL
    (67) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic expresion_condicional
    (68) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR
    (69) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber numero
    (70) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica
    (71) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR

    LLAVE_DER       reduce using rule 166 (bodyF -> salida_entrada END_OF_LINE .)
    IDENTIFICADOR   shift and go to state 167
    CHAR_TYPE       shift and go to state 47
    FLOAT_TYPE      shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    INT_TYPE        shift and go to state 50
    BOOL_TYPE       shift and go to state 51
    STRING_TYPE     shift and go to state 52
    CONSOLE_WRITELINE shift and go to state 44
    CONSOLE_READLINE shift and go to state 45

    salida_entrada                 shift and go to state 259
    bodyF                          shift and go to state 287
    asignacion                     shift and go to state 257
    declaracion                    shift and go to state 258
    asignacionSimple               shift and go to state 13
    asignacionCompuesta            shift and go to state 14
    valor_tipo                     shift and go to state 28
    salida_uno                     shift and go to state 23
    salida_dos                     shift and go to state 24
    salida_tres                    shift and go to state 25
    asignacionCompuesta_Logic      shift and go to state 32
    asignacionCompuesta_Number     shift and go to state 33

state 275

    (89) while_do -> DO LLAVE_IZQ body_while LLAVE_DER WHILE PAR_IZQ expresion_condicional PAR_DER END_OF_LINE .

    $end            reduce using rule 89 (while_do -> DO LLAVE_IZQ body_while LLAVE_DER WHILE PAR_IZQ expresion_condicional PAR_DER END_OF_LINE .)
    LLAVE_DER       reduce using rule 89 (while_do -> DO LLAVE_IZQ body_while LLAVE_DER WHILE PAR_IZQ expresion_condicional PAR_DER END_OF_LINE .)


state 276

    (101) casos -> CASE valor DOS_PUNTOS body_case BREAK . END_OF_LINE
    (103) casos -> CASE valor DOS_PUNTOS body_case BREAK . END_OF_LINE casos

    END_OF_LINE     shift and go to state 288


state 277

    (102) casos -> CASE valor DOS_PUNTOS BREAK END_OF_LINE .
    (104) casos -> CASE valor DOS_PUNTOS BREAK END_OF_LINE . casos
    (101) casos -> . CASE valor DOS_PUNTOS body_case BREAK END_OF_LINE
    (102) casos -> . CASE valor DOS_PUNTOS BREAK END_OF_LINE
    (103) casos -> . CASE valor DOS_PUNTOS body_case BREAK END_OF_LINE casos
    (104) casos -> . CASE valor DOS_PUNTOS BREAK END_OF_LINE casos

    LLAVE_DER       reduce using rule 102 (casos -> CASE valor DOS_PUNTOS BREAK END_OF_LINE .)
    CASE            shift and go to state 221

    casos                          shift and go to state 289

state 278

    (105) body_case -> asignacion END_OF_LINE .
    (109) body_case -> asignacion END_OF_LINE . body_case
    (105) body_case -> . asignacion END_OF_LINE
    (106) body_case -> . declaracion END_OF_LINE
    (107) body_case -> . comparacion END_OF_LINE
    (108) body_case -> . salida_entrada END_OF_LINE
    (109) body_case -> . asignacion END_OF_LINE body_case
    (110) body_case -> . declaracion END_OF_LINE body_case
    (111) body_case -> . salida_entrada END_OF_LINE body_case
    (112) body_case -> . comparacion END_OF_LINE body_case
    (59) asignacion -> . asignacionSimple
    (60) asignacion -> . asignacionCompuesta
    (80) declaracion -> . valor_tipo IDENTIFICADOR
    (81) declaracion -> . valor_tipo asignacionSimple
    (82) comparacion -> . valor operador_realacional valor
    (150) salida_entrada -> . salida_uno
    (151) salida_entrada -> . salida_dos
    (152) salida_entrada -> . salida_tres
    (61) asignacionSimple -> . IDENTIFICADOR IGUAL valor
    (62) asignacionSimple -> . IDENTIFICADOR IGUAL expresion
    (63) asignacionSimple -> . IDENTIFICADOR IGUAL salida_entrada
    (64) asignacionCompuesta -> . asignacionCompuesta_Logic
    (65) asignacionCompuesta -> . asignacionCompuesta_Number
    (21) valor_tipo -> . CHAR_TYPE
    (22) valor_tipo -> . FLOAT_TYPE
    (23) valor_tipo -> . DOUBLE_TYPE
    (24) valor_tipo -> . INT_TYPE
    (25) valor_tipo -> . BOOL_TYPE
    (26) valor_tipo -> . STRING_TYPE
    (11) valor -> . CHAR
    (12) valor -> . numero
    (13) valor -> . BOOL
    (14) valor -> . STRING
    (15) valor -> . IDENTIFICADOR
    (153) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER
    (154) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER
    (155) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER
    (156) salida_dos -> . CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER
    (157) salida_tres -> . CONSOLE_READLINE PAR_IZQ PAR_DER
    (66) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic BOOL
    (67) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic expresion_condicional
    (68) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR
    (69) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber numero
    (70) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica
    (71) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR
    (16) numero -> . FLOAT
    (17) numero -> . DOUBLE
    (18) numero -> . INT

    BREAK           reduce using rule 105 (body_case -> asignacion END_OF_LINE .)
    IDENTIFICADOR   shift and go to state 267
    CHAR_TYPE       shift and go to state 47
    FLOAT_TYPE      shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    INT_TYPE        shift and go to state 50
    BOOL_TYPE       shift and go to state 51
    STRING_TYPE     shift and go to state 52
    CHAR            shift and go to state 34
    BOOL            shift and go to state 36
    STRING          shift and go to state 37
    CONSOLE_WRITELINE shift and go to state 44
    CONSOLE_READLINE shift and go to state 45
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55

    asignacion                     shift and go to state 263
    body_case                      shift and go to state 290
    declaracion                    shift and go to state 264
    comparacion                    shift and go to state 265
    salida_entrada                 shift and go to state 266
    asignacionSimple               shift and go to state 13
    asignacionCompuesta            shift and go to state 14
    valor_tipo                     shift and go to state 28
    valor                          shift and go to state 15
    salida_uno                     shift and go to state 23
    salida_dos                     shift and go to state 24
    salida_tres                    shift and go to state 25
    asignacionCompuesta_Logic      shift and go to state 32
    asignacionCompuesta_Number     shift and go to state 33
    numero                         shift and go to state 113

state 279

    (106) body_case -> declaracion END_OF_LINE .
    (110) body_case -> declaracion END_OF_LINE . body_case
    (105) body_case -> . asignacion END_OF_LINE
    (106) body_case -> . declaracion END_OF_LINE
    (107) body_case -> . comparacion END_OF_LINE
    (108) body_case -> . salida_entrada END_OF_LINE
    (109) body_case -> . asignacion END_OF_LINE body_case
    (110) body_case -> . declaracion END_OF_LINE body_case
    (111) body_case -> . salida_entrada END_OF_LINE body_case
    (112) body_case -> . comparacion END_OF_LINE body_case
    (59) asignacion -> . asignacionSimple
    (60) asignacion -> . asignacionCompuesta
    (80) declaracion -> . valor_tipo IDENTIFICADOR
    (81) declaracion -> . valor_tipo asignacionSimple
    (82) comparacion -> . valor operador_realacional valor
    (150) salida_entrada -> . salida_uno
    (151) salida_entrada -> . salida_dos
    (152) salida_entrada -> . salida_tres
    (61) asignacionSimple -> . IDENTIFICADOR IGUAL valor
    (62) asignacionSimple -> . IDENTIFICADOR IGUAL expresion
    (63) asignacionSimple -> . IDENTIFICADOR IGUAL salida_entrada
    (64) asignacionCompuesta -> . asignacionCompuesta_Logic
    (65) asignacionCompuesta -> . asignacionCompuesta_Number
    (21) valor_tipo -> . CHAR_TYPE
    (22) valor_tipo -> . FLOAT_TYPE
    (23) valor_tipo -> . DOUBLE_TYPE
    (24) valor_tipo -> . INT_TYPE
    (25) valor_tipo -> . BOOL_TYPE
    (26) valor_tipo -> . STRING_TYPE
    (11) valor -> . CHAR
    (12) valor -> . numero
    (13) valor -> . BOOL
    (14) valor -> . STRING
    (15) valor -> . IDENTIFICADOR
    (153) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER
    (154) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER
    (155) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER
    (156) salida_dos -> . CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER
    (157) salida_tres -> . CONSOLE_READLINE PAR_IZQ PAR_DER
    (66) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic BOOL
    (67) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic expresion_condicional
    (68) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR
    (69) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber numero
    (70) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica
    (71) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR
    (16) numero -> . FLOAT
    (17) numero -> . DOUBLE
    (18) numero -> . INT

    BREAK           reduce using rule 106 (body_case -> declaracion END_OF_LINE .)
    IDENTIFICADOR   shift and go to state 267
    CHAR_TYPE       shift and go to state 47
    FLOAT_TYPE      shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    INT_TYPE        shift and go to state 50
    BOOL_TYPE       shift and go to state 51
    STRING_TYPE     shift and go to state 52
    CHAR            shift and go to state 34
    BOOL            shift and go to state 36
    STRING          shift and go to state 37
    CONSOLE_WRITELINE shift and go to state 44
    CONSOLE_READLINE shift and go to state 45
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55

    declaracion                    shift and go to state 264
    body_case                      shift and go to state 291
    asignacion                     shift and go to state 263
    comparacion                    shift and go to state 265
    salida_entrada                 shift and go to state 266
    asignacionSimple               shift and go to state 13
    asignacionCompuesta            shift and go to state 14
    valor_tipo                     shift and go to state 28
    valor                          shift and go to state 15
    salida_uno                     shift and go to state 23
    salida_dos                     shift and go to state 24
    salida_tres                    shift and go to state 25
    asignacionCompuesta_Logic      shift and go to state 32
    asignacionCompuesta_Number     shift and go to state 33
    numero                         shift and go to state 113

state 280

    (107) body_case -> comparacion END_OF_LINE .
    (112) body_case -> comparacion END_OF_LINE . body_case
    (105) body_case -> . asignacion END_OF_LINE
    (106) body_case -> . declaracion END_OF_LINE
    (107) body_case -> . comparacion END_OF_LINE
    (108) body_case -> . salida_entrada END_OF_LINE
    (109) body_case -> . asignacion END_OF_LINE body_case
    (110) body_case -> . declaracion END_OF_LINE body_case
    (111) body_case -> . salida_entrada END_OF_LINE body_case
    (112) body_case -> . comparacion END_OF_LINE body_case
    (59) asignacion -> . asignacionSimple
    (60) asignacion -> . asignacionCompuesta
    (80) declaracion -> . valor_tipo IDENTIFICADOR
    (81) declaracion -> . valor_tipo asignacionSimple
    (82) comparacion -> . valor operador_realacional valor
    (150) salida_entrada -> . salida_uno
    (151) salida_entrada -> . salida_dos
    (152) salida_entrada -> . salida_tres
    (61) asignacionSimple -> . IDENTIFICADOR IGUAL valor
    (62) asignacionSimple -> . IDENTIFICADOR IGUAL expresion
    (63) asignacionSimple -> . IDENTIFICADOR IGUAL salida_entrada
    (64) asignacionCompuesta -> . asignacionCompuesta_Logic
    (65) asignacionCompuesta -> . asignacionCompuesta_Number
    (21) valor_tipo -> . CHAR_TYPE
    (22) valor_tipo -> . FLOAT_TYPE
    (23) valor_tipo -> . DOUBLE_TYPE
    (24) valor_tipo -> . INT_TYPE
    (25) valor_tipo -> . BOOL_TYPE
    (26) valor_tipo -> . STRING_TYPE
    (11) valor -> . CHAR
    (12) valor -> . numero
    (13) valor -> . BOOL
    (14) valor -> . STRING
    (15) valor -> . IDENTIFICADOR
    (153) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER
    (154) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER
    (155) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER
    (156) salida_dos -> . CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER
    (157) salida_tres -> . CONSOLE_READLINE PAR_IZQ PAR_DER
    (66) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic BOOL
    (67) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic expresion_condicional
    (68) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR
    (69) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber numero
    (70) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica
    (71) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR
    (16) numero -> . FLOAT
    (17) numero -> . DOUBLE
    (18) numero -> . INT

    BREAK           reduce using rule 107 (body_case -> comparacion END_OF_LINE .)
    IDENTIFICADOR   shift and go to state 267
    CHAR_TYPE       shift and go to state 47
    FLOAT_TYPE      shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    INT_TYPE        shift and go to state 50
    BOOL_TYPE       shift and go to state 51
    STRING_TYPE     shift and go to state 52
    CHAR            shift and go to state 34
    BOOL            shift and go to state 36
    STRING          shift and go to state 37
    CONSOLE_WRITELINE shift and go to state 44
    CONSOLE_READLINE shift and go to state 45
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55

    comparacion                    shift and go to state 265
    body_case                      shift and go to state 292
    asignacion                     shift and go to state 263
    declaracion                    shift and go to state 264
    salida_entrada                 shift and go to state 266
    asignacionSimple               shift and go to state 13
    asignacionCompuesta            shift and go to state 14
    valor_tipo                     shift and go to state 28
    valor                          shift and go to state 15
    salida_uno                     shift and go to state 23
    salida_dos                     shift and go to state 24
    salida_tres                    shift and go to state 25
    asignacionCompuesta_Logic      shift and go to state 32
    asignacionCompuesta_Number     shift and go to state 33
    numero                         shift and go to state 113

state 281

    (108) body_case -> salida_entrada END_OF_LINE .
    (111) body_case -> salida_entrada END_OF_LINE . body_case
    (105) body_case -> . asignacion END_OF_LINE
    (106) body_case -> . declaracion END_OF_LINE
    (107) body_case -> . comparacion END_OF_LINE
    (108) body_case -> . salida_entrada END_OF_LINE
    (109) body_case -> . asignacion END_OF_LINE body_case
    (110) body_case -> . declaracion END_OF_LINE body_case
    (111) body_case -> . salida_entrada END_OF_LINE body_case
    (112) body_case -> . comparacion END_OF_LINE body_case
    (59) asignacion -> . asignacionSimple
    (60) asignacion -> . asignacionCompuesta
    (80) declaracion -> . valor_tipo IDENTIFICADOR
    (81) declaracion -> . valor_tipo asignacionSimple
    (82) comparacion -> . valor operador_realacional valor
    (150) salida_entrada -> . salida_uno
    (151) salida_entrada -> . salida_dos
    (152) salida_entrada -> . salida_tres
    (61) asignacionSimple -> . IDENTIFICADOR IGUAL valor
    (62) asignacionSimple -> . IDENTIFICADOR IGUAL expresion
    (63) asignacionSimple -> . IDENTIFICADOR IGUAL salida_entrada
    (64) asignacionCompuesta -> . asignacionCompuesta_Logic
    (65) asignacionCompuesta -> . asignacionCompuesta_Number
    (21) valor_tipo -> . CHAR_TYPE
    (22) valor_tipo -> . FLOAT_TYPE
    (23) valor_tipo -> . DOUBLE_TYPE
    (24) valor_tipo -> . INT_TYPE
    (25) valor_tipo -> . BOOL_TYPE
    (26) valor_tipo -> . STRING_TYPE
    (11) valor -> . CHAR
    (12) valor -> . numero
    (13) valor -> . BOOL
    (14) valor -> . STRING
    (15) valor -> . IDENTIFICADOR
    (153) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER
    (154) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER
    (155) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER
    (156) salida_dos -> . CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER
    (157) salida_tres -> . CONSOLE_READLINE PAR_IZQ PAR_DER
    (66) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic BOOL
    (67) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic expresion_condicional
    (68) asignacionCompuesta_Logic -> . IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR
    (69) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber numero
    (70) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica
    (71) asignacionCompuesta_Number -> . IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR
    (16) numero -> . FLOAT
    (17) numero -> . DOUBLE
    (18) numero -> . INT

    BREAK           reduce using rule 108 (body_case -> salida_entrada END_OF_LINE .)
    IDENTIFICADOR   shift and go to state 267
    CHAR_TYPE       shift and go to state 47
    FLOAT_TYPE      shift and go to state 48
    DOUBLE_TYPE     shift and go to state 49
    INT_TYPE        shift and go to state 50
    BOOL_TYPE       shift and go to state 51
    STRING_TYPE     shift and go to state 52
    CHAR            shift and go to state 34
    BOOL            shift and go to state 36
    STRING          shift and go to state 37
    CONSOLE_WRITELINE shift and go to state 44
    CONSOLE_READLINE shift and go to state 45
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    INT             shift and go to state 55

    salida_entrada                 shift and go to state 266
    body_case                      shift and go to state 293
    asignacion                     shift and go to state 263
    declaracion                    shift and go to state 264
    comparacion                    shift and go to state 265
    asignacionSimple               shift and go to state 13
    asignacionCompuesta            shift and go to state 14
    valor_tipo                     shift and go to state 28
    valor                          shift and go to state 15
    salida_uno                     shift and go to state 23
    salida_dos                     shift and go to state 24
    salida_tres                    shift and go to state 25
    asignacionCompuesta_Logic      shift and go to state 32
    asignacionCompuesta_Number     shift and go to state 33
    numero                         shift and go to state 113

state 282

    (113) for -> FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body . LLAVE_DER

    LLAVE_DER       shift and go to state 294


state 283

    (133) lista -> LIST tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINE .

    $end            reduce using rule 133 (lista -> LIST tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINE .)
    LLAVE_DER       reduce using rule 133 (lista -> LIST tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINE .)


state 284

    (135) stack -> STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL NEW STACK MENOR_QUE valor_tipo_inicializador . MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINE

    MAYOR_QUE       shift and go to state 295


state 285

    (167) bodyF -> asignacion END_OF_LINE bodyF .

    LLAVE_DER       reduce using rule 167 (bodyF -> asignacion END_OF_LINE bodyF .)


state 286

    (168) bodyF -> declaracion END_OF_LINE bodyF .

    LLAVE_DER       reduce using rule 168 (bodyF -> declaracion END_OF_LINE bodyF .)


state 287

    (169) bodyF -> salida_entrada END_OF_LINE bodyF .

    LLAVE_DER       reduce using rule 169 (bodyF -> salida_entrada END_OF_LINE bodyF .)


state 288

    (101) casos -> CASE valor DOS_PUNTOS body_case BREAK END_OF_LINE .
    (103) casos -> CASE valor DOS_PUNTOS body_case BREAK END_OF_LINE . casos
    (101) casos -> . CASE valor DOS_PUNTOS body_case BREAK END_OF_LINE
    (102) casos -> . CASE valor DOS_PUNTOS BREAK END_OF_LINE
    (103) casos -> . CASE valor DOS_PUNTOS body_case BREAK END_OF_LINE casos
    (104) casos -> . CASE valor DOS_PUNTOS BREAK END_OF_LINE casos

    LLAVE_DER       reduce using rule 101 (casos -> CASE valor DOS_PUNTOS body_case BREAK END_OF_LINE .)
    CASE            shift and go to state 221

    casos                          shift and go to state 296

state 289

    (104) casos -> CASE valor DOS_PUNTOS BREAK END_OF_LINE casos .

    LLAVE_DER       reduce using rule 104 (casos -> CASE valor DOS_PUNTOS BREAK END_OF_LINE casos .)


state 290

    (109) body_case -> asignacion END_OF_LINE body_case .

    BREAK           reduce using rule 109 (body_case -> asignacion END_OF_LINE body_case .)


state 291

    (110) body_case -> declaracion END_OF_LINE body_case .

    BREAK           reduce using rule 110 (body_case -> declaracion END_OF_LINE body_case .)


state 292

    (112) body_case -> comparacion END_OF_LINE body_case .

    BREAK           reduce using rule 112 (body_case -> comparacion END_OF_LINE body_case .)


state 293

    (111) body_case -> salida_entrada END_OF_LINE body_case .

    BREAK           reduce using rule 111 (body_case -> salida_entrada END_OF_LINE body_case .)


state 294

    (113) for -> FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DER .

    $end            reduce using rule 113 (for -> FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DER .)
    LLAVE_DER       reduce using rule 113 (for -> FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DER .)


state 295

    (135) stack -> STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL NEW STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE . PAR_IZQ PAR_DER END_OF_LINE

    PAR_IZQ         shift and go to state 297


state 296

    (103) casos -> CASE valor DOS_PUNTOS body_case BREAK END_OF_LINE casos .

    LLAVE_DER       reduce using rule 103 (casos -> CASE valor DOS_PUNTOS body_case BREAK END_OF_LINE casos .)


state 297

    (135) stack -> STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL NEW STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ . PAR_DER END_OF_LINE

    PAR_DER         shift and go to state 298


state 298

    (135) stack -> STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL NEW STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER . END_OF_LINE

    END_OF_LINE     shift and go to state 299


state 299

    (135) stack -> STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL NEW STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINE .

    $end            reduce using rule 135 (stack -> STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL NEW STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINE .)
    LLAVE_DER       reduce using rule 135 (stack -> STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL NEW STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IGUAL_IGUAL in state 29 resolved as shift
WARNING: shift/reduce conflict for NO_IGUAL in state 29 resolved as shift
WARNING: shift/reduce conflict for MENOR_QUE in state 29 resolved as shift
WARNING: shift/reduce conflict for MENOR_O_IGUAL_QUE in state 29 resolved as shift
WARNING: shift/reduce conflict for MAYOR_QUE in state 29 resolved as shift
WARNING: shift/reduce conflict for MAYOR_O_IGUAL_QUE in state 29 resolved as shift
WARNING: shift/reduce conflict for IGUAL_IGUAL in state 35 resolved as shift
WARNING: shift/reduce conflict for NO_IGUAL in state 35 resolved as shift
WARNING: shift/reduce conflict for MENOR_QUE in state 35 resolved as shift
WARNING: shift/reduce conflict for MENOR_O_IGUAL_QUE in state 35 resolved as shift
WARNING: shift/reduce conflict for MAYOR_QUE in state 35 resolved as shift
WARNING: shift/reduce conflict for MAYOR_O_IGUAL_QUE in state 35 resolved as shift
