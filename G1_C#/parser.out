Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ADD
    AND
    AND_EQUAL
    AUMENTADO
    BREAK
    BYTE
    CASE
    CLASS
    COMA
    COMILLA_DOBLE
    COMILLA_SIMPLE
    CONST
    CONTINUE
    COR_DER
    COR_IZQ
    C_IDENT_TEXTUAL
    DECREMENTADO
    DEFAULT
    DIVIDIDO_POR
    DO
    DOS_PUNTOS
    ELSE
    EXC_OREQUAL
    FINALLY
    GLOBAL
    IN
    IR
    LAMBDA
    LEFTSHIFT_EQUAL
    LET
    MODULO_DE
    MULTIPLICADO_POR
    NEGACION
    NOR
    NULL
    NULL_EQUAL
    NULL_VAL
    OBJECT
    ON
    OP_TERNARIO
    OR
    ORDERBY
    OR_EQUAL
    PUNTO
    PUSH
    RETURN
    RIGHTSHIFT_EQUAL
    SHIFT_MAYOR
    SHIFT_MENOR
    SIMPLE_AND
    SIMPLE_OR
    STACK
    STRUCT
    SWITCH
    THIS
    TO_UPPER
    TYPEOF
    VAR
    WHEN
    WHERE
    WHILE

Grammar

Rule 0     S' -> body
Rule 1     body -> asignacion END_OF_LINE
Rule 2     body -> comparacion
Rule 3     body -> estructura_control
Rule 4     body -> estructura_datos
Rule 5     body -> expresion END_OF_LINE
Rule 6     body -> salida_entrada
Rule 7     body -> funcion
Rule 8     body -> declaracion END_OF_LINE
Rule 9     body -> empty
Rule 10    valor -> CHAR
Rule 11    valor -> numero
Rule 12    valor -> BOOL
Rule 13    valor -> STRING
Rule 14    valor -> IDENTIFICADOR
Rule 15    numero -> FLOAT
Rule 16    numero -> DOUBLE
Rule 17    numero -> INT
Rule 18    valor_tipo -> CHAR_TYPE
Rule 19    valor_tipo -> FLOAT_TYPE
Rule 20    valor_tipo -> DOUBLE_TYPE
Rule 21    valor_tipo -> INT_TYPE
Rule 22    valor_tipo -> BOOL_TYPE
Rule 23    valor_tipo -> STRING_TYPE
Rule 24    valor_tipo -> VOID
Rule 25    valor_tipo_inicializador -> FLOAT_TYPE
Rule 26    valor_tipo_inicializador -> DOUBLE_TYPE
Rule 27    valor_tipo_inicializador -> STRING_TYPE
Rule 28    valor_tipo_inicializador -> INT_TYPE
Rule 29    valor_tipo_inicializador -> BOOL_TYPE
Rule 30    valor_tipo_inicializador -> CHAR_TYPE
Rule 31    valor_tipo_inicializador -> IDENTIFICADOR
Rule 32    modificador_acceso -> PRIVATE
Rule 33    modificador_acceso -> PROTECTED
Rule 34    modificador_acceso -> PUBLIC
Rule 35    operador_realacional -> IGUAL_IGUAL
Rule 36    operador_realacional -> NO_IGUAL
Rule 37    operador_realacional -> MENOR_QUE
Rule 38    operador_realacional -> MENOR_O_IGUAL_QUE
Rule 39    operador_realacional -> MAYOR_QUE
Rule 40    operador_realacional -> MAYOR_O_IGUAL_QUE
Rule 41    operador_aritmentico -> SUMA
Rule 42    operador_aritmentico -> RESTA
Rule 43    operador_aritmentico -> MULTIPLICACION
Rule 44    operador_aritmentico -> DIVISION
Rule 45    operador_aritmentico -> MODULO
Rule 46    operador_condicional -> IGUAL_IGUAL
Rule 47    operador_condicional -> NO_IGUAL
Rule 48    operador_condicional -> MENOR_QUE
Rule 49    operador_condicional -> MENOR_O_IGUAL_QUE
Rule 50    operador_condicional -> MAYOR_QUE
Rule 51    operador_condicional -> MAYOR_O_IGUAL_QUE
Rule 52    operacion_string -> STRING SUMA STRING
Rule 53    operacion_string -> STRING SUMA IDENTIFICADOR
Rule 54    operacion_string -> IDENTIFICADOR SUMA STRING
Rule 55    operacion_string -> IDENTIFICADOR SUMA IDENTIFICADOR
Rule 56    empty -> END_OF_LINE
Rule 57    asignacion -> asignacionSimple
Rule 58    asignacionSimple -> IDENTIFICADOR IGUAL valor
Rule 59    asignacionSimple -> IDENTIFICADOR IGUAL expresion
Rule 60    declaracion -> valor_tipo IDENTIFICADOR
Rule 61    declaracion -> valor_tipo asignacion
Rule 62    comparacion -> valor operador_realacional valor
Rule 63    estructura_control -> while
Rule 64    estructura_control -> switch_case
Rule 65    estructura_control -> for
Rule 66    while -> IGUAL
Rule 67    switch_case -> IGUAL
Rule 68    for -> FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DER
Rule 69    forIterador -> IDENTIFICADOR operadorForIteracion
Rule 70    operadorForIteracion -> INCREMENTO
Rule 71    operadorForIteracion -> DECREMENTO
Rule 72    forCondicion -> IDENTIFICADOR operador_condicional valorForCondicion
Rule 73    valorForCondicion -> FLOAT
Rule 74    valorForCondicion -> DOUBLE
Rule 75    valorForCondicion -> INT
Rule 76    valorForCondicion -> IDENTIFICADOR
Rule 77    forInicializador -> tipoDatoForInicializador IDENTIFICADOR IGUAL valorForInicializador
Rule 78    forInicializador -> IDENTIFICADOR IGUAL valorForInicializador
Rule 79    tipoDatoForInicializador -> FLOAT_TYPE
Rule 80    tipoDatoForInicializador -> DOUBLE_TYPE
Rule 81    tipoDatoForInicializador -> INT_TYPE
Rule 82    valorForInicializador -> FLOAT
Rule 83    valorForInicializador -> DOUBLE
Rule 84    valorForInicializador -> INT
Rule 85    valorForInicializador -> IDENTIFICADOR
Rule 86    estructura_datos -> lista
Rule 87    lista -> LIST tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINE
Rule 88    tipoLista -> MENOR_QUE valor_tipo_inicializador MAYOR_QUE
Rule 89    expresion -> expresion_operacion_aritmetica
Rule 90    expresion -> expresion_condicional
Rule 91    expresion -> salida_entrada
Rule 92    expresion_operacion_aritmetica -> numero operador_aritmentico numero
Rule 93    expresion_operacion_aritmetica -> IDENTIFICADOR operador_aritmentico IDENTIFICADOR
Rule 94    expresion_condicional -> numero operador_condicional numero
Rule 95    expresion_condicional -> IDENTIFICADOR operador_condicional IDENTIFICADOR
Rule 96    salida_entrada -> salida_uno
Rule 97    salida_entrada -> salida_dos
Rule 98    salida_entrada -> salida_tres
Rule 99    salida_uno -> CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER
Rule 100   salida_uno -> CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER
Rule 101   salida_uno -> CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER
Rule 102   salida_dos -> CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER
Rule 103   salida_tres -> CONSOLE_READLINE PAR_IZQ PAR_DER
Rule 104   funcion -> funcion_tipo_uno
Rule 105   funcion_tipo_uno -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ body LLAVE_DER

Terminals, with rules where they appear

ADD                  : 
AND                  : 
AND_EQUAL            : 
AUMENTADO            : 
BOOL                 : 12
BOOL_TYPE            : 22 29
BREAK                : 
BYTE                 : 
CASE                 : 
CHAR                 : 10
CHAR_TYPE            : 18 30
CLASS                : 
COMA                 : 
COMILLA_DOBLE        : 
COMILLA_SIMPLE       : 
CONSOLE_READLINE     : 103
CONSOLE_WRITELINE    : 99 100 101 102
CONST                : 
CONTINUE             : 
COR_DER              : 
COR_IZQ              : 
C_CADENA_INTERPOLADA : 102
C_IDENT_TEXTUAL      : 
DECREMENTADO         : 
DECREMENTO           : 71
DEFAULT              : 
DIVIDIDO_POR         : 
DIVISION             : 44
DO                   : 
DOS_PUNTOS           : 
DOUBLE               : 16 74 83
DOUBLE_TYPE          : 20 26 80
ELSE                 : 
END_OF_LINE          : 1 5 8 56 68 68 87
EXC_OREQUAL          : 
FINALLY              : 
FLOAT                : 15 73 82
FLOAT_TYPE           : 19 25 79
FOR                  : 68
GLOBAL               : 
IDENTIFICADOR        : 14 31 53 54 55 55 58 59 60 69 72 76 77 78 85 87 93 93 95 95 101 105
IGUAL                : 58 59 66 67 77 78 87
IGUAL_IGUAL          : 35 46
IN                   : 
INCREMENTO           : 70
INT                  : 17 75 84
INT_TYPE             : 21 28 81
IR                   : 
LAMBDA               : 
LEFTSHIFT_EQUAL      : 
LET                  : 
LIST                 : 87 87
LLAVE_DER            : 68 105
LLAVE_IZQ            : 68 105
MAYOR_O_IGUAL_QUE    : 40 51
MAYOR_QUE            : 39 50 88
MENOR_O_IGUAL_QUE    : 38 49
MENOR_QUE            : 37 48 88
MODULO               : 45
MODULO_DE            : 
MULTIPLICACION       : 43
MULTIPLICADO_POR     : 
NEGACION             : 
NEW                  : 87
NOR                  : 
NO_IGUAL             : 36 47
NULL                 : 
NULL_EQUAL           : 
NULL_VAL             : 
OBJECT               : 
ON                   : 
OP_TERNARIO          : 
OR                   : 
ORDERBY              : 
OR_EQUAL             : 
PAR_DER              : 68 87 99 100 101 102 103 105
PAR_IZQ              : 68 87 99 100 101 102 103 105
PRIVATE              : 32
PROTECTED            : 33
PUBLIC               : 34
PUNTO                : 
PUSH                 : 
RESTA                : 42
RETURN               : 
RIGHTSHIFT_EQUAL     : 
SHIFT_MAYOR          : 
SHIFT_MENOR          : 
SIMPLE_AND           : 
SIMPLE_OR            : 
STACK                : 
STRING               : 13 52 52 53 54 99 102
STRING_TYPE          : 23 27
STRUCT               : 
SUMA                 : 41 52 53 54 55
SWITCH               : 
THIS                 : 
TO_UPPER             : 
TYPEOF               : 
VAR                  : 
VOID                 : 24 105
WHEN                 : 
WHERE                : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

asignacion           : 1 61
asignacionSimple     : 57
body                 : 68 105 0
comparacion          : 2
declaracion          : 8
empty                : 9
estructura_control   : 3
estructura_datos     : 4
expresion            : 5 59
expresion_condicional : 90
expresion_operacion_aritmetica : 89
for                  : 65
forCondicion         : 68
forInicializador     : 68
forIterador          : 68
funcion              : 7
funcion_tipo_uno     : 104
lista                : 86
modificador_acceso   : 105
numero               : 11 92 92 94 94
operacion_string     : 100
operadorForIteracion : 69
operador_aritmentico : 92 93
operador_condicional : 72 94 95
operador_realacional : 62
salida_dos           : 97
salida_entrada       : 6 91
salida_tres          : 98
salida_uno           : 96
switch_case          : 64
tipoDatoForInicializador : 77
tipoLista            : 87 87
valor                : 58 62 62
valorForCondicion    : 72
valorForInicializador : 77 78
valor_tipo           : 60 61
valor_tipo_inicializador : 88
while                : 63

Parsing method: LALR

state 0

    (0) S' -> . body
    (1) body -> . asignacion END_OF_LINE
    (2) body -> . comparacion
    (3) body -> . estructura_control
    (4) body -> . estructura_datos
    (5) body -> . expresion END_OF_LINE
    (6) body -> . salida_entrada
    (7) body -> . funcion
    (8) body -> . declaracion END_OF_LINE
    (9) body -> . empty
    (57) asignacion -> . asignacionSimple
    (62) comparacion -> . valor operador_realacional valor
    (63) estructura_control -> . while
    (64) estructura_control -> . switch_case
    (65) estructura_control -> . for
    (86) estructura_datos -> . lista
    (89) expresion -> . expresion_operacion_aritmetica
    (90) expresion -> . expresion_condicional
    (91) expresion -> . salida_entrada
    (96) salida_entrada -> . salida_uno
    (97) salida_entrada -> . salida_dos
    (98) salida_entrada -> . salida_tres
    (104) funcion -> . funcion_tipo_uno
    (60) declaracion -> . valor_tipo IDENTIFICADOR
    (61) declaracion -> . valor_tipo asignacion
    (56) empty -> . END_OF_LINE
    (58) asignacionSimple -> . IDENTIFICADOR IGUAL valor
    (59) asignacionSimple -> . IDENTIFICADOR IGUAL expresion
    (10) valor -> . CHAR
    (11) valor -> . numero
    (12) valor -> . BOOL
    (13) valor -> . STRING
    (14) valor -> . IDENTIFICADOR
    (66) while -> . IGUAL
    (67) switch_case -> . IGUAL
    (68) for -> . FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DER
    (87) lista -> . LIST tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINE
    (92) expresion_operacion_aritmetica -> . numero operador_aritmentico numero
    (93) expresion_operacion_aritmetica -> . IDENTIFICADOR operador_aritmentico IDENTIFICADOR
    (94) expresion_condicional -> . numero operador_condicional numero
    (95) expresion_condicional -> . IDENTIFICADOR operador_condicional IDENTIFICADOR
    (99) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER
    (100) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER
    (101) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER
    (102) salida_dos -> . CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER
    (103) salida_tres -> . CONSOLE_READLINE PAR_IZQ PAR_DER
    (105) funcion_tipo_uno -> . modificador_acceso VOID IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ body LLAVE_DER
    (18) valor_tipo -> . CHAR_TYPE
    (19) valor_tipo -> . FLOAT_TYPE
    (20) valor_tipo -> . DOUBLE_TYPE
    (21) valor_tipo -> . INT_TYPE
    (22) valor_tipo -> . BOOL_TYPE
    (23) valor_tipo -> . STRING_TYPE
    (24) valor_tipo -> . VOID
    (15) numero -> . FLOAT
    (16) numero -> . DOUBLE
    (17) numero -> . INT
    (32) modificador_acceso -> . PRIVATE
    (33) modificador_acceso -> . PROTECTED
    (34) modificador_acceso -> . PUBLIC

    END_OF_LINE     shift and go to state 3
    IDENTIFICADOR   shift and go to state 25
    CHAR            shift and go to state 27
    BOOL            shift and go to state 29
    STRING          shift and go to state 30
    IGUAL           shift and go to state 26
    FOR             shift and go to state 31
    LIST            shift and go to state 32
    CONSOLE_WRITELINE shift and go to state 33
    CONSOLE_READLINE shift and go to state 34
    CHAR_TYPE       shift and go to state 37
    FLOAT_TYPE      shift and go to state 38
    DOUBLE_TYPE     shift and go to state 39
    INT_TYPE        shift and go to state 40
    BOOL_TYPE       shift and go to state 41
    STRING_TYPE     shift and go to state 42
    VOID            shift and go to state 36
    FLOAT           shift and go to state 43
    DOUBLE          shift and go to state 44
    INT             shift and go to state 45
    PRIVATE         shift and go to state 46
    PROTECTED       shift and go to state 47
    PUBLIC          shift and go to state 48

    body                           shift and go to state 1
    asignacion                     shift and go to state 2
    comparacion                    shift and go to state 4
    estructura_control             shift and go to state 5
    estructura_datos               shift and go to state 6
    expresion                      shift and go to state 7
    salida_entrada                 shift and go to state 8
    funcion                        shift and go to state 9
    declaracion                    shift and go to state 10
    empty                          shift and go to state 11
    asignacionSimple               shift and go to state 12
    valor                          shift and go to state 13
    while                          shift and go to state 14
    switch_case                    shift and go to state 15
    for                            shift and go to state 16
    lista                          shift and go to state 17
    expresion_operacion_aritmetica shift and go to state 18
    expresion_condicional          shift and go to state 19
    salida_uno                     shift and go to state 20
    salida_dos                     shift and go to state 21
    salida_tres                    shift and go to state 22
    funcion_tipo_uno               shift and go to state 23
    valor_tipo                     shift and go to state 24
    numero                         shift and go to state 28
    modificador_acceso             shift and go to state 35

state 1

    (0) S' -> body .



state 2

    (1) body -> asignacion . END_OF_LINE

    END_OF_LINE     shift and go to state 49


state 3

    (56) empty -> END_OF_LINE .

    $end            reduce using rule 56 (empty -> END_OF_LINE .)
    LLAVE_DER       reduce using rule 56 (empty -> END_OF_LINE .)


state 4

    (2) body -> comparacion .

    $end            reduce using rule 2 (body -> comparacion .)
    LLAVE_DER       reduce using rule 2 (body -> comparacion .)


state 5

    (3) body -> estructura_control .

    $end            reduce using rule 3 (body -> estructura_control .)
    LLAVE_DER       reduce using rule 3 (body -> estructura_control .)


state 6

    (4) body -> estructura_datos .

    $end            reduce using rule 4 (body -> estructura_datos .)
    LLAVE_DER       reduce using rule 4 (body -> estructura_datos .)


state 7

    (5) body -> expresion . END_OF_LINE

    END_OF_LINE     shift and go to state 50


state 8

    (6) body -> salida_entrada .
    (91) expresion -> salida_entrada .

    $end            reduce using rule 6 (body -> salida_entrada .)
    LLAVE_DER       reduce using rule 6 (body -> salida_entrada .)
    END_OF_LINE     reduce using rule 91 (expresion -> salida_entrada .)


state 9

    (7) body -> funcion .

    $end            reduce using rule 7 (body -> funcion .)
    LLAVE_DER       reduce using rule 7 (body -> funcion .)


state 10

    (8) body -> declaracion . END_OF_LINE

    END_OF_LINE     shift and go to state 51


state 11

    (9) body -> empty .

    $end            reduce using rule 9 (body -> empty .)
    LLAVE_DER       reduce using rule 9 (body -> empty .)


state 12

    (57) asignacion -> asignacionSimple .

    END_OF_LINE     reduce using rule 57 (asignacion -> asignacionSimple .)


state 13

    (62) comparacion -> valor . operador_realacional valor
    (35) operador_realacional -> . IGUAL_IGUAL
    (36) operador_realacional -> . NO_IGUAL
    (37) operador_realacional -> . MENOR_QUE
    (38) operador_realacional -> . MENOR_O_IGUAL_QUE
    (39) operador_realacional -> . MAYOR_QUE
    (40) operador_realacional -> . MAYOR_O_IGUAL_QUE

    IGUAL_IGUAL     shift and go to state 53
    NO_IGUAL        shift and go to state 54
    MENOR_QUE       shift and go to state 55
    MENOR_O_IGUAL_QUE shift and go to state 56
    MAYOR_QUE       shift and go to state 57
    MAYOR_O_IGUAL_QUE shift and go to state 58

    operador_realacional           shift and go to state 52

state 14

    (63) estructura_control -> while .

    $end            reduce using rule 63 (estructura_control -> while .)
    LLAVE_DER       reduce using rule 63 (estructura_control -> while .)


state 15

    (64) estructura_control -> switch_case .

    $end            reduce using rule 64 (estructura_control -> switch_case .)
    LLAVE_DER       reduce using rule 64 (estructura_control -> switch_case .)


state 16

    (65) estructura_control -> for .

    $end            reduce using rule 65 (estructura_control -> for .)
    LLAVE_DER       reduce using rule 65 (estructura_control -> for .)


state 17

    (86) estructura_datos -> lista .

    $end            reduce using rule 86 (estructura_datos -> lista .)
    LLAVE_DER       reduce using rule 86 (estructura_datos -> lista .)


state 18

    (89) expresion -> expresion_operacion_aritmetica .

    END_OF_LINE     reduce using rule 89 (expresion -> expresion_operacion_aritmetica .)


state 19

    (90) expresion -> expresion_condicional .

    END_OF_LINE     reduce using rule 90 (expresion -> expresion_condicional .)


state 20

    (96) salida_entrada -> salida_uno .

    $end            reduce using rule 96 (salida_entrada -> salida_uno .)
    END_OF_LINE     reduce using rule 96 (salida_entrada -> salida_uno .)
    LLAVE_DER       reduce using rule 96 (salida_entrada -> salida_uno .)


state 21

    (97) salida_entrada -> salida_dos .

    $end            reduce using rule 97 (salida_entrada -> salida_dos .)
    END_OF_LINE     reduce using rule 97 (salida_entrada -> salida_dos .)
    LLAVE_DER       reduce using rule 97 (salida_entrada -> salida_dos .)


state 22

    (98) salida_entrada -> salida_tres .

    $end            reduce using rule 98 (salida_entrada -> salida_tres .)
    END_OF_LINE     reduce using rule 98 (salida_entrada -> salida_tres .)
    LLAVE_DER       reduce using rule 98 (salida_entrada -> salida_tres .)


state 23

    (104) funcion -> funcion_tipo_uno .

    $end            reduce using rule 104 (funcion -> funcion_tipo_uno .)
    LLAVE_DER       reduce using rule 104 (funcion -> funcion_tipo_uno .)


state 24

    (60) declaracion -> valor_tipo . IDENTIFICADOR
    (61) declaracion -> valor_tipo . asignacion
    (57) asignacion -> . asignacionSimple
    (58) asignacionSimple -> . IDENTIFICADOR IGUAL valor
    (59) asignacionSimple -> . IDENTIFICADOR IGUAL expresion

    IDENTIFICADOR   shift and go to state 59

    asignacion                     shift and go to state 60
    asignacionSimple               shift and go to state 12

state 25

    (58) asignacionSimple -> IDENTIFICADOR . IGUAL valor
    (59) asignacionSimple -> IDENTIFICADOR . IGUAL expresion
    (14) valor -> IDENTIFICADOR .
    (93) expresion_operacion_aritmetica -> IDENTIFICADOR . operador_aritmentico IDENTIFICADOR
    (95) expresion_condicional -> IDENTIFICADOR . operador_condicional IDENTIFICADOR
    (41) operador_aritmentico -> . SUMA
    (42) operador_aritmentico -> . RESTA
    (43) operador_aritmentico -> . MULTIPLICACION
    (44) operador_aritmentico -> . DIVISION
    (45) operador_aritmentico -> . MODULO
    (46) operador_condicional -> . IGUAL_IGUAL
    (47) operador_condicional -> . NO_IGUAL
    (48) operador_condicional -> . MENOR_QUE
    (49) operador_condicional -> . MENOR_O_IGUAL_QUE
    (50) operador_condicional -> . MAYOR_QUE
    (51) operador_condicional -> . MAYOR_O_IGUAL_QUE

  ! shift/reduce conflict for IGUAL_IGUAL resolved as shift
  ! shift/reduce conflict for NO_IGUAL resolved as shift
  ! shift/reduce conflict for MENOR_QUE resolved as shift
  ! shift/reduce conflict for MENOR_O_IGUAL_QUE resolved as shift
  ! shift/reduce conflict for MAYOR_QUE resolved as shift
  ! shift/reduce conflict for MAYOR_O_IGUAL_QUE resolved as shift
    IGUAL           shift and go to state 61
    SUMA            shift and go to state 64
    RESTA           shift and go to state 65
    MULTIPLICACION  shift and go to state 66
    DIVISION        shift and go to state 67
    MODULO          shift and go to state 68
    IGUAL_IGUAL     shift and go to state 69
    NO_IGUAL        shift and go to state 70
    MENOR_QUE       shift and go to state 71
    MENOR_O_IGUAL_QUE shift and go to state 72
    MAYOR_QUE       shift and go to state 73
    MAYOR_O_IGUAL_QUE shift and go to state 74

  ! IGUAL_IGUAL     [ reduce using rule 14 (valor -> IDENTIFICADOR .) ]
  ! NO_IGUAL        [ reduce using rule 14 (valor -> IDENTIFICADOR .) ]
  ! MENOR_QUE       [ reduce using rule 14 (valor -> IDENTIFICADOR .) ]
  ! MENOR_O_IGUAL_QUE [ reduce using rule 14 (valor -> IDENTIFICADOR .) ]
  ! MAYOR_QUE       [ reduce using rule 14 (valor -> IDENTIFICADOR .) ]
  ! MAYOR_O_IGUAL_QUE [ reduce using rule 14 (valor -> IDENTIFICADOR .) ]

    operador_aritmentico           shift and go to state 62
    operador_condicional           shift and go to state 63

state 26

    (66) while -> IGUAL .
    (67) switch_case -> IGUAL .

  ! reduce/reduce conflict for $end resolved using rule 66 (while -> IGUAL .)
  ! reduce/reduce conflict for LLAVE_DER resolved using rule 66 (while -> IGUAL .)
    $end            reduce using rule 66 (while -> IGUAL .)
    LLAVE_DER       reduce using rule 66 (while -> IGUAL .)

  ! $end            [ reduce using rule 67 (switch_case -> IGUAL .) ]
  ! LLAVE_DER       [ reduce using rule 67 (switch_case -> IGUAL .) ]


state 27

    (10) valor -> CHAR .

    IGUAL_IGUAL     reduce using rule 10 (valor -> CHAR .)
    NO_IGUAL        reduce using rule 10 (valor -> CHAR .)
    MENOR_QUE       reduce using rule 10 (valor -> CHAR .)
    MENOR_O_IGUAL_QUE reduce using rule 10 (valor -> CHAR .)
    MAYOR_QUE       reduce using rule 10 (valor -> CHAR .)
    MAYOR_O_IGUAL_QUE reduce using rule 10 (valor -> CHAR .)
    $end            reduce using rule 10 (valor -> CHAR .)
    LLAVE_DER       reduce using rule 10 (valor -> CHAR .)
    END_OF_LINE     reduce using rule 10 (valor -> CHAR .)


state 28

    (11) valor -> numero .
    (92) expresion_operacion_aritmetica -> numero . operador_aritmentico numero
    (94) expresion_condicional -> numero . operador_condicional numero
    (41) operador_aritmentico -> . SUMA
    (42) operador_aritmentico -> . RESTA
    (43) operador_aritmentico -> . MULTIPLICACION
    (44) operador_aritmentico -> . DIVISION
    (45) operador_aritmentico -> . MODULO
    (46) operador_condicional -> . IGUAL_IGUAL
    (47) operador_condicional -> . NO_IGUAL
    (48) operador_condicional -> . MENOR_QUE
    (49) operador_condicional -> . MENOR_O_IGUAL_QUE
    (50) operador_condicional -> . MAYOR_QUE
    (51) operador_condicional -> . MAYOR_O_IGUAL_QUE

  ! shift/reduce conflict for IGUAL_IGUAL resolved as shift
  ! shift/reduce conflict for NO_IGUAL resolved as shift
  ! shift/reduce conflict for MENOR_QUE resolved as shift
  ! shift/reduce conflict for MENOR_O_IGUAL_QUE resolved as shift
  ! shift/reduce conflict for MAYOR_QUE resolved as shift
  ! shift/reduce conflict for MAYOR_O_IGUAL_QUE resolved as shift
    END_OF_LINE     reduce using rule 11 (valor -> numero .)
    SUMA            shift and go to state 64
    RESTA           shift and go to state 65
    MULTIPLICACION  shift and go to state 66
    DIVISION        shift and go to state 67
    MODULO          shift and go to state 68
    IGUAL_IGUAL     shift and go to state 69
    NO_IGUAL        shift and go to state 70
    MENOR_QUE       shift and go to state 71
    MENOR_O_IGUAL_QUE shift and go to state 72
    MAYOR_QUE       shift and go to state 73
    MAYOR_O_IGUAL_QUE shift and go to state 74

  ! IGUAL_IGUAL     [ reduce using rule 11 (valor -> numero .) ]
  ! NO_IGUAL        [ reduce using rule 11 (valor -> numero .) ]
  ! MENOR_QUE       [ reduce using rule 11 (valor -> numero .) ]
  ! MENOR_O_IGUAL_QUE [ reduce using rule 11 (valor -> numero .) ]
  ! MAYOR_QUE       [ reduce using rule 11 (valor -> numero .) ]
  ! MAYOR_O_IGUAL_QUE [ reduce using rule 11 (valor -> numero .) ]

    operador_aritmentico           shift and go to state 75
    operador_condicional           shift and go to state 76

state 29

    (12) valor -> BOOL .

    IGUAL_IGUAL     reduce using rule 12 (valor -> BOOL .)
    NO_IGUAL        reduce using rule 12 (valor -> BOOL .)
    MENOR_QUE       reduce using rule 12 (valor -> BOOL .)
    MENOR_O_IGUAL_QUE reduce using rule 12 (valor -> BOOL .)
    MAYOR_QUE       reduce using rule 12 (valor -> BOOL .)
    MAYOR_O_IGUAL_QUE reduce using rule 12 (valor -> BOOL .)
    $end            reduce using rule 12 (valor -> BOOL .)
    LLAVE_DER       reduce using rule 12 (valor -> BOOL .)
    END_OF_LINE     reduce using rule 12 (valor -> BOOL .)


state 30

    (13) valor -> STRING .

    IGUAL_IGUAL     reduce using rule 13 (valor -> STRING .)
    NO_IGUAL        reduce using rule 13 (valor -> STRING .)
    MENOR_QUE       reduce using rule 13 (valor -> STRING .)
    MENOR_O_IGUAL_QUE reduce using rule 13 (valor -> STRING .)
    MAYOR_QUE       reduce using rule 13 (valor -> STRING .)
    MAYOR_O_IGUAL_QUE reduce using rule 13 (valor -> STRING .)
    $end            reduce using rule 13 (valor -> STRING .)
    LLAVE_DER       reduce using rule 13 (valor -> STRING .)
    END_OF_LINE     reduce using rule 13 (valor -> STRING .)


state 31

    (68) for -> FOR . PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DER

    PAR_IZQ         shift and go to state 77


state 32

    (87) lista -> LIST . tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINE
    (88) tipoLista -> . MENOR_QUE valor_tipo_inicializador MAYOR_QUE

    MENOR_QUE       shift and go to state 79

    tipoLista                      shift and go to state 78

state 33

    (99) salida_uno -> CONSOLE_WRITELINE . PAR_IZQ STRING PAR_DER
    (100) salida_uno -> CONSOLE_WRITELINE . PAR_IZQ operacion_string PAR_DER
    (101) salida_uno -> CONSOLE_WRITELINE . PAR_IZQ IDENTIFICADOR PAR_DER
    (102) salida_dos -> CONSOLE_WRITELINE . PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER

    PAR_IZQ         shift and go to state 80


state 34

    (103) salida_tres -> CONSOLE_READLINE . PAR_IZQ PAR_DER

    PAR_IZQ         shift and go to state 81


state 35

    (105) funcion_tipo_uno -> modificador_acceso . VOID IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ body LLAVE_DER

    VOID            shift and go to state 82


state 36

    (24) valor_tipo -> VOID .

    IDENTIFICADOR   reduce using rule 24 (valor_tipo -> VOID .)


state 37

    (18) valor_tipo -> CHAR_TYPE .

    IDENTIFICADOR   reduce using rule 18 (valor_tipo -> CHAR_TYPE .)


state 38

    (19) valor_tipo -> FLOAT_TYPE .

    IDENTIFICADOR   reduce using rule 19 (valor_tipo -> FLOAT_TYPE .)


state 39

    (20) valor_tipo -> DOUBLE_TYPE .

    IDENTIFICADOR   reduce using rule 20 (valor_tipo -> DOUBLE_TYPE .)


state 40

    (21) valor_tipo -> INT_TYPE .

    IDENTIFICADOR   reduce using rule 21 (valor_tipo -> INT_TYPE .)


state 41

    (22) valor_tipo -> BOOL_TYPE .

    IDENTIFICADOR   reduce using rule 22 (valor_tipo -> BOOL_TYPE .)


state 42

    (23) valor_tipo -> STRING_TYPE .

    IDENTIFICADOR   reduce using rule 23 (valor_tipo -> STRING_TYPE .)


state 43

    (15) numero -> FLOAT .

    SUMA            reduce using rule 15 (numero -> FLOAT .)
    RESTA           reduce using rule 15 (numero -> FLOAT .)
    MULTIPLICACION  reduce using rule 15 (numero -> FLOAT .)
    DIVISION        reduce using rule 15 (numero -> FLOAT .)
    MODULO          reduce using rule 15 (numero -> FLOAT .)
    IGUAL_IGUAL     reduce using rule 15 (numero -> FLOAT .)
    NO_IGUAL        reduce using rule 15 (numero -> FLOAT .)
    MENOR_QUE       reduce using rule 15 (numero -> FLOAT .)
    MENOR_O_IGUAL_QUE reduce using rule 15 (numero -> FLOAT .)
    MAYOR_QUE       reduce using rule 15 (numero -> FLOAT .)
    MAYOR_O_IGUAL_QUE reduce using rule 15 (numero -> FLOAT .)
    $end            reduce using rule 15 (numero -> FLOAT .)
    LLAVE_DER       reduce using rule 15 (numero -> FLOAT .)
    END_OF_LINE     reduce using rule 15 (numero -> FLOAT .)


state 44

    (16) numero -> DOUBLE .

    SUMA            reduce using rule 16 (numero -> DOUBLE .)
    RESTA           reduce using rule 16 (numero -> DOUBLE .)
    MULTIPLICACION  reduce using rule 16 (numero -> DOUBLE .)
    DIVISION        reduce using rule 16 (numero -> DOUBLE .)
    MODULO          reduce using rule 16 (numero -> DOUBLE .)
    IGUAL_IGUAL     reduce using rule 16 (numero -> DOUBLE .)
    NO_IGUAL        reduce using rule 16 (numero -> DOUBLE .)
    MENOR_QUE       reduce using rule 16 (numero -> DOUBLE .)
    MENOR_O_IGUAL_QUE reduce using rule 16 (numero -> DOUBLE .)
    MAYOR_QUE       reduce using rule 16 (numero -> DOUBLE .)
    MAYOR_O_IGUAL_QUE reduce using rule 16 (numero -> DOUBLE .)
    $end            reduce using rule 16 (numero -> DOUBLE .)
    LLAVE_DER       reduce using rule 16 (numero -> DOUBLE .)
    END_OF_LINE     reduce using rule 16 (numero -> DOUBLE .)


state 45

    (17) numero -> INT .

    SUMA            reduce using rule 17 (numero -> INT .)
    RESTA           reduce using rule 17 (numero -> INT .)
    MULTIPLICACION  reduce using rule 17 (numero -> INT .)
    DIVISION        reduce using rule 17 (numero -> INT .)
    MODULO          reduce using rule 17 (numero -> INT .)
    IGUAL_IGUAL     reduce using rule 17 (numero -> INT .)
    NO_IGUAL        reduce using rule 17 (numero -> INT .)
    MENOR_QUE       reduce using rule 17 (numero -> INT .)
    MENOR_O_IGUAL_QUE reduce using rule 17 (numero -> INT .)
    MAYOR_QUE       reduce using rule 17 (numero -> INT .)
    MAYOR_O_IGUAL_QUE reduce using rule 17 (numero -> INT .)
    $end            reduce using rule 17 (numero -> INT .)
    LLAVE_DER       reduce using rule 17 (numero -> INT .)
    END_OF_LINE     reduce using rule 17 (numero -> INT .)


state 46

    (32) modificador_acceso -> PRIVATE .

    VOID            reduce using rule 32 (modificador_acceso -> PRIVATE .)


state 47

    (33) modificador_acceso -> PROTECTED .

    VOID            reduce using rule 33 (modificador_acceso -> PROTECTED .)


state 48

    (34) modificador_acceso -> PUBLIC .

    VOID            reduce using rule 34 (modificador_acceso -> PUBLIC .)


state 49

    (1) body -> asignacion END_OF_LINE .

    $end            reduce using rule 1 (body -> asignacion END_OF_LINE .)
    LLAVE_DER       reduce using rule 1 (body -> asignacion END_OF_LINE .)


state 50

    (5) body -> expresion END_OF_LINE .

    $end            reduce using rule 5 (body -> expresion END_OF_LINE .)
    LLAVE_DER       reduce using rule 5 (body -> expresion END_OF_LINE .)


state 51

    (8) body -> declaracion END_OF_LINE .

    $end            reduce using rule 8 (body -> declaracion END_OF_LINE .)
    LLAVE_DER       reduce using rule 8 (body -> declaracion END_OF_LINE .)


state 52

    (62) comparacion -> valor operador_realacional . valor
    (10) valor -> . CHAR
    (11) valor -> . numero
    (12) valor -> . BOOL
    (13) valor -> . STRING
    (14) valor -> . IDENTIFICADOR
    (15) numero -> . FLOAT
    (16) numero -> . DOUBLE
    (17) numero -> . INT

    CHAR            shift and go to state 27
    BOOL            shift and go to state 29
    STRING          shift and go to state 30
    IDENTIFICADOR   shift and go to state 85
    FLOAT           shift and go to state 43
    DOUBLE          shift and go to state 44
    INT             shift and go to state 45

    valor                          shift and go to state 83
    numero                         shift and go to state 84

state 53

    (35) operador_realacional -> IGUAL_IGUAL .

    CHAR            reduce using rule 35 (operador_realacional -> IGUAL_IGUAL .)
    BOOL            reduce using rule 35 (operador_realacional -> IGUAL_IGUAL .)
    STRING          reduce using rule 35 (operador_realacional -> IGUAL_IGUAL .)
    IDENTIFICADOR   reduce using rule 35 (operador_realacional -> IGUAL_IGUAL .)
    FLOAT           reduce using rule 35 (operador_realacional -> IGUAL_IGUAL .)
    DOUBLE          reduce using rule 35 (operador_realacional -> IGUAL_IGUAL .)
    INT             reduce using rule 35 (operador_realacional -> IGUAL_IGUAL .)


state 54

    (36) operador_realacional -> NO_IGUAL .

    CHAR            reduce using rule 36 (operador_realacional -> NO_IGUAL .)
    BOOL            reduce using rule 36 (operador_realacional -> NO_IGUAL .)
    STRING          reduce using rule 36 (operador_realacional -> NO_IGUAL .)
    IDENTIFICADOR   reduce using rule 36 (operador_realacional -> NO_IGUAL .)
    FLOAT           reduce using rule 36 (operador_realacional -> NO_IGUAL .)
    DOUBLE          reduce using rule 36 (operador_realacional -> NO_IGUAL .)
    INT             reduce using rule 36 (operador_realacional -> NO_IGUAL .)


state 55

    (37) operador_realacional -> MENOR_QUE .

    CHAR            reduce using rule 37 (operador_realacional -> MENOR_QUE .)
    BOOL            reduce using rule 37 (operador_realacional -> MENOR_QUE .)
    STRING          reduce using rule 37 (operador_realacional -> MENOR_QUE .)
    IDENTIFICADOR   reduce using rule 37 (operador_realacional -> MENOR_QUE .)
    FLOAT           reduce using rule 37 (operador_realacional -> MENOR_QUE .)
    DOUBLE          reduce using rule 37 (operador_realacional -> MENOR_QUE .)
    INT             reduce using rule 37 (operador_realacional -> MENOR_QUE .)


state 56

    (38) operador_realacional -> MENOR_O_IGUAL_QUE .

    CHAR            reduce using rule 38 (operador_realacional -> MENOR_O_IGUAL_QUE .)
    BOOL            reduce using rule 38 (operador_realacional -> MENOR_O_IGUAL_QUE .)
    STRING          reduce using rule 38 (operador_realacional -> MENOR_O_IGUAL_QUE .)
    IDENTIFICADOR   reduce using rule 38 (operador_realacional -> MENOR_O_IGUAL_QUE .)
    FLOAT           reduce using rule 38 (operador_realacional -> MENOR_O_IGUAL_QUE .)
    DOUBLE          reduce using rule 38 (operador_realacional -> MENOR_O_IGUAL_QUE .)
    INT             reduce using rule 38 (operador_realacional -> MENOR_O_IGUAL_QUE .)


state 57

    (39) operador_realacional -> MAYOR_QUE .

    CHAR            reduce using rule 39 (operador_realacional -> MAYOR_QUE .)
    BOOL            reduce using rule 39 (operador_realacional -> MAYOR_QUE .)
    STRING          reduce using rule 39 (operador_realacional -> MAYOR_QUE .)
    IDENTIFICADOR   reduce using rule 39 (operador_realacional -> MAYOR_QUE .)
    FLOAT           reduce using rule 39 (operador_realacional -> MAYOR_QUE .)
    DOUBLE          reduce using rule 39 (operador_realacional -> MAYOR_QUE .)
    INT             reduce using rule 39 (operador_realacional -> MAYOR_QUE .)


state 58

    (40) operador_realacional -> MAYOR_O_IGUAL_QUE .

    CHAR            reduce using rule 40 (operador_realacional -> MAYOR_O_IGUAL_QUE .)
    BOOL            reduce using rule 40 (operador_realacional -> MAYOR_O_IGUAL_QUE .)
    STRING          reduce using rule 40 (operador_realacional -> MAYOR_O_IGUAL_QUE .)
    IDENTIFICADOR   reduce using rule 40 (operador_realacional -> MAYOR_O_IGUAL_QUE .)
    FLOAT           reduce using rule 40 (operador_realacional -> MAYOR_O_IGUAL_QUE .)
    DOUBLE          reduce using rule 40 (operador_realacional -> MAYOR_O_IGUAL_QUE .)
    INT             reduce using rule 40 (operador_realacional -> MAYOR_O_IGUAL_QUE .)


state 59

    (60) declaracion -> valor_tipo IDENTIFICADOR .
    (58) asignacionSimple -> IDENTIFICADOR . IGUAL valor
    (59) asignacionSimple -> IDENTIFICADOR . IGUAL expresion

    END_OF_LINE     reduce using rule 60 (declaracion -> valor_tipo IDENTIFICADOR .)
    IGUAL           shift and go to state 61


state 60

    (61) declaracion -> valor_tipo asignacion .

    END_OF_LINE     reduce using rule 61 (declaracion -> valor_tipo asignacion .)


state 61

    (58) asignacionSimple -> IDENTIFICADOR IGUAL . valor
    (59) asignacionSimple -> IDENTIFICADOR IGUAL . expresion
    (10) valor -> . CHAR
    (11) valor -> . numero
    (12) valor -> . BOOL
    (13) valor -> . STRING
    (14) valor -> . IDENTIFICADOR
    (89) expresion -> . expresion_operacion_aritmetica
    (90) expresion -> . expresion_condicional
    (91) expresion -> . salida_entrada
    (15) numero -> . FLOAT
    (16) numero -> . DOUBLE
    (17) numero -> . INT
    (92) expresion_operacion_aritmetica -> . numero operador_aritmentico numero
    (93) expresion_operacion_aritmetica -> . IDENTIFICADOR operador_aritmentico IDENTIFICADOR
    (94) expresion_condicional -> . numero operador_condicional numero
    (95) expresion_condicional -> . IDENTIFICADOR operador_condicional IDENTIFICADOR
    (96) salida_entrada -> . salida_uno
    (97) salida_entrada -> . salida_dos
    (98) salida_entrada -> . salida_tres
    (99) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER
    (100) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER
    (101) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER
    (102) salida_dos -> . CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER
    (103) salida_tres -> . CONSOLE_READLINE PAR_IZQ PAR_DER

    CHAR            shift and go to state 27
    BOOL            shift and go to state 29
    STRING          shift and go to state 30
    IDENTIFICADOR   shift and go to state 86
    FLOAT           shift and go to state 43
    DOUBLE          shift and go to state 44
    INT             shift and go to state 45
    CONSOLE_WRITELINE shift and go to state 33
    CONSOLE_READLINE shift and go to state 34

    valor                          shift and go to state 87
    expresion                      shift and go to state 88
    numero                         shift and go to state 28
    expresion_operacion_aritmetica shift and go to state 18
    expresion_condicional          shift and go to state 19
    salida_entrada                 shift and go to state 89
    salida_uno                     shift and go to state 20
    salida_dos                     shift and go to state 21
    salida_tres                    shift and go to state 22

state 62

    (93) expresion_operacion_aritmetica -> IDENTIFICADOR operador_aritmentico . IDENTIFICADOR

    IDENTIFICADOR   shift and go to state 90


state 63

    (95) expresion_condicional -> IDENTIFICADOR operador_condicional . IDENTIFICADOR

    IDENTIFICADOR   shift and go to state 91


state 64

    (41) operador_aritmentico -> SUMA .

    IDENTIFICADOR   reduce using rule 41 (operador_aritmentico -> SUMA .)
    FLOAT           reduce using rule 41 (operador_aritmentico -> SUMA .)
    DOUBLE          reduce using rule 41 (operador_aritmentico -> SUMA .)
    INT             reduce using rule 41 (operador_aritmentico -> SUMA .)


state 65

    (42) operador_aritmentico -> RESTA .

    IDENTIFICADOR   reduce using rule 42 (operador_aritmentico -> RESTA .)
    FLOAT           reduce using rule 42 (operador_aritmentico -> RESTA .)
    DOUBLE          reduce using rule 42 (operador_aritmentico -> RESTA .)
    INT             reduce using rule 42 (operador_aritmentico -> RESTA .)


state 66

    (43) operador_aritmentico -> MULTIPLICACION .

    IDENTIFICADOR   reduce using rule 43 (operador_aritmentico -> MULTIPLICACION .)
    FLOAT           reduce using rule 43 (operador_aritmentico -> MULTIPLICACION .)
    DOUBLE          reduce using rule 43 (operador_aritmentico -> MULTIPLICACION .)
    INT             reduce using rule 43 (operador_aritmentico -> MULTIPLICACION .)


state 67

    (44) operador_aritmentico -> DIVISION .

    IDENTIFICADOR   reduce using rule 44 (operador_aritmentico -> DIVISION .)
    FLOAT           reduce using rule 44 (operador_aritmentico -> DIVISION .)
    DOUBLE          reduce using rule 44 (operador_aritmentico -> DIVISION .)
    INT             reduce using rule 44 (operador_aritmentico -> DIVISION .)


state 68

    (45) operador_aritmentico -> MODULO .

    IDENTIFICADOR   reduce using rule 45 (operador_aritmentico -> MODULO .)
    FLOAT           reduce using rule 45 (operador_aritmentico -> MODULO .)
    DOUBLE          reduce using rule 45 (operador_aritmentico -> MODULO .)
    INT             reduce using rule 45 (operador_aritmentico -> MODULO .)


state 69

    (46) operador_condicional -> IGUAL_IGUAL .

    IDENTIFICADOR   reduce using rule 46 (operador_condicional -> IGUAL_IGUAL .)
    FLOAT           reduce using rule 46 (operador_condicional -> IGUAL_IGUAL .)
    DOUBLE          reduce using rule 46 (operador_condicional -> IGUAL_IGUAL .)
    INT             reduce using rule 46 (operador_condicional -> IGUAL_IGUAL .)


state 70

    (47) operador_condicional -> NO_IGUAL .

    IDENTIFICADOR   reduce using rule 47 (operador_condicional -> NO_IGUAL .)
    FLOAT           reduce using rule 47 (operador_condicional -> NO_IGUAL .)
    DOUBLE          reduce using rule 47 (operador_condicional -> NO_IGUAL .)
    INT             reduce using rule 47 (operador_condicional -> NO_IGUAL .)


state 71

    (48) operador_condicional -> MENOR_QUE .

    IDENTIFICADOR   reduce using rule 48 (operador_condicional -> MENOR_QUE .)
    FLOAT           reduce using rule 48 (operador_condicional -> MENOR_QUE .)
    DOUBLE          reduce using rule 48 (operador_condicional -> MENOR_QUE .)
    INT             reduce using rule 48 (operador_condicional -> MENOR_QUE .)


state 72

    (49) operador_condicional -> MENOR_O_IGUAL_QUE .

    IDENTIFICADOR   reduce using rule 49 (operador_condicional -> MENOR_O_IGUAL_QUE .)
    FLOAT           reduce using rule 49 (operador_condicional -> MENOR_O_IGUAL_QUE .)
    DOUBLE          reduce using rule 49 (operador_condicional -> MENOR_O_IGUAL_QUE .)
    INT             reduce using rule 49 (operador_condicional -> MENOR_O_IGUAL_QUE .)


state 73

    (50) operador_condicional -> MAYOR_QUE .

    IDENTIFICADOR   reduce using rule 50 (operador_condicional -> MAYOR_QUE .)
    FLOAT           reduce using rule 50 (operador_condicional -> MAYOR_QUE .)
    DOUBLE          reduce using rule 50 (operador_condicional -> MAYOR_QUE .)
    INT             reduce using rule 50 (operador_condicional -> MAYOR_QUE .)


state 74

    (51) operador_condicional -> MAYOR_O_IGUAL_QUE .

    IDENTIFICADOR   reduce using rule 51 (operador_condicional -> MAYOR_O_IGUAL_QUE .)
    FLOAT           reduce using rule 51 (operador_condicional -> MAYOR_O_IGUAL_QUE .)
    DOUBLE          reduce using rule 51 (operador_condicional -> MAYOR_O_IGUAL_QUE .)
    INT             reduce using rule 51 (operador_condicional -> MAYOR_O_IGUAL_QUE .)


state 75

    (92) expresion_operacion_aritmetica -> numero operador_aritmentico . numero
    (15) numero -> . FLOAT
    (16) numero -> . DOUBLE
    (17) numero -> . INT

    FLOAT           shift and go to state 43
    DOUBLE          shift and go to state 44
    INT             shift and go to state 45

    numero                         shift and go to state 92

state 76

    (94) expresion_condicional -> numero operador_condicional . numero
    (15) numero -> . FLOAT
    (16) numero -> . DOUBLE
    (17) numero -> . INT

    FLOAT           shift and go to state 43
    DOUBLE          shift and go to state 44
    INT             shift and go to state 45

    numero                         shift and go to state 93

state 77

    (68) for -> FOR PAR_IZQ . forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DER
    (77) forInicializador -> . tipoDatoForInicializador IDENTIFICADOR IGUAL valorForInicializador
    (78) forInicializador -> . IDENTIFICADOR IGUAL valorForInicializador
    (79) tipoDatoForInicializador -> . FLOAT_TYPE
    (80) tipoDatoForInicializador -> . DOUBLE_TYPE
    (81) tipoDatoForInicializador -> . INT_TYPE

    IDENTIFICADOR   shift and go to state 96
    FLOAT_TYPE      shift and go to state 97
    DOUBLE_TYPE     shift and go to state 98
    INT_TYPE        shift and go to state 99

    forInicializador               shift and go to state 94
    tipoDatoForInicializador       shift and go to state 95

state 78

    (87) lista -> LIST tipoLista . IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINE

    IDENTIFICADOR   shift and go to state 100


state 79

    (88) tipoLista -> MENOR_QUE . valor_tipo_inicializador MAYOR_QUE
    (25) valor_tipo_inicializador -> . FLOAT_TYPE
    (26) valor_tipo_inicializador -> . DOUBLE_TYPE
    (27) valor_tipo_inicializador -> . STRING_TYPE
    (28) valor_tipo_inicializador -> . INT_TYPE
    (29) valor_tipo_inicializador -> . BOOL_TYPE
    (30) valor_tipo_inicializador -> . CHAR_TYPE
    (31) valor_tipo_inicializador -> . IDENTIFICADOR

    FLOAT_TYPE      shift and go to state 102
    DOUBLE_TYPE     shift and go to state 103
    STRING_TYPE     shift and go to state 104
    INT_TYPE        shift and go to state 105
    BOOL_TYPE       shift and go to state 106
    CHAR_TYPE       shift and go to state 107
    IDENTIFICADOR   shift and go to state 108

    valor_tipo_inicializador       shift and go to state 101

state 80

    (99) salida_uno -> CONSOLE_WRITELINE PAR_IZQ . STRING PAR_DER
    (100) salida_uno -> CONSOLE_WRITELINE PAR_IZQ . operacion_string PAR_DER
    (101) salida_uno -> CONSOLE_WRITELINE PAR_IZQ . IDENTIFICADOR PAR_DER
    (102) salida_dos -> CONSOLE_WRITELINE PAR_IZQ . C_CADENA_INTERPOLADA STRING PAR_DER
    (52) operacion_string -> . STRING SUMA STRING
    (53) operacion_string -> . STRING SUMA IDENTIFICADOR
    (54) operacion_string -> . IDENTIFICADOR SUMA STRING
    (55) operacion_string -> . IDENTIFICADOR SUMA IDENTIFICADOR

    STRING          shift and go to state 109
    IDENTIFICADOR   shift and go to state 111
    C_CADENA_INTERPOLADA shift and go to state 112

    operacion_string               shift and go to state 110

state 81

    (103) salida_tres -> CONSOLE_READLINE PAR_IZQ . PAR_DER

    PAR_DER         shift and go to state 113


state 82

    (105) funcion_tipo_uno -> modificador_acceso VOID . IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ body LLAVE_DER

    IDENTIFICADOR   shift and go to state 114


state 83

    (62) comparacion -> valor operador_realacional valor .

    $end            reduce using rule 62 (comparacion -> valor operador_realacional valor .)
    LLAVE_DER       reduce using rule 62 (comparacion -> valor operador_realacional valor .)


state 84

    (11) valor -> numero .

    $end            reduce using rule 11 (valor -> numero .)
    LLAVE_DER       reduce using rule 11 (valor -> numero .)


state 85

    (14) valor -> IDENTIFICADOR .

    $end            reduce using rule 14 (valor -> IDENTIFICADOR .)
    LLAVE_DER       reduce using rule 14 (valor -> IDENTIFICADOR .)


state 86

    (14) valor -> IDENTIFICADOR .
    (93) expresion_operacion_aritmetica -> IDENTIFICADOR . operador_aritmentico IDENTIFICADOR
    (95) expresion_condicional -> IDENTIFICADOR . operador_condicional IDENTIFICADOR
    (41) operador_aritmentico -> . SUMA
    (42) operador_aritmentico -> . RESTA
    (43) operador_aritmentico -> . MULTIPLICACION
    (44) operador_aritmentico -> . DIVISION
    (45) operador_aritmentico -> . MODULO
    (46) operador_condicional -> . IGUAL_IGUAL
    (47) operador_condicional -> . NO_IGUAL
    (48) operador_condicional -> . MENOR_QUE
    (49) operador_condicional -> . MENOR_O_IGUAL_QUE
    (50) operador_condicional -> . MAYOR_QUE
    (51) operador_condicional -> . MAYOR_O_IGUAL_QUE

    END_OF_LINE     reduce using rule 14 (valor -> IDENTIFICADOR .)
    SUMA            shift and go to state 64
    RESTA           shift and go to state 65
    MULTIPLICACION  shift and go to state 66
    DIVISION        shift and go to state 67
    MODULO          shift and go to state 68
    IGUAL_IGUAL     shift and go to state 69
    NO_IGUAL        shift and go to state 70
    MENOR_QUE       shift and go to state 71
    MENOR_O_IGUAL_QUE shift and go to state 72
    MAYOR_QUE       shift and go to state 73
    MAYOR_O_IGUAL_QUE shift and go to state 74

    operador_aritmentico           shift and go to state 62
    operador_condicional           shift and go to state 63

state 87

    (58) asignacionSimple -> IDENTIFICADOR IGUAL valor .

    END_OF_LINE     reduce using rule 58 (asignacionSimple -> IDENTIFICADOR IGUAL valor .)


state 88

    (59) asignacionSimple -> IDENTIFICADOR IGUAL expresion .

    END_OF_LINE     reduce using rule 59 (asignacionSimple -> IDENTIFICADOR IGUAL expresion .)


state 89

    (91) expresion -> salida_entrada .

    END_OF_LINE     reduce using rule 91 (expresion -> salida_entrada .)


state 90

    (93) expresion_operacion_aritmetica -> IDENTIFICADOR operador_aritmentico IDENTIFICADOR .

    END_OF_LINE     reduce using rule 93 (expresion_operacion_aritmetica -> IDENTIFICADOR operador_aritmentico IDENTIFICADOR .)


state 91

    (95) expresion_condicional -> IDENTIFICADOR operador_condicional IDENTIFICADOR .

    END_OF_LINE     reduce using rule 95 (expresion_condicional -> IDENTIFICADOR operador_condicional IDENTIFICADOR .)


state 92

    (92) expresion_operacion_aritmetica -> numero operador_aritmentico numero .

    END_OF_LINE     reduce using rule 92 (expresion_operacion_aritmetica -> numero operador_aritmentico numero .)


state 93

    (94) expresion_condicional -> numero operador_condicional numero .

    END_OF_LINE     reduce using rule 94 (expresion_condicional -> numero operador_condicional numero .)


state 94

    (68) for -> FOR PAR_IZQ forInicializador . END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DER

    END_OF_LINE     shift and go to state 115


state 95

    (77) forInicializador -> tipoDatoForInicializador . IDENTIFICADOR IGUAL valorForInicializador

    IDENTIFICADOR   shift and go to state 116


state 96

    (78) forInicializador -> IDENTIFICADOR . IGUAL valorForInicializador

    IGUAL           shift and go to state 117


state 97

    (79) tipoDatoForInicializador -> FLOAT_TYPE .

    IDENTIFICADOR   reduce using rule 79 (tipoDatoForInicializador -> FLOAT_TYPE .)


state 98

    (80) tipoDatoForInicializador -> DOUBLE_TYPE .

    IDENTIFICADOR   reduce using rule 80 (tipoDatoForInicializador -> DOUBLE_TYPE .)


state 99

    (81) tipoDatoForInicializador -> INT_TYPE .

    IDENTIFICADOR   reduce using rule 81 (tipoDatoForInicializador -> INT_TYPE .)


state 100

    (87) lista -> LIST tipoLista IDENTIFICADOR . IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINE

    IGUAL           shift and go to state 118


state 101

    (88) tipoLista -> MENOR_QUE valor_tipo_inicializador . MAYOR_QUE

    MAYOR_QUE       shift and go to state 119


state 102

    (25) valor_tipo_inicializador -> FLOAT_TYPE .

    MAYOR_QUE       reduce using rule 25 (valor_tipo_inicializador -> FLOAT_TYPE .)


state 103

    (26) valor_tipo_inicializador -> DOUBLE_TYPE .

    MAYOR_QUE       reduce using rule 26 (valor_tipo_inicializador -> DOUBLE_TYPE .)


state 104

    (27) valor_tipo_inicializador -> STRING_TYPE .

    MAYOR_QUE       reduce using rule 27 (valor_tipo_inicializador -> STRING_TYPE .)


state 105

    (28) valor_tipo_inicializador -> INT_TYPE .

    MAYOR_QUE       reduce using rule 28 (valor_tipo_inicializador -> INT_TYPE .)


state 106

    (29) valor_tipo_inicializador -> BOOL_TYPE .

    MAYOR_QUE       reduce using rule 29 (valor_tipo_inicializador -> BOOL_TYPE .)


state 107

    (30) valor_tipo_inicializador -> CHAR_TYPE .

    MAYOR_QUE       reduce using rule 30 (valor_tipo_inicializador -> CHAR_TYPE .)


state 108

    (31) valor_tipo_inicializador -> IDENTIFICADOR .

    MAYOR_QUE       reduce using rule 31 (valor_tipo_inicializador -> IDENTIFICADOR .)


state 109

    (99) salida_uno -> CONSOLE_WRITELINE PAR_IZQ STRING . PAR_DER
    (52) operacion_string -> STRING . SUMA STRING
    (53) operacion_string -> STRING . SUMA IDENTIFICADOR

    PAR_DER         shift and go to state 120
    SUMA            shift and go to state 121


state 110

    (100) salida_uno -> CONSOLE_WRITELINE PAR_IZQ operacion_string . PAR_DER

    PAR_DER         shift and go to state 122


state 111

    (101) salida_uno -> CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR . PAR_DER
    (54) operacion_string -> IDENTIFICADOR . SUMA STRING
    (55) operacion_string -> IDENTIFICADOR . SUMA IDENTIFICADOR

    PAR_DER         shift and go to state 123
    SUMA            shift and go to state 124


state 112

    (102) salida_dos -> CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA . STRING PAR_DER

    STRING          shift and go to state 125


state 113

    (103) salida_tres -> CONSOLE_READLINE PAR_IZQ PAR_DER .

    $end            reduce using rule 103 (salida_tres -> CONSOLE_READLINE PAR_IZQ PAR_DER .)
    END_OF_LINE     reduce using rule 103 (salida_tres -> CONSOLE_READLINE PAR_IZQ PAR_DER .)
    LLAVE_DER       reduce using rule 103 (salida_tres -> CONSOLE_READLINE PAR_IZQ PAR_DER .)


state 114

    (105) funcion_tipo_uno -> modificador_acceso VOID IDENTIFICADOR . PAR_IZQ PAR_DER LLAVE_IZQ body LLAVE_DER

    PAR_IZQ         shift and go to state 126


state 115

    (68) for -> FOR PAR_IZQ forInicializador END_OF_LINE . forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DER
    (72) forCondicion -> . IDENTIFICADOR operador_condicional valorForCondicion

    IDENTIFICADOR   shift and go to state 128

    forCondicion                   shift and go to state 127

state 116

    (77) forInicializador -> tipoDatoForInicializador IDENTIFICADOR . IGUAL valorForInicializador

    IGUAL           shift and go to state 129


state 117

    (78) forInicializador -> IDENTIFICADOR IGUAL . valorForInicializador
    (82) valorForInicializador -> . FLOAT
    (83) valorForInicializador -> . DOUBLE
    (84) valorForInicializador -> . INT
    (85) valorForInicializador -> . IDENTIFICADOR

    FLOAT           shift and go to state 132
    DOUBLE          shift and go to state 133
    INT             shift and go to state 134
    IDENTIFICADOR   shift and go to state 130

    valorForInicializador          shift and go to state 131

state 118

    (87) lista -> LIST tipoLista IDENTIFICADOR IGUAL . NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINE

    NEW             shift and go to state 135


state 119

    (88) tipoLista -> MENOR_QUE valor_tipo_inicializador MAYOR_QUE .

    IDENTIFICADOR   reduce using rule 88 (tipoLista -> MENOR_QUE valor_tipo_inicializador MAYOR_QUE .)
    PAR_IZQ         reduce using rule 88 (tipoLista -> MENOR_QUE valor_tipo_inicializador MAYOR_QUE .)


state 120

    (99) salida_uno -> CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER .

    $end            reduce using rule 99 (salida_uno -> CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER .)
    END_OF_LINE     reduce using rule 99 (salida_uno -> CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER .)
    LLAVE_DER       reduce using rule 99 (salida_uno -> CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER .)


state 121

    (52) operacion_string -> STRING SUMA . STRING
    (53) operacion_string -> STRING SUMA . IDENTIFICADOR

    STRING          shift and go to state 136
    IDENTIFICADOR   shift and go to state 137


state 122

    (100) salida_uno -> CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER .

    $end            reduce using rule 100 (salida_uno -> CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER .)
    END_OF_LINE     reduce using rule 100 (salida_uno -> CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER .)
    LLAVE_DER       reduce using rule 100 (salida_uno -> CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER .)


state 123

    (101) salida_uno -> CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER .

    $end            reduce using rule 101 (salida_uno -> CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER .)
    END_OF_LINE     reduce using rule 101 (salida_uno -> CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER .)
    LLAVE_DER       reduce using rule 101 (salida_uno -> CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER .)


state 124

    (54) operacion_string -> IDENTIFICADOR SUMA . STRING
    (55) operacion_string -> IDENTIFICADOR SUMA . IDENTIFICADOR

    STRING          shift and go to state 139
    IDENTIFICADOR   shift and go to state 138


state 125

    (102) salida_dos -> CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING . PAR_DER

    PAR_DER         shift and go to state 140


state 126

    (105) funcion_tipo_uno -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ . PAR_DER LLAVE_IZQ body LLAVE_DER

    PAR_DER         shift and go to state 141


state 127

    (68) for -> FOR PAR_IZQ forInicializador END_OF_LINE forCondicion . END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DER

    END_OF_LINE     shift and go to state 142


state 128

    (72) forCondicion -> IDENTIFICADOR . operador_condicional valorForCondicion
    (46) operador_condicional -> . IGUAL_IGUAL
    (47) operador_condicional -> . NO_IGUAL
    (48) operador_condicional -> . MENOR_QUE
    (49) operador_condicional -> . MENOR_O_IGUAL_QUE
    (50) operador_condicional -> . MAYOR_QUE
    (51) operador_condicional -> . MAYOR_O_IGUAL_QUE

    IGUAL_IGUAL     shift and go to state 69
    NO_IGUAL        shift and go to state 70
    MENOR_QUE       shift and go to state 71
    MENOR_O_IGUAL_QUE shift and go to state 72
    MAYOR_QUE       shift and go to state 73
    MAYOR_O_IGUAL_QUE shift and go to state 74

    operador_condicional           shift and go to state 143

state 129

    (77) forInicializador -> tipoDatoForInicializador IDENTIFICADOR IGUAL . valorForInicializador
    (82) valorForInicializador -> . FLOAT
    (83) valorForInicializador -> . DOUBLE
    (84) valorForInicializador -> . INT
    (85) valorForInicializador -> . IDENTIFICADOR

    FLOAT           shift and go to state 132
    DOUBLE          shift and go to state 133
    INT             shift and go to state 134
    IDENTIFICADOR   shift and go to state 130

    valorForInicializador          shift and go to state 144

state 130

    (85) valorForInicializador -> IDENTIFICADOR .

    END_OF_LINE     reduce using rule 85 (valorForInicializador -> IDENTIFICADOR .)


state 131

    (78) forInicializador -> IDENTIFICADOR IGUAL valorForInicializador .

    END_OF_LINE     reduce using rule 78 (forInicializador -> IDENTIFICADOR IGUAL valorForInicializador .)


state 132

    (82) valorForInicializador -> FLOAT .

    END_OF_LINE     reduce using rule 82 (valorForInicializador -> FLOAT .)


state 133

    (83) valorForInicializador -> DOUBLE .

    END_OF_LINE     reduce using rule 83 (valorForInicializador -> DOUBLE .)


state 134

    (84) valorForInicializador -> INT .

    END_OF_LINE     reduce using rule 84 (valorForInicializador -> INT .)


state 135

    (87) lista -> LIST tipoLista IDENTIFICADOR IGUAL NEW . LIST tipoLista PAR_IZQ PAR_DER END_OF_LINE

    LIST            shift and go to state 145


state 136

    (52) operacion_string -> STRING SUMA STRING .

    PAR_DER         reduce using rule 52 (operacion_string -> STRING SUMA STRING .)


state 137

    (53) operacion_string -> STRING SUMA IDENTIFICADOR .

    PAR_DER         reduce using rule 53 (operacion_string -> STRING SUMA IDENTIFICADOR .)


state 138

    (55) operacion_string -> IDENTIFICADOR SUMA IDENTIFICADOR .

    PAR_DER         reduce using rule 55 (operacion_string -> IDENTIFICADOR SUMA IDENTIFICADOR .)


state 139

    (54) operacion_string -> IDENTIFICADOR SUMA STRING .

    PAR_DER         reduce using rule 54 (operacion_string -> IDENTIFICADOR SUMA STRING .)


state 140

    (102) salida_dos -> CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER .

    $end            reduce using rule 102 (salida_dos -> CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER .)
    END_OF_LINE     reduce using rule 102 (salida_dos -> CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER .)
    LLAVE_DER       reduce using rule 102 (salida_dos -> CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER .)


state 141

    (105) funcion_tipo_uno -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ PAR_DER . LLAVE_IZQ body LLAVE_DER

    LLAVE_IZQ       shift and go to state 146


state 142

    (68) for -> FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE . forIterador PAR_DER LLAVE_IZQ body LLAVE_DER
    (69) forIterador -> . IDENTIFICADOR operadorForIteracion

    IDENTIFICADOR   shift and go to state 148

    forIterador                    shift and go to state 147

state 143

    (72) forCondicion -> IDENTIFICADOR operador_condicional . valorForCondicion
    (73) valorForCondicion -> . FLOAT
    (74) valorForCondicion -> . DOUBLE
    (75) valorForCondicion -> . INT
    (76) valorForCondicion -> . IDENTIFICADOR

    FLOAT           shift and go to state 151
    DOUBLE          shift and go to state 152
    INT             shift and go to state 153
    IDENTIFICADOR   shift and go to state 149

    valorForCondicion              shift and go to state 150

state 144

    (77) forInicializador -> tipoDatoForInicializador IDENTIFICADOR IGUAL valorForInicializador .

    END_OF_LINE     reduce using rule 77 (forInicializador -> tipoDatoForInicializador IDENTIFICADOR IGUAL valorForInicializador .)


state 145

    (87) lista -> LIST tipoLista IDENTIFICADOR IGUAL NEW LIST . tipoLista PAR_IZQ PAR_DER END_OF_LINE
    (88) tipoLista -> . MENOR_QUE valor_tipo_inicializador MAYOR_QUE

    MENOR_QUE       shift and go to state 79

    tipoLista                      shift and go to state 154

state 146

    (105) funcion_tipo_uno -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ . body LLAVE_DER
    (1) body -> . asignacion END_OF_LINE
    (2) body -> . comparacion
    (3) body -> . estructura_control
    (4) body -> . estructura_datos
    (5) body -> . expresion END_OF_LINE
    (6) body -> . salida_entrada
    (7) body -> . funcion
    (8) body -> . declaracion END_OF_LINE
    (9) body -> . empty
    (57) asignacion -> . asignacionSimple
    (62) comparacion -> . valor operador_realacional valor
    (63) estructura_control -> . while
    (64) estructura_control -> . switch_case
    (65) estructura_control -> . for
    (86) estructura_datos -> . lista
    (89) expresion -> . expresion_operacion_aritmetica
    (90) expresion -> . expresion_condicional
    (91) expresion -> . salida_entrada
    (96) salida_entrada -> . salida_uno
    (97) salida_entrada -> . salida_dos
    (98) salida_entrada -> . salida_tres
    (104) funcion -> . funcion_tipo_uno
    (60) declaracion -> . valor_tipo IDENTIFICADOR
    (61) declaracion -> . valor_tipo asignacion
    (56) empty -> . END_OF_LINE
    (58) asignacionSimple -> . IDENTIFICADOR IGUAL valor
    (59) asignacionSimple -> . IDENTIFICADOR IGUAL expresion
    (10) valor -> . CHAR
    (11) valor -> . numero
    (12) valor -> . BOOL
    (13) valor -> . STRING
    (14) valor -> . IDENTIFICADOR
    (66) while -> . IGUAL
    (67) switch_case -> . IGUAL
    (68) for -> . FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DER
    (87) lista -> . LIST tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINE
    (92) expresion_operacion_aritmetica -> . numero operador_aritmentico numero
    (93) expresion_operacion_aritmetica -> . IDENTIFICADOR operador_aritmentico IDENTIFICADOR
    (94) expresion_condicional -> . numero operador_condicional numero
    (95) expresion_condicional -> . IDENTIFICADOR operador_condicional IDENTIFICADOR
    (99) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER
    (100) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER
    (101) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER
    (102) salida_dos -> . CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER
    (103) salida_tres -> . CONSOLE_READLINE PAR_IZQ PAR_DER
    (105) funcion_tipo_uno -> . modificador_acceso VOID IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ body LLAVE_DER
    (18) valor_tipo -> . CHAR_TYPE
    (19) valor_tipo -> . FLOAT_TYPE
    (20) valor_tipo -> . DOUBLE_TYPE
    (21) valor_tipo -> . INT_TYPE
    (22) valor_tipo -> . BOOL_TYPE
    (23) valor_tipo -> . STRING_TYPE
    (24) valor_tipo -> . VOID
    (15) numero -> . FLOAT
    (16) numero -> . DOUBLE
    (17) numero -> . INT
    (32) modificador_acceso -> . PRIVATE
    (33) modificador_acceso -> . PROTECTED
    (34) modificador_acceso -> . PUBLIC

    END_OF_LINE     shift and go to state 3
    IDENTIFICADOR   shift and go to state 25
    CHAR            shift and go to state 27
    BOOL            shift and go to state 29
    STRING          shift and go to state 30
    IGUAL           shift and go to state 26
    FOR             shift and go to state 31
    LIST            shift and go to state 32
    CONSOLE_WRITELINE shift and go to state 33
    CONSOLE_READLINE shift and go to state 34
    CHAR_TYPE       shift and go to state 37
    FLOAT_TYPE      shift and go to state 38
    DOUBLE_TYPE     shift and go to state 39
    INT_TYPE        shift and go to state 40
    BOOL_TYPE       shift and go to state 41
    STRING_TYPE     shift and go to state 42
    VOID            shift and go to state 36
    FLOAT           shift and go to state 43
    DOUBLE          shift and go to state 44
    INT             shift and go to state 45
    PRIVATE         shift and go to state 46
    PROTECTED       shift and go to state 47
    PUBLIC          shift and go to state 48

    modificador_acceso             shift and go to state 35
    body                           shift and go to state 155
    asignacion                     shift and go to state 2
    comparacion                    shift and go to state 4
    estructura_control             shift and go to state 5
    estructura_datos               shift and go to state 6
    expresion                      shift and go to state 7
    salida_entrada                 shift and go to state 8
    funcion                        shift and go to state 9
    declaracion                    shift and go to state 10
    empty                          shift and go to state 11
    asignacionSimple               shift and go to state 12
    valor                          shift and go to state 13
    while                          shift and go to state 14
    switch_case                    shift and go to state 15
    for                            shift and go to state 16
    lista                          shift and go to state 17
    expresion_operacion_aritmetica shift and go to state 18
    expresion_condicional          shift and go to state 19
    salida_uno                     shift and go to state 20
    salida_dos                     shift and go to state 21
    salida_tres                    shift and go to state 22
    funcion_tipo_uno               shift and go to state 23
    valor_tipo                     shift and go to state 24
    numero                         shift and go to state 28

state 147

    (68) for -> FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador . PAR_DER LLAVE_IZQ body LLAVE_DER

    PAR_DER         shift and go to state 156


state 148

    (69) forIterador -> IDENTIFICADOR . operadorForIteracion
    (70) operadorForIteracion -> . INCREMENTO
    (71) operadorForIteracion -> . DECREMENTO

    INCREMENTO      shift and go to state 158
    DECREMENTO      shift and go to state 159

    operadorForIteracion           shift and go to state 157

state 149

    (76) valorForCondicion -> IDENTIFICADOR .

    END_OF_LINE     reduce using rule 76 (valorForCondicion -> IDENTIFICADOR .)


state 150

    (72) forCondicion -> IDENTIFICADOR operador_condicional valorForCondicion .

    END_OF_LINE     reduce using rule 72 (forCondicion -> IDENTIFICADOR operador_condicional valorForCondicion .)


state 151

    (73) valorForCondicion -> FLOAT .

    END_OF_LINE     reduce using rule 73 (valorForCondicion -> FLOAT .)


state 152

    (74) valorForCondicion -> DOUBLE .

    END_OF_LINE     reduce using rule 74 (valorForCondicion -> DOUBLE .)


state 153

    (75) valorForCondicion -> INT .

    END_OF_LINE     reduce using rule 75 (valorForCondicion -> INT .)


state 154

    (87) lista -> LIST tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista . PAR_IZQ PAR_DER END_OF_LINE

    PAR_IZQ         shift and go to state 160


state 155

    (105) funcion_tipo_uno -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ body . LLAVE_DER

    LLAVE_DER       shift and go to state 161


state 156

    (68) for -> FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER . LLAVE_IZQ body LLAVE_DER

    LLAVE_IZQ       shift and go to state 162


state 157

    (69) forIterador -> IDENTIFICADOR operadorForIteracion .

    PAR_DER         reduce using rule 69 (forIterador -> IDENTIFICADOR operadorForIteracion .)


state 158

    (70) operadorForIteracion -> INCREMENTO .

    PAR_DER         reduce using rule 70 (operadorForIteracion -> INCREMENTO .)


state 159

    (71) operadorForIteracion -> DECREMENTO .

    PAR_DER         reduce using rule 71 (operadorForIteracion -> DECREMENTO .)


state 160

    (87) lista -> LIST tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ . PAR_DER END_OF_LINE

    PAR_DER         shift and go to state 163


state 161

    (105) funcion_tipo_uno -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ body LLAVE_DER .

    $end            reduce using rule 105 (funcion_tipo_uno -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ body LLAVE_DER .)
    LLAVE_DER       reduce using rule 105 (funcion_tipo_uno -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ body LLAVE_DER .)


state 162

    (68) for -> FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ . body LLAVE_DER
    (1) body -> . asignacion END_OF_LINE
    (2) body -> . comparacion
    (3) body -> . estructura_control
    (4) body -> . estructura_datos
    (5) body -> . expresion END_OF_LINE
    (6) body -> . salida_entrada
    (7) body -> . funcion
    (8) body -> . declaracion END_OF_LINE
    (9) body -> . empty
    (57) asignacion -> . asignacionSimple
    (62) comparacion -> . valor operador_realacional valor
    (63) estructura_control -> . while
    (64) estructura_control -> . switch_case
    (65) estructura_control -> . for
    (86) estructura_datos -> . lista
    (89) expresion -> . expresion_operacion_aritmetica
    (90) expresion -> . expresion_condicional
    (91) expresion -> . salida_entrada
    (96) salida_entrada -> . salida_uno
    (97) salida_entrada -> . salida_dos
    (98) salida_entrada -> . salida_tres
    (104) funcion -> . funcion_tipo_uno
    (60) declaracion -> . valor_tipo IDENTIFICADOR
    (61) declaracion -> . valor_tipo asignacion
    (56) empty -> . END_OF_LINE
    (58) asignacionSimple -> . IDENTIFICADOR IGUAL valor
    (59) asignacionSimple -> . IDENTIFICADOR IGUAL expresion
    (10) valor -> . CHAR
    (11) valor -> . numero
    (12) valor -> . BOOL
    (13) valor -> . STRING
    (14) valor -> . IDENTIFICADOR
    (66) while -> . IGUAL
    (67) switch_case -> . IGUAL
    (68) for -> . FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DER
    (87) lista -> . LIST tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINE
    (92) expresion_operacion_aritmetica -> . numero operador_aritmentico numero
    (93) expresion_operacion_aritmetica -> . IDENTIFICADOR operador_aritmentico IDENTIFICADOR
    (94) expresion_condicional -> . numero operador_condicional numero
    (95) expresion_condicional -> . IDENTIFICADOR operador_condicional IDENTIFICADOR
    (99) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER
    (100) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER
    (101) salida_uno -> . CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER
    (102) salida_dos -> . CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER
    (103) salida_tres -> . CONSOLE_READLINE PAR_IZQ PAR_DER
    (105) funcion_tipo_uno -> . modificador_acceso VOID IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ body LLAVE_DER
    (18) valor_tipo -> . CHAR_TYPE
    (19) valor_tipo -> . FLOAT_TYPE
    (20) valor_tipo -> . DOUBLE_TYPE
    (21) valor_tipo -> . INT_TYPE
    (22) valor_tipo -> . BOOL_TYPE
    (23) valor_tipo -> . STRING_TYPE
    (24) valor_tipo -> . VOID
    (15) numero -> . FLOAT
    (16) numero -> . DOUBLE
    (17) numero -> . INT
    (32) modificador_acceso -> . PRIVATE
    (33) modificador_acceso -> . PROTECTED
    (34) modificador_acceso -> . PUBLIC

    END_OF_LINE     shift and go to state 3
    IDENTIFICADOR   shift and go to state 25
    CHAR            shift and go to state 27
    BOOL            shift and go to state 29
    STRING          shift and go to state 30
    IGUAL           shift and go to state 26
    FOR             shift and go to state 31
    LIST            shift and go to state 32
    CONSOLE_WRITELINE shift and go to state 33
    CONSOLE_READLINE shift and go to state 34
    CHAR_TYPE       shift and go to state 37
    FLOAT_TYPE      shift and go to state 38
    DOUBLE_TYPE     shift and go to state 39
    INT_TYPE        shift and go to state 40
    BOOL_TYPE       shift and go to state 41
    STRING_TYPE     shift and go to state 42
    VOID            shift and go to state 36
    FLOAT           shift and go to state 43
    DOUBLE          shift and go to state 44
    INT             shift and go to state 45
    PRIVATE         shift and go to state 46
    PROTECTED       shift and go to state 47
    PUBLIC          shift and go to state 48

    body                           shift and go to state 164
    asignacion                     shift and go to state 2
    comparacion                    shift and go to state 4
    estructura_control             shift and go to state 5
    estructura_datos               shift and go to state 6
    expresion                      shift and go to state 7
    salida_entrada                 shift and go to state 8
    funcion                        shift and go to state 9
    declaracion                    shift and go to state 10
    empty                          shift and go to state 11
    asignacionSimple               shift and go to state 12
    valor                          shift and go to state 13
    while                          shift and go to state 14
    switch_case                    shift and go to state 15
    for                            shift and go to state 16
    lista                          shift and go to state 17
    expresion_operacion_aritmetica shift and go to state 18
    expresion_condicional          shift and go to state 19
    salida_uno                     shift and go to state 20
    salida_dos                     shift and go to state 21
    salida_tres                    shift and go to state 22
    funcion_tipo_uno               shift and go to state 23
    valor_tipo                     shift and go to state 24
    numero                         shift and go to state 28
    modificador_acceso             shift and go to state 35

state 163

    (87) lista -> LIST tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER . END_OF_LINE

    END_OF_LINE     shift and go to state 165


state 164

    (68) for -> FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body . LLAVE_DER

    LLAVE_DER       shift and go to state 166


state 165

    (87) lista -> LIST tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINE .

    $end            reduce using rule 87 (lista -> LIST tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINE .)
    LLAVE_DER       reduce using rule 87 (lista -> LIST tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINE .)


state 166

    (68) for -> FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DER .

    $end            reduce using rule 68 (for -> FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DER .)
    LLAVE_DER       reduce using rule 68 (for -> FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DER .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IGUAL_IGUAL in state 25 resolved as shift
WARNING: shift/reduce conflict for NO_IGUAL in state 25 resolved as shift
WARNING: shift/reduce conflict for MENOR_QUE in state 25 resolved as shift
WARNING: shift/reduce conflict for MENOR_O_IGUAL_QUE in state 25 resolved as shift
WARNING: shift/reduce conflict for MAYOR_QUE in state 25 resolved as shift
WARNING: shift/reduce conflict for MAYOR_O_IGUAL_QUE in state 25 resolved as shift
WARNING: shift/reduce conflict for IGUAL_IGUAL in state 28 resolved as shift
WARNING: shift/reduce conflict for NO_IGUAL in state 28 resolved as shift
WARNING: shift/reduce conflict for MENOR_QUE in state 28 resolved as shift
WARNING: shift/reduce conflict for MENOR_O_IGUAL_QUE in state 28 resolved as shift
WARNING: shift/reduce conflict for MAYOR_QUE in state 28 resolved as shift
WARNING: shift/reduce conflict for MAYOR_O_IGUAL_QUE in state 28 resolved as shift
WARNING: reduce/reduce conflict in state 26 resolved using rule (while -> IGUAL)
WARNING: rejected rule (switch_case -> IGUAL) in state 26
WARNING: Rule (switch_case -> IGUAL) is never reduced
