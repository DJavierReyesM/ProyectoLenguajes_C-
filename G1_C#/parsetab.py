
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD AND AND_EQUAL AUMENTADO BOOL BOOL_TYPE BREAK BYTE CASE CHAR CHAR_TYPE CLASS COMA COMILLA_DOBLE COMILLA_SIMPLE CONSOLE_READLINE CONSOLE_WRITELINE CONST CONTINUE COR_DER COR_IZQ C_CADENA_INTERPOLADA C_IDENT_TEXTUAL DECREMENTADO DECREMENTO DEFAULT DIVIDIDO_POR DIVISION DO DOS_PUNTOS DOUBLE DOUBLE_TYPE ELSE END_OF_LINE EXC_OREQUAL FINALLY FLOAT FLOAT_TYPE FOR GLOBAL IDENTIFICADOR IGUAL IGUAL_IGUAL IN INCREMENTO INT INT_TYPE IR LAMBDA LEFTSHIFT_EQUAL LET LIST LLAVE_DER LLAVE_IZQ MAYOR_O_IGUAL_QUE MAYOR_QUE MENOR_O_IGUAL_QUE MENOR_QUE MODULO MODULO_DE MULTIPLICACION MULTIPLICADO_POR NEGACION NEW NOR NO_IGUAL NULL NULL_EQUAL NULL_VAL OBJECT ON OP_TERNARIO OR ORDERBY OR_EQUAL PAR_DER PAR_IZQ POP PRIVATE PROTECTED PUBLIC PUNTO PUSH QUEUE RESTA RETURN RIGHTSHIFT_EQUAL SHIFT_MAYOR SHIFT_MENOR SIMPLE_AND SIMPLE_OR STACK STRING STRING_TYPE STRUCT SUMA SWITCH THIS TO_UPPER TYPEOF VAR VOID WHEN WHERE WHILEbody : asignacion END_OF_LINE\n  | comparacion\n  | estructura_control\n  | estructura_datos\n  | expresion END_OF_LINE\n  | salida_entrada END_OF_LINE\n  | funcion\n  | declaracion END_OF_LINE\n  | empty\n  | funciones_estructura_datos END_OF_LINE\n  | lambda_exp\n  valor : CHAR\n  | numero\n  | BOOL\n  | STRING\n  | IDENTIFICADOR\n  numero : FLOAT\n  | DOUBLE\n  | INT\n  ftipo : valor_tipo\n                   | VOID\n    valor_tipo : CHAR_TYPE\n  | FLOAT_TYPE\n  | DOUBLE_TYPE\n  | INT_TYPE\n  | BOOL_TYPE\n  | STRING_TYPE\n  valor_tipo_inicializador : FLOAT_TYPE\n    | DOUBLE_TYPE\n    | STRING_TYPE\n    | INT_TYPE\n    | BOOL_TYPE\n    | CHAR_TYPE\n    | IDENTIFICADORmodificador_acceso : PRIVATE\n  | PROTECTED\n  | PUBLIC\n  operador_realacional : IGUAL_IGUAL\n  | NO_IGUAL \n  | MENOR_QUE\n  | MENOR_O_IGUAL_QUE\n  | MAYOR_QUE\n  | MAYOR_O_IGUAL_QUE\n  operador_aritmentico : SUMA\n  | RESTA\n  | MULTIPLICACION\n  | DIVISION\n  | MODULO\n  operador_condicional : IGUAL_IGUAL\n  | NO_IGUAL\n  | MENOR_QUE\n  | MENOR_O_IGUAL_QUE\n  | MAYOR_QUE\n  | MAYOR_O_IGUAL_QUE\n  operacion_string : STRING SUMA STRING\n    | STRING SUMA IDENTIFICADOR\n    | IDENTIFICADOR SUMA STRING\n    | IDENTIFICADOR SUMA IDENTIFICADORempty : END_OF_LINEasignacion : asignacionSimple\n                | asignacionCompuesta\n                | asignacionClase\n                | asignacionEstructuraD\n                | asignacionNull\n                | asignacionIndex\n   asignacionSimple : IDENTIFICADOR IGUAL valor\n                      | IDENTIFICADOR IGUAL expresion\n                      | IDENTIFICADOR IGUAL salida_tres\n                      | IDENTIFICADOR IGUAL index\n  asignacionNull : IDENTIFICADOR IGUAL NULLasignacionClase : IDENTIFICADOR IGUAL NEW IDENTIFICADOR PAR_IZQ PAR_DERasignacionEstructuraD : IDENTIFICADOR IGUAL asignacionPila\n                            | IDENTIFICADOR IGUAL asignacionQueue\n                            | IDENTIFICADOR IGUAL asignacionList\n    asignacionPila : NEW STACK tipoLista PAR_IZQ PAR_DERasignacionQueue : NEW QUEUE tipoLista PAR_IZQ PAR_DERasignacionList : NEW LIST tipoLista PAR_IZQ PAR_DERasignacionIndex : index IGUAL index\n                       | index IGUAL valor\n    index : IDENTIFICADOR COR_IZQ INT COR_DER\n            | IDENTIFICADOR COR_IZQ IDENTIFICADOR COR_DER\n    asignacionCompuesta : asignacionCompuesta_Logic\n                        | asignacionCompuesta_Number\n                        | asignacionCompuesta_Null\n                        | asignacionCompuesta_Shift\n  asignacionCompuesta_Logic : IDENTIFICADOR operadoresCompuestosLogic BOOL\n                               | IDENTIFICADOR operadoresCompuestosLogic expresion_condicional\n                               | IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR\n                               | IDENTIFICADOR operadoresCompuestosLogic INT\n  asignacionCompuesta_Number : IDENTIFICADOR operadoresCompuestosNumber numero\n                                | IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica\n                                | IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR\n  asignacionCompuesta_Null : IDENTIFICADOR NULL_EQUAL valor\n                                | IDENTIFICADOR NULL_EQUAL expresion\n                                | IDENTIFICADOR NULL_EQUAL asignacionPila\n                                | IDENTIFICADOR NULL_EQUAL asignacionQueue\n                                | IDENTIFICADOR NULL_EQUAL asignacionListasignacionCompuesta_Shift : IDENTIFICADOR operadoresCompuestosShift IDENTIFICADOR\n                                | IDENTIFICADOR operadoresCompuestosShift INT\n     operadoresCompuestosNumber : AUMENTADO\n                          | DECREMENTADO\n                          | MULTIPLICADO_POR\n                          | DIVIDIDO_POR\n                          | MODULO_DE\n   operadoresCompuestosLogic : AND_EQUAL\n                                | OR_EQUAL\n                                | EXC_OREQUAL\n  operadoresCompuestosShift : LEFTSHIFT_EQUAL\n                                | RIGHTSHIFT_EQUAL\n    declaracion : valor_tipo IDENTIFICADOR\n                 | declaracionEstructuraD\n                 | declaracionAsignacion\n                 | declaracionClase\n                 | declaracionNull\n  declaracionNull : valor_tipo OP_TERNARIO IDENTIFICADORdeclaracionClase : IDENTIFICADOR IDENTIFICADOR declaracionAsignacion : valor_tipo asignacionSimple\n                            | declaracionClase IGUAL NEW IDENTIFICADOR PAR_IZQ PAR_DER\n                            | declaracionClase IGUAL NULL\n                            | declaracionClase IGUAL IDENTIFICADOR\n                            | declaracionNull IGUAL valor\n                            | declaracionNull IGUAL expresion\n                            | declaracionNull IGUAL NULL\n                            | declaracionEstructuraD IGUAL NULL\n\n  declaracionEstructuraD : declaracionList\n                              | declaracionQueue\n                              | declaracionPila\n    declaracionList : LIST tipoLista IDENTIFICADORdeclaracionQueue : QUEUE tipoLista IDENTIFICADORdeclaracionPila : STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADORcomparacion : valor operador_realacional valorestructura_control : while\n  | switch_case\n  | for\n  while : while_normal\n           | while_do\n  while_normal : WHILE PAR_IZQ expresion_condicional PAR_DER LLAVE_IZQ body_while LLAVE_DERwhile_do : DO LLAVE_IZQ body_while LLAVE_DER WHILE PAR_IZQ expresion_condicional PAR_DER END_OF_LINEbody_while : asignacion END_OF_LINE\n                  | declaracion END_OF_LINE\n                  | salida_entrada END_OF_LINE\n                  | BREAK END_OF_LINE\n                  | CONTINUE END_OF_LINE\n                  | asignacion END_OF_LINE body_while\n                  | declaracion END_OF_LINE body_while\n                  | salida_entrada END_OF_LINE body_while\n                  | BREAK END_OF_LINE body_while\n                  | CONTINUE END_OF_LINE body_while\n\n    switch_case : SWITCH PAR_IZQ valor PAR_DER LLAVE_IZQ casos LLAVE_DERcasos : CASE valor DOS_PUNTOS body_case BREAK END_OF_LINE\n  | CASE valor DOS_PUNTOS BREAK END_OF_LINE\n  | CASE valor DOS_PUNTOS body_case BREAK END_OF_LINE casos\n  | CASE valor DOS_PUNTOS BREAK END_OF_LINE casos\n  body_case : asignacion END_OF_LINE\n  | declaracion END_OF_LINE\n  | comparacion END_OF_LINE\n  | salida_entrada END_OF_LINE\n  | asignacion END_OF_LINE body_case\n  | declaracion END_OF_LINE body_case\n  | salida_entrada END_OF_LINE body_case\n  | comparacion END_OF_LINE body_case\n  for : FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DERforIterador : IDENTIFICADOR operadorForIteracionoperadorForIteracion : INCREMENTO \n                            | DECREMENTOforCondicion : IDENTIFICADOR operador_condicional valorForCondicionvalorForCondicion : FLOAT\n            | DOUBLE\n            | INT\n            | IDENTIFICADORforInicializador : tipoDatoForInicializador IDENTIFICADOR IGUAL valorForInicializador\n                    | IDENTIFICADOR IGUAL valorForInicializadortipoDatoForInicializador : FLOAT_TYPE\n                        | DOUBLE_TYPE\n                        | INT_TYPEvalorForInicializador : FLOAT\n            | DOUBLE\n            | INT\n            | IDENTIFICADORestructura_datos : lista\n                      | pila\n  lista : LIST tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINEtipoLista : MENOR_QUE valor_tipo_inicializador MAYOR_QUEpila : STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL NEW STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINEfunciones_estructura_datos : stack_push\n                                  | stack_pop\n    stack_push : IDENTIFICADOR PUNTO PUSH PAR_IZQ valor PAR_DER\n                  | IDENTIFICADOR PUNTO PUSH PAR_IZQ NEW IDENTIFICADOR PAR_IZQ PAR_DER PAR_DER\n    stack_pop : IDENTIFICADOR PUNTO POP PAR_IZQ PAR_DERexpresion : expresion_operacion_aritmetica\n  | expresion_condicional\n  expresion_operacion_aritmetica : numero operador_aritmentico numero\n  | numero operador_aritmentico IDENTIFICADOR\n  | IDENTIFICADOR operador_aritmentico numero\n  | IDENTIFICADOR operador_aritmentico IDENTIFICADOR\n  expresion_condicional : numero operador_condicional numero\n  | IDENTIFICADOR operador_condicional IDENTIFICADOR\n  | IDENTIFICADOR operador_condicional numero\n  | numero operador_condicional IDENTIFICADOR\n  salida_entrada : salida_uno\n                    | salida_dos\n                    | salida_tressalida_uno : CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER\n                    | CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER\n                    | CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DERsalida_dos : CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DERsalida_tres : CONSOLE_READLINE PAR_IZQ PAR_DERfuncion : funcion_tipo_uno\n             | funcion_tipo_tres\n  funcion_tipo_uno : modificador_acceso VOID IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ body LLAVE_DERfuncion_tipo_tres : modificador_acceso VOID IDENTIFICADOR PAR_IZQ parametrosF PAR_DER LLAVE_IZQ bodyF LLAVE_DERparametrosF : declaracion\n                 | declaracion COMA parametrosF\n  bodyF : asignacion END_OF_LINE\n            | declaracion END_OF_LINE\n            | salida_entrada END_OF_LINE\n            | asignacion END_OF_LINE bodyF\n            | declaracion END_OF_LINE bodyF\n            | salida_entrada END_OF_LINE bodyFlambda_exp : lambdaArg LAMBDA lambdaCuerpolambdaArg : PAR_IZQ PAR_DER\n            | PAR_IZQ lambdaParametrosUno PAR_DER\n            | PAR_IZQ lambdaParametrosDos PAR_DER\n            | IDENTIFICADOR\n    lambdaParametrosUno : valor_tipo IDENTIFICADOR\n                        | valor_tipo IDENTIFICADOR COMA lambdaParametrosUno\n    lambdaParametrosDos : IDENTIFICADOR\n                        |  IDENTIFICADOR COMA lambdaParametrosDos\n    lambdaCuerpo : expresion\n                    | salida_uno\n                    | salida_dos\n    '
    
_lr_action_items = {'END_OF_LINE':([0,2,7,8,10,12,14,15,16,17,18,19,26,27,28,29,30,35,36,37,38,39,40,43,44,45,46,48,49,50,51,67,68,69,70,71,72,91,92,94,148,149,150,152,153,154,155,156,157,159,160,161,162,163,164,165,166,169,170,171,172,174,175,176,177,178,179,180,181,182,184,185,188,190,191,192,193,194,201,202,203,208,209,210,211,213,219,233,238,239,240,241,242,246,253,254,265,267,268,287,291,294,295,296,297,298,300,305,317,319,323,325,330,333,339,340,341,347,348,349,350,351,359,370,371,372,373,374,376,377,378,379,380,382,383,390,412,],[3,79,80,81,82,83,-60,-61,-62,-63,-64,-65,-190,-191,-200,-201,-202,-111,-112,-113,-114,-185,-186,-82,-83,-84,-85,-12,-13,-14,-15,-125,-126,-127,-19,-17,-18,-110,-117,-116,-131,-13,-16,-115,-16,-66,-67,-68,-69,-72,-73,-74,-70,-195,-194,-197,-198,-88,-86,-87,-89,-92,-90,-91,-16,-93,-94,-95,-96,-97,-98,-99,-124,-120,-119,-121,-122,-123,-78,-79,-16,-192,-193,-196,-199,259,-128,-207,274,275,276,277,278,-129,-81,-80,-203,-204,-205,-189,328,-179,-172,-176,-177,-178,-130,-206,-128,-71,-187,-118,-171,3,-75,-76,-77,-170,-166,-167,-168,-169,-130,386,387,388,389,-188,391,392,393,394,395,3,397,402,413,]),'IDENTIFICADOR':([0,33,34,47,61,62,63,64,65,66,84,85,86,87,88,89,90,93,95,96,97,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,126,127,128,129,133,135,136,137,138,139,140,141,142,144,145,146,147,151,158,189,207,214,216,217,218,243,251,259,261,263,264,266,269,271,274,275,276,277,278,279,280,286,293,306,310,327,328,329,333,335,337,338,355,361,381,382,384,386,387,388,392,393,394,395,],[34,91,94,134,-22,-23,-24,-25,-26,-27,150,-38,-39,-40,-41,-42,-43,152,153,163,165,169,174,177,184,186,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-105,-106,-107,-100,-101,-102,-103,-104,-108,-109,190,177,199,203,206,209,211,150,215,219,227,227,231,234,236,243,246,153,247,255,134,260,-173,-174,-175,94,150,292,294,-183,300,302,303,306,243,243,243,243,243,317,227,324,294,94,243,150,346,347,34,306,236,359,243,381,94,34,227,243,243,243,381,381,381,381,]),'CHAR':([0,84,85,86,87,88,89,90,95,101,127,129,137,151,251,327,333,361,382,392,393,394,395,],[48,48,-38,-39,-40,-41,-42,-43,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'BOOL':([0,84,85,86,87,88,89,90,95,99,101,115,116,117,127,129,137,151,251,327,333,361,382,392,393,394,395,],[50,50,-38,-39,-40,-41,-42,-43,50,170,50,-105,-106,-107,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'STRING':([0,84,85,86,87,88,89,90,95,101,127,129,137,142,151,232,251,266,269,327,333,361,382,392,393,394,395,],[51,51,-38,-39,-40,-41,-42,-43,51,51,51,51,51,229,51,270,51,301,304,51,51,51,51,51,51,51,51,]),'SWITCH':([0,333,382,],[54,54,54,]),'FOR':([0,333,382,],[55,55,55,]),'LIST':([0,146,158,183,271,274,275,276,277,278,299,310,333,335,355,361,382,386,387,388,392,393,394,395,],[56,244,250,250,244,244,244,244,244,244,331,244,56,244,244,244,56,244,244,244,244,244,244,244,]),'STACK':([0,146,158,183,271,274,275,276,277,278,310,333,335,353,355,361,382,386,387,388,392,393,394,395,],[57,245,248,248,245,245,245,245,245,245,245,57,245,367,245,245,57,245,245,245,245,245,245,245,]),'CONSOLE_WRITELINE':([0,128,146,274,275,276,277,278,310,333,355,361,382,386,387,388,392,393,394,395,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'CONSOLE_READLINE':([0,95,146,151,274,275,276,277,278,310,333,355,361,382,386,387,388,392,393,394,395,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'CHAR_TYPE':([0,47,140,141,146,256,271,274,275,276,277,278,280,310,333,335,355,361,382,384,386,387,388,392,393,394,395,],[61,61,226,226,61,61,61,61,61,61,61,61,226,61,61,61,61,61,61,226,61,61,61,61,61,61,61,]),'FLOAT_TYPE':([0,47,138,140,141,146,256,271,274,275,276,277,278,280,310,333,335,355,361,382,384,386,387,388,392,393,394,395,],[62,62,216,221,221,62,62,62,62,62,62,62,62,221,62,62,62,62,62,62,221,62,62,62,62,62,62,62,]),'DOUBLE_TYPE':([0,47,138,140,141,146,256,271,274,275,276,277,278,280,310,333,335,355,361,382,384,386,387,388,392,393,394,395,],[63,63,217,222,222,63,63,63,63,63,63,63,63,222,63,63,63,63,63,63,222,63,63,63,63,63,63,63,]),'INT_TYPE':([0,47,138,140,141,146,256,271,274,275,276,277,278,280,310,333,335,355,361,382,384,386,387,388,392,393,394,395,],[64,64,218,224,224,64,64,64,64,64,64,64,64,224,64,64,64,64,64,64,224,64,64,64,64,64,64,64,]),'BOOL_TYPE':([0,47,140,141,146,256,271,274,275,276,277,278,280,310,333,335,355,361,382,384,386,387,388,392,393,394,395,],[65,65,225,225,65,65,65,65,65,65,65,65,225,65,65,65,65,65,65,225,65,65,65,65,65,65,65,]),'STRING_TYPE':([0,47,140,141,146,256,271,274,275,276,277,278,280,310,333,335,355,361,382,384,386,387,388,392,393,394,395,],[66,66,223,223,66,66,66,66,66,66,66,66,223,66,66,66,66,66,66,223,66,66,66,66,66,66,66,]),'PAR_IZQ':([0,54,55,58,59,73,167,168,234,247,255,263,282,283,284,311,324,333,352,382,409,],[47,137,138,142,143,145,251,252,271,281,288,-183,320,321,322,337,342,47,366,47,411,]),'FLOAT':([0,84,85,86,87,88,89,90,95,96,97,99,100,101,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,127,128,129,135,136,137,145,151,251,261,293,327,329,333,337,361,382,392,393,394,395,],[71,71,-38,-39,-40,-41,-42,-43,71,71,71,71,71,71,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-105,-106,-107,-100,-101,-102,-103,-104,71,71,71,71,71,71,71,71,71,296,296,71,349,71,71,71,71,71,71,71,71,]),'DOUBLE':([0,84,85,86,87,88,89,90,95,96,97,99,100,101,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,127,128,129,135,136,137,145,151,251,261,293,327,329,333,337,361,382,392,393,394,395,],[72,72,-38,-39,-40,-41,-42,-43,72,72,72,72,72,72,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-105,-106,-107,-100,-101,-102,-103,-104,72,72,72,72,72,72,72,72,72,297,297,72,350,72,72,72,72,72,72,72,72,]),'INT':([0,84,85,86,87,88,89,90,95,96,97,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,127,128,129,135,136,137,145,151,251,261,293,327,329,333,337,361,382,392,393,394,395,],[70,70,-38,-39,-40,-41,-42,-43,70,70,70,172,70,70,185,187,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-105,-106,-107,-100,-101,-102,-103,-104,-108,-109,70,70,70,70,70,70,70,70,70,298,298,70,351,70,70,70,70,70,70,70,70,]),'WHILE':([0,273,333,382,],[73,311,73,73,]),'DO':([0,333,382,],[74,74,74,]),'PRIVATE':([0,333,382,],[75,75,75,]),'PROTECTED':([0,333,382,],[76,76,76,]),'PUBLIC':([0,333,382,],[77,77,77,]),'QUEUE':([0,146,158,183,271,274,275,276,277,278,310,333,335,355,361,382,386,387,388,392,393,394,395,],[78,78,249,249,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'$end':([1,3,4,5,6,9,11,13,21,22,23,24,25,26,27,31,32,48,50,51,52,53,70,71,72,79,80,81,82,83,148,149,150,163,164,165,166,195,196,197,198,208,209,210,211,265,267,268,305,343,357,368,385,389,397,408,413,],[0,-59,-2,-3,-4,-7,-9,-11,-132,-133,-134,-180,-181,-190,-191,-208,-209,-12,-14,-15,-135,-136,-19,-17,-18,-1,-5,-6,-8,-10,-131,-13,-16,-195,-194,-197,-198,-220,-229,-230,-231,-192,-193,-196,-199,-203,-204,-205,-206,-149,-137,-210,-211,-138,-182,-162,-184,]),'LLAVE_DER':([3,4,5,6,9,11,13,21,22,23,24,25,26,27,31,32,48,50,51,52,53,70,71,72,79,80,81,82,83,148,149,150,163,164,165,166,195,196,197,198,208,209,210,211,237,265,267,268,274,275,276,277,278,305,312,313,314,315,316,326,336,343,354,357,368,369,385,386,387,388,389,391,396,397,399,400,401,402,403,408,410,413,],[-59,-2,-3,-4,-7,-9,-11,-132,-133,-134,-180,-181,-190,-191,-208,-209,-12,-14,-15,-135,-136,-19,-17,-18,-1,-5,-6,-8,-10,-131,-13,-16,-195,-194,-197,-198,-220,-229,-230,-231,-192,-193,-196,-199,273,-203,-204,-205,-139,-140,-141,-142,-143,-206,-144,-145,-146,-147,-148,343,357,-149,368,-137,-210,385,-211,-214,-215,-216,-138,-151,408,-182,-217,-218,-219,-150,-153,-162,-152,-184,]),'IGUAL_IGUAL':([20,34,48,49,50,51,70,71,72,149,153,169,172,173,177,199,200,236,292,381,],[85,109,-12,109,-14,-15,-19,-17,-18,-13,109,109,-19,109,109,109,109,109,109,-16,]),'NO_IGUAL':([20,34,48,49,50,51,70,71,72,149,153,169,172,173,177,199,200,236,292,381,],[86,110,-12,110,-14,-15,-19,-17,-18,-13,110,110,-19,110,110,110,110,110,110,-16,]),'MENOR_QUE':([20,34,48,49,50,51,56,57,70,71,72,78,149,153,169,172,173,177,199,200,236,244,245,248,249,250,292,331,367,381,],[87,111,-12,111,-14,-15,140,141,-19,-17,-18,140,-13,111,111,-19,111,111,111,111,111,140,280,140,140,140,111,140,384,-16,]),'MENOR_O_IGUAL_QUE':([20,34,48,49,50,51,70,71,72,149,153,169,172,173,177,199,200,236,292,381,],[88,112,-12,112,-14,-15,-19,-17,-18,-13,112,112,-19,112,112,112,112,112,112,-16,]),'MAYOR_QUE':([20,34,48,49,50,51,70,71,72,149,153,169,172,173,177,199,200,220,221,222,223,224,225,226,227,228,236,292,318,381,398,],[89,113,-12,113,-14,-15,-19,-17,-18,-13,113,113,-19,113,113,113,113,263,-28,-29,-30,-31,-32,-33,-34,264,113,113,338,-16,409,]),'MAYOR_O_IGUAL_QUE':([20,34,48,49,50,51,70,71,72,149,153,169,172,173,177,199,200,236,292,381,],[90,114,-12,114,-14,-15,-19,-17,-18,-13,114,114,-19,114,114,114,114,114,114,-16,]),'COMA':([26,27,35,36,37,38,48,49,50,51,67,68,69,70,71,72,91,92,94,134,152,153,154,155,156,157,163,164,165,166,177,188,190,191,192,193,194,206,208,209,210,211,233,246,253,254,309,317,325,359,],[-190,-191,-111,-112,-113,-114,-12,-13,-14,-15,-125,-126,-127,-19,-17,-18,-110,-117,-116,207,-115,-16,-66,-67,-68,-69,-195,-194,-197,-198,-16,-124,-120,-119,-121,-122,-123,256,-192,-193,-196,-199,-207,-129,-81,-80,335,-128,-118,-130,]),'PAR_DER':([26,27,35,36,37,38,47,48,49,50,51,67,68,69,70,71,72,91,92,94,131,132,134,143,149,150,152,153,154,155,156,157,163,164,165,166,177,188,190,191,192,193,194,206,208,209,210,211,212,229,230,231,233,235,246,252,253,254,257,270,271,281,285,288,289,301,302,303,304,308,309,317,320,321,322,325,342,345,356,358,359,360,363,364,365,366,411,],[-190,-191,-111,-112,-113,-114,130,-12,-13,-14,-15,-125,-126,-127,-19,-17,-18,-110,-117,-116,204,205,-227,233,-13,-16,-115,-16,-66,-67,-68,-69,-195,-194,-197,-198,-16,-124,-120,-119,-121,-122,-123,-225,-192,-193,-196,-199,258,265,267,268,-207,272,-129,287,-81,-80,-228,305,307,319,323,325,-226,-55,-56,-58,-57,334,-212,-128,339,340,341,-118,360,362,-213,373,-130,374,-163,-164,-165,383,412,]),'OP_TERNARIO':([33,61,62,63,64,65,66,],[93,-22,-23,-24,-25,-26,-27,]),'IGUAL':([34,35,37,38,42,67,68,69,91,94,152,215,219,243,246,253,254,260,300,317,359,381,],[95,125,126,127,129,-125,-126,-127,151,-116,-115,261,262,95,-129,-81,-80,293,332,-128,-130,95,]),'PUNTO':([34,],[98,]),'LAMBDA':([34,41,130,204,205,],[-224,128,-221,-222,-223,]),'NULL_EQUAL':([34,243,381,],[101,101,101,]),'COR_IZQ':([34,153,203,243,381,],[103,103,103,103,103,]),'SUMA':([34,49,70,71,72,153,174,175,177,199,200,229,231,],[104,104,-19,-17,-18,104,104,104,104,104,104,266,269,]),'RESTA':([34,49,70,71,72,153,174,175,177,199,200,],[105,105,-19,-17,-18,105,105,105,105,105,105,]),'MULTIPLICACION':([34,49,70,71,72,153,174,175,177,199,200,],[106,106,-19,-17,-18,106,106,106,106,106,106,]),'DIVISION':([34,49,70,71,72,153,174,175,177,199,200,],[107,107,-19,-17,-18,107,107,107,107,107,107,]),'MODULO':([34,49,70,71,72,153,174,175,177,199,200,],[108,108,-19,-17,-18,108,108,108,108,108,108,]),'AND_EQUAL':([34,243,381,],[115,115,115,]),'OR_EQUAL':([34,243,381,],[116,116,116,]),'EXC_OREQUAL':([34,243,381,],[117,117,117,]),'AUMENTADO':([34,243,381,],[118,118,118,]),'DECREMENTADO':([34,243,381,],[119,119,119,]),'MULTIPLICADO_POR':([34,243,381,],[120,120,120,]),'DIVIDIDO_POR':([34,243,381,],[121,121,121,]),'MODULO_DE':([34,243,381,],[122,122,122,]),'LEFTSHIFT_EQUAL':([34,243,381,],[123,123,123,]),'RIGHTSHIFT_EQUAL':([34,243,381,],[124,124,124,]),'DOS_PUNTOS':([48,50,51,70,71,72,149,150,344,],[-12,-14,-15,-19,-17,-18,-13,-16,361,]),'VOID':([60,75,76,77,],[144,-35,-36,-37,]),'LLAVE_IZQ':([74,258,272,307,334,362,],[146,290,310,333,355,382,]),'NEW':([95,101,126,251,262,332,],[158,183,189,286,299,353,]),'NULL':([95,125,126,127,],[162,188,191,194,]),'PUSH':([98,],[167,]),'POP':([98,],[168,]),'C_CADENA_INTERPOLADA':([142,],[232,]),'BREAK':([146,274,275,276,277,278,310,361,375,392,393,394,395,404,405,406,407,],[241,241,241,241,241,241,241,376,390,-154,-155,-156,-157,-158,-159,-161,-160,]),'CONTINUE':([146,274,275,276,277,278,310,],[242,242,242,242,242,242,242,]),'COR_DER':([186,187,],[253,254,]),'CASE':([290,391,402,],[327,327,327,]),'INCREMENTO':([346,],[364,]),'DECREMENTO':([346,],[365,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'body':([0,333,382,],[1,354,396,]),'asignacion':([0,146,274,275,276,277,278,310,333,355,361,382,386,387,388,392,393,394,395,],[2,238,238,238,238,238,238,238,2,370,377,2,370,370,370,377,377,377,377,]),'comparacion':([0,333,361,382,392,393,394,395,],[4,4,379,4,379,379,379,379,]),'estructura_control':([0,333,382,],[5,5,5,]),'estructura_datos':([0,333,382,],[6,6,6,]),'expresion':([0,95,101,127,128,151,333,382,],[7,155,179,193,196,155,7,7,]),'salida_entrada':([0,146,274,275,276,277,278,310,333,355,361,382,386,387,388,392,393,394,395,],[8,240,240,240,240,240,240,240,8,372,380,8,372,372,372,380,380,380,380,]),'funcion':([0,333,382,],[9,9,9,]),'declaracion':([0,146,271,274,275,276,277,278,310,333,335,355,361,382,386,387,388,392,393,394,395,],[10,239,309,239,239,239,239,239,239,10,309,371,378,10,371,371,371,378,378,378,378,]),'empty':([0,333,382,],[11,11,11,]),'funciones_estructura_datos':([0,333,382,],[12,12,12,]),'lambda_exp':([0,333,382,],[13,13,13,]),'asignacionSimple':([0,33,146,274,275,276,277,278,310,333,355,361,382,386,387,388,392,393,394,395,],[14,92,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'asignacionCompuesta':([0,146,274,275,276,277,278,310,333,355,361,382,386,387,388,392,393,394,395,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'asignacionClase':([0,146,274,275,276,277,278,310,333,355,361,382,386,387,388,392,393,394,395,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'asignacionEstructuraD':([0,146,274,275,276,277,278,310,333,355,361,382,386,387,388,392,393,394,395,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'asignacionNull':([0,146,274,275,276,277,278,310,333,355,361,382,386,387,388,392,393,394,395,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'asignacionIndex':([0,146,274,275,276,277,278,310,333,355,361,382,386,387,388,392,393,394,395,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'valor':([0,84,95,101,127,129,137,151,251,327,333,361,382,392,393,394,395,],[20,148,154,178,192,202,212,154,285,344,20,20,20,20,20,20,20,]),'while':([0,333,382,],[21,21,21,]),'switch_case':([0,333,382,],[22,22,22,]),'for':([0,333,382,],[23,23,23,]),'lista':([0,333,382,],[24,24,24,]),'pila':([0,333,382,],[25,25,25,]),'expresion_operacion_aritmetica':([0,95,100,101,127,128,151,333,382,],[26,26,176,26,26,26,26,26,26,]),'expresion_condicional':([0,95,99,101,127,128,145,151,333,337,382,],[27,27,171,27,27,27,235,27,27,358,27,]),'salida_uno':([0,128,146,274,275,276,277,278,310,333,355,361,382,386,387,388,392,393,394,395,],[28,197,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'salida_dos':([0,128,146,274,275,276,277,278,310,333,355,361,382,386,387,388,392,393,394,395,],[29,198,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'salida_tres':([0,95,146,151,274,275,276,277,278,310,333,355,361,382,386,387,388,392,393,394,395,],[30,156,30,156,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'funcion_tipo_uno':([0,333,382,],[31,31,31,]),'funcion_tipo_tres':([0,333,382,],[32,32,32,]),'valor_tipo':([0,47,146,256,271,274,275,276,277,278,310,333,335,355,361,382,386,387,388,392,393,394,395,],[33,133,33,133,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'declaracionEstructuraD':([0,146,271,274,275,276,277,278,310,333,335,355,361,382,386,387,388,392,393,394,395,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'declaracionAsignacion':([0,146,271,274,275,276,277,278,310,333,335,355,361,382,386,387,388,392,393,394,395,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'declaracionClase':([0,146,271,274,275,276,277,278,310,333,335,355,361,382,386,387,388,392,393,394,395,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'declaracionNull':([0,146,271,274,275,276,277,278,310,333,335,355,361,382,386,387,388,392,393,394,395,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'stack_push':([0,333,382,],[39,39,39,]),'stack_pop':([0,333,382,],[40,40,40,]),'lambdaArg':([0,333,382,],[41,41,41,]),'index':([0,95,129,146,151,274,275,276,277,278,310,333,355,361,382,386,387,388,392,393,394,395,],[42,157,201,42,157,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'asignacionCompuesta_Logic':([0,146,274,275,276,277,278,310,333,355,361,382,386,387,388,392,393,394,395,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'asignacionCompuesta_Number':([0,146,274,275,276,277,278,310,333,355,361,382,386,387,388,392,393,394,395,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'asignacionCompuesta_Null':([0,146,274,275,276,277,278,310,333,355,361,382,386,387,388,392,393,394,395,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'asignacionCompuesta_Shift':([0,146,274,275,276,277,278,310,333,355,361,382,386,387,388,392,393,394,395,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'numero':([0,84,95,96,97,99,100,101,127,128,129,135,136,137,145,151,251,327,333,337,361,382,392,393,394,395,],[49,149,49,164,166,173,175,49,49,200,149,208,210,149,173,49,149,149,49,173,149,49,149,149,149,149,]),'while_normal':([0,333,382,],[52,52,52,]),'while_do':([0,333,382,],[53,53,53,]),'modificador_acceso':([0,333,382,],[60,60,60,]),'declaracionList':([0,146,271,274,275,276,277,278,310,333,335,355,361,382,386,387,388,392,393,394,395,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'declaracionQueue':([0,146,271,274,275,276,277,278,310,333,335,355,361,382,386,387,388,392,393,394,395,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'declaracionPila':([0,146,271,274,275,276,277,278,310,333,335,355,361,382,386,387,388,392,393,394,395,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'operador_realacional':([20,],[84,]),'operador_aritmentico':([34,49,153,174,175,177,199,200,],[96,135,96,96,135,96,96,135,]),'operador_condicional':([34,49,153,169,173,177,199,200,236,292,],[97,136,97,97,136,97,97,136,97,329,]),'operadoresCompuestosLogic':([34,243,381,],[99,99,99,]),'operadoresCompuestosNumber':([34,243,381,],[100,100,100,]),'operadoresCompuestosShift':([34,243,381,],[102,102,102,]),'lambdaParametrosUno':([47,256,],[131,289,]),'lambdaParametrosDos':([47,207,],[132,257,]),'tipoLista':([56,78,244,248,249,250,331,],[139,147,279,282,283,284,352,]),'asignacionPila':([95,101,],[159,180,]),'asignacionQueue':([95,101,],[160,181,]),'asignacionList':([95,101,],[161,182,]),'lambdaCuerpo':([128,],[195,]),'forInicializador':([138,],[213,]),'tipoDatoForInicializador':([138,],[214,]),'valor_tipo_inicializador':([140,141,280,384,],[220,228,318,398,]),'operacion_string':([142,],[230,]),'body_while':([146,274,275,276,277,278,310,],[237,312,313,314,315,316,336,]),'forCondicion':([259,],[291,]),'valorForInicializador':([261,293,],[295,330,]),'parametrosF':([271,335,],[308,356,]),'casos':([290,391,402,],[326,403,410,]),'forIterador':([328,],[345,]),'valorForCondicion':([329,],[348,]),'operadorForIteracion':([346,],[363,]),'bodyF':([355,386,387,388,],[369,399,400,401,]),'body_case':([361,392,393,394,395,],[375,404,405,406,407,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> body","S'",1,None,None,None),
  ('body -> asignacion END_OF_LINE','body',2,'p_body','main.py',6),
  ('body -> comparacion','body',1,'p_body','main.py',7),
  ('body -> estructura_control','body',1,'p_body','main.py',8),
  ('body -> estructura_datos','body',1,'p_body','main.py',9),
  ('body -> expresion END_OF_LINE','body',2,'p_body','main.py',10),
  ('body -> salida_entrada END_OF_LINE','body',2,'p_body','main.py',11),
  ('body -> funcion','body',1,'p_body','main.py',12),
  ('body -> declaracion END_OF_LINE','body',2,'p_body','main.py',13),
  ('body -> empty','body',1,'p_body','main.py',14),
  ('body -> funciones_estructura_datos END_OF_LINE','body',2,'p_body','main.py',15),
  ('body -> lambda_exp','body',1,'p_body','main.py',16),
  ('valor -> CHAR','valor',1,'p_valor','main.py',25),
  ('valor -> numero','valor',1,'p_valor','main.py',26),
  ('valor -> BOOL','valor',1,'p_valor','main.py',27),
  ('valor -> STRING','valor',1,'p_valor','main.py',28),
  ('valor -> IDENTIFICADOR','valor',1,'p_valor','main.py',29),
  ('numero -> FLOAT','numero',1,'p_numero','main.py',33),
  ('numero -> DOUBLE','numero',1,'p_numero','main.py',34),
  ('numero -> INT','numero',1,'p_numero','main.py',35),
  ('ftipo -> valor_tipo','ftipo',1,'p_ftipo','main.py',38),
  ('ftipo -> VOID','ftipo',1,'p_ftipo','main.py',39),
  ('valor_tipo -> CHAR_TYPE','valor_tipo',1,'p_valor_tipo','main.py',43),
  ('valor_tipo -> FLOAT_TYPE','valor_tipo',1,'p_valor_tipo','main.py',44),
  ('valor_tipo -> DOUBLE_TYPE','valor_tipo',1,'p_valor_tipo','main.py',45),
  ('valor_tipo -> INT_TYPE','valor_tipo',1,'p_valor_tipo','main.py',46),
  ('valor_tipo -> BOOL_TYPE','valor_tipo',1,'p_valor_tipo','main.py',47),
  ('valor_tipo -> STRING_TYPE','valor_tipo',1,'p_valor_tipo','main.py',48),
  ('valor_tipo_inicializador -> FLOAT_TYPE','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','main.py',52),
  ('valor_tipo_inicializador -> DOUBLE_TYPE','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','main.py',53),
  ('valor_tipo_inicializador -> STRING_TYPE','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','main.py',54),
  ('valor_tipo_inicializador -> INT_TYPE','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','main.py',55),
  ('valor_tipo_inicializador -> BOOL_TYPE','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','main.py',56),
  ('valor_tipo_inicializador -> CHAR_TYPE','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','main.py',57),
  ('valor_tipo_inicializador -> IDENTIFICADOR','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','main.py',58),
  ('modificador_acceso -> PRIVATE','modificador_acceso',1,'p_modificador_acceso','main.py',61),
  ('modificador_acceso -> PROTECTED','modificador_acceso',1,'p_modificador_acceso','main.py',62),
  ('modificador_acceso -> PUBLIC','modificador_acceso',1,'p_modificador_acceso','main.py',63),
  ('operador_realacional -> IGUAL_IGUAL','operador_realacional',1,'p_operador_realacional','main.py',67),
  ('operador_realacional -> NO_IGUAL','operador_realacional',1,'p_operador_realacional','main.py',68),
  ('operador_realacional -> MENOR_QUE','operador_realacional',1,'p_operador_realacional','main.py',69),
  ('operador_realacional -> MENOR_O_IGUAL_QUE','operador_realacional',1,'p_operador_realacional','main.py',70),
  ('operador_realacional -> MAYOR_QUE','operador_realacional',1,'p_operador_realacional','main.py',71),
  ('operador_realacional -> MAYOR_O_IGUAL_QUE','operador_realacional',1,'p_operador_realacional','main.py',72),
  ('operador_aritmentico -> SUMA','operador_aritmentico',1,'p_operador_aritmentico','main.py',76),
  ('operador_aritmentico -> RESTA','operador_aritmentico',1,'p_operador_aritmentico','main.py',77),
  ('operador_aritmentico -> MULTIPLICACION','operador_aritmentico',1,'p_operador_aritmentico','main.py',78),
  ('operador_aritmentico -> DIVISION','operador_aritmentico',1,'p_operador_aritmentico','main.py',79),
  ('operador_aritmentico -> MODULO','operador_aritmentico',1,'p_operador_aritmentico','main.py',80),
  ('operador_condicional -> IGUAL_IGUAL','operador_condicional',1,'p_operador_condicional','main.py',84),
  ('operador_condicional -> NO_IGUAL','operador_condicional',1,'p_operador_condicional','main.py',85),
  ('operador_condicional -> MENOR_QUE','operador_condicional',1,'p_operador_condicional','main.py',86),
  ('operador_condicional -> MENOR_O_IGUAL_QUE','operador_condicional',1,'p_operador_condicional','main.py',87),
  ('operador_condicional -> MAYOR_QUE','operador_condicional',1,'p_operador_condicional','main.py',88),
  ('operador_condicional -> MAYOR_O_IGUAL_QUE','operador_condicional',1,'p_operador_condicional','main.py',89),
  ('operacion_string -> STRING SUMA STRING','operacion_string',3,'p_operacion_string','main.py',93),
  ('operacion_string -> STRING SUMA IDENTIFICADOR','operacion_string',3,'p_operacion_string','main.py',94),
  ('operacion_string -> IDENTIFICADOR SUMA STRING','operacion_string',3,'p_operacion_string','main.py',95),
  ('operacion_string -> IDENTIFICADOR SUMA IDENTIFICADOR','operacion_string',3,'p_operacion_string','main.py',96),
  ('empty -> END_OF_LINE','empty',1,'p_empty','main.py',106),
  ('asignacion -> asignacionSimple','asignacion',1,'p_asignacion','main.py',109),
  ('asignacion -> asignacionCompuesta','asignacion',1,'p_asignacion','main.py',110),
  ('asignacion -> asignacionClase','asignacion',1,'p_asignacion','main.py',111),
  ('asignacion -> asignacionEstructuraD','asignacion',1,'p_asignacion','main.py',112),
  ('asignacion -> asignacionNull','asignacion',1,'p_asignacion','main.py',113),
  ('asignacion -> asignacionIndex','asignacion',1,'p_asignacion','main.py',114),
  ('asignacionSimple -> IDENTIFICADOR IGUAL valor','asignacionSimple',3,'p_asignacionSimple','main.py',117),
  ('asignacionSimple -> IDENTIFICADOR IGUAL expresion','asignacionSimple',3,'p_asignacionSimple','main.py',118),
  ('asignacionSimple -> IDENTIFICADOR IGUAL salida_tres','asignacionSimple',3,'p_asignacionSimple','main.py',119),
  ('asignacionSimple -> IDENTIFICADOR IGUAL index','asignacionSimple',3,'p_asignacionSimple','main.py',120),
  ('asignacionNull -> IDENTIFICADOR IGUAL NULL','asignacionNull',3,'p_asignacionNull','main.py',123),
  ('asignacionClase -> IDENTIFICADOR IGUAL NEW IDENTIFICADOR PAR_IZQ PAR_DER','asignacionClase',6,'p_asignacionClase','main.py',126),
  ('asignacionEstructuraD -> IDENTIFICADOR IGUAL asignacionPila','asignacionEstructuraD',3,'p_asignacionEstructuraD','main.py',130),
  ('asignacionEstructuraD -> IDENTIFICADOR IGUAL asignacionQueue','asignacionEstructuraD',3,'p_asignacionEstructuraD','main.py',131),
  ('asignacionEstructuraD -> IDENTIFICADOR IGUAL asignacionList','asignacionEstructuraD',3,'p_asignacionEstructuraD','main.py',132),
  ('asignacionPila -> NEW STACK tipoLista PAR_IZQ PAR_DER','asignacionPila',5,'p_asignacionPila','main.py',136),
  ('asignacionQueue -> NEW QUEUE tipoLista PAR_IZQ PAR_DER','asignacionQueue',5,'p_asignacionQueue','main.py',139),
  ('asignacionList -> NEW LIST tipoLista PAR_IZQ PAR_DER','asignacionList',5,'p_asignacionList','main.py',142),
  ('asignacionIndex -> index IGUAL index','asignacionIndex',3,'p_asignacionIndex','main.py',145),
  ('asignacionIndex -> index IGUAL valor','asignacionIndex',3,'p_asignacionIndex','main.py',146),
  ('index -> IDENTIFICADOR COR_IZQ INT COR_DER','index',4,'p_index','main.py',150),
  ('index -> IDENTIFICADOR COR_IZQ IDENTIFICADOR COR_DER','index',4,'p_index','main.py',151),
  ('asignacionCompuesta -> asignacionCompuesta_Logic','asignacionCompuesta',1,'p_asignacionCompuesta','main.py',155),
  ('asignacionCompuesta -> asignacionCompuesta_Number','asignacionCompuesta',1,'p_asignacionCompuesta','main.py',156),
  ('asignacionCompuesta -> asignacionCompuesta_Null','asignacionCompuesta',1,'p_asignacionCompuesta','main.py',157),
  ('asignacionCompuesta -> asignacionCompuesta_Shift','asignacionCompuesta',1,'p_asignacionCompuesta','main.py',158),
  ('asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic BOOL','asignacionCompuesta_Logic',3,'p_asignacionCompuesta_Logic','main.py',161),
  ('asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic expresion_condicional','asignacionCompuesta_Logic',3,'p_asignacionCompuesta_Logic','main.py',162),
  ('asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR','asignacionCompuesta_Logic',3,'p_asignacionCompuesta_Logic','main.py',163),
  ('asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic INT','asignacionCompuesta_Logic',3,'p_asignacionCompuesta_Logic','main.py',164),
  ('asignacionCompuesta_Number -> IDENTIFICADOR operadoresCompuestosNumber numero','asignacionCompuesta_Number',3,'p_asignacionCompuesta_Number','main.py',168),
  ('asignacionCompuesta_Number -> IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica','asignacionCompuesta_Number',3,'p_asignacionCompuesta_Number','main.py',169),
  ('asignacionCompuesta_Number -> IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR','asignacionCompuesta_Number',3,'p_asignacionCompuesta_Number','main.py',170),
  ('asignacionCompuesta_Null -> IDENTIFICADOR NULL_EQUAL valor','asignacionCompuesta_Null',3,'p_asignacionCompuesta_Null','main.py',174),
  ('asignacionCompuesta_Null -> IDENTIFICADOR NULL_EQUAL expresion','asignacionCompuesta_Null',3,'p_asignacionCompuesta_Null','main.py',175),
  ('asignacionCompuesta_Null -> IDENTIFICADOR NULL_EQUAL asignacionPila','asignacionCompuesta_Null',3,'p_asignacionCompuesta_Null','main.py',176),
  ('asignacionCompuesta_Null -> IDENTIFICADOR NULL_EQUAL asignacionQueue','asignacionCompuesta_Null',3,'p_asignacionCompuesta_Null','main.py',177),
  ('asignacionCompuesta_Null -> IDENTIFICADOR NULL_EQUAL asignacionList','asignacionCompuesta_Null',3,'p_asignacionCompuesta_Null','main.py',178),
  ('asignacionCompuesta_Shift -> IDENTIFICADOR operadoresCompuestosShift IDENTIFICADOR','asignacionCompuesta_Shift',3,'p_asignacionCompuesta_Shift','main.py',181),
  ('asignacionCompuesta_Shift -> IDENTIFICADOR operadoresCompuestosShift INT','asignacionCompuesta_Shift',3,'p_asignacionCompuesta_Shift','main.py',182),
  ('operadoresCompuestosNumber -> AUMENTADO','operadoresCompuestosNumber',1,'p_operadoresCompuestosNumber','main.py',186),
  ('operadoresCompuestosNumber -> DECREMENTADO','operadoresCompuestosNumber',1,'p_operadoresCompuestosNumber','main.py',187),
  ('operadoresCompuestosNumber -> MULTIPLICADO_POR','operadoresCompuestosNumber',1,'p_operadoresCompuestosNumber','main.py',188),
  ('operadoresCompuestosNumber -> DIVIDIDO_POR','operadoresCompuestosNumber',1,'p_operadoresCompuestosNumber','main.py',189),
  ('operadoresCompuestosNumber -> MODULO_DE','operadoresCompuestosNumber',1,'p_operadoresCompuestosNumber','main.py',190),
  ('operadoresCompuestosLogic -> AND_EQUAL','operadoresCompuestosLogic',1,'p_operadoresCompuestosLogic','main.py',193),
  ('operadoresCompuestosLogic -> OR_EQUAL','operadoresCompuestosLogic',1,'p_operadoresCompuestosLogic','main.py',194),
  ('operadoresCompuestosLogic -> EXC_OREQUAL','operadoresCompuestosLogic',1,'p_operadoresCompuestosLogic','main.py',195),
  ('operadoresCompuestosShift -> LEFTSHIFT_EQUAL','operadoresCompuestosShift',1,'p_operadoresCompuestosShift','main.py',199),
  ('operadoresCompuestosShift -> RIGHTSHIFT_EQUAL','operadoresCompuestosShift',1,'p_operadoresCompuestosShift','main.py',200),
  ('declaracion -> valor_tipo IDENTIFICADOR','declaracion',2,'p_declaracion','main.py',204),
  ('declaracion -> declaracionEstructuraD','declaracion',1,'p_declaracion','main.py',205),
  ('declaracion -> declaracionAsignacion','declaracion',1,'p_declaracion','main.py',206),
  ('declaracion -> declaracionClase','declaracion',1,'p_declaracion','main.py',207),
  ('declaracion -> declaracionNull','declaracion',1,'p_declaracion','main.py',208),
  ('declaracionNull -> valor_tipo OP_TERNARIO IDENTIFICADOR','declaracionNull',3,'p_declaracionNull','main.py',212),
  ('declaracionClase -> IDENTIFICADOR IDENTIFICADOR','declaracionClase',2,'p_declaracionClase','main.py',215),
  ('declaracionAsignacion -> valor_tipo asignacionSimple','declaracionAsignacion',2,'p_declaracionAsignacion','main.py',218),
  ('declaracionAsignacion -> declaracionClase IGUAL NEW IDENTIFICADOR PAR_IZQ PAR_DER','declaracionAsignacion',6,'p_declaracionAsignacion','main.py',219),
  ('declaracionAsignacion -> declaracionClase IGUAL NULL','declaracionAsignacion',3,'p_declaracionAsignacion','main.py',220),
  ('declaracionAsignacion -> declaracionClase IGUAL IDENTIFICADOR','declaracionAsignacion',3,'p_declaracionAsignacion','main.py',221),
  ('declaracionAsignacion -> declaracionNull IGUAL valor','declaracionAsignacion',3,'p_declaracionAsignacion','main.py',222),
  ('declaracionAsignacion -> declaracionNull IGUAL expresion','declaracionAsignacion',3,'p_declaracionAsignacion','main.py',223),
  ('declaracionAsignacion -> declaracionNull IGUAL NULL','declaracionAsignacion',3,'p_declaracionAsignacion','main.py',224),
  ('declaracionAsignacion -> declaracionEstructuraD IGUAL NULL','declaracionAsignacion',3,'p_declaracionAsignacion','main.py',225),
  ('declaracionEstructuraD -> declaracionList','declaracionEstructuraD',1,'p_declaracionEstructuraD','main.py',229),
  ('declaracionEstructuraD -> declaracionQueue','declaracionEstructuraD',1,'p_declaracionEstructuraD','main.py',230),
  ('declaracionEstructuraD -> declaracionPila','declaracionEstructuraD',1,'p_declaracionEstructuraD','main.py',231),
  ('declaracionList -> LIST tipoLista IDENTIFICADOR','declaracionList',3,'p_declaracionList','main.py',235),
  ('declaracionQueue -> QUEUE tipoLista IDENTIFICADOR','declaracionQueue',3,'p_declaracionQueue','main.py',238),
  ('declaracionPila -> STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR','declaracionPila',5,'p_declaracionPila','main.py',241),
  ('comparacion -> valor operador_realacional valor','comparacion',3,'p_comparacion','main.py',265),
  ('estructura_control -> while','estructura_control',1,'p_estructura_control','main.py',274),
  ('estructura_control -> switch_case','estructura_control',1,'p_estructura_control','main.py',275),
  ('estructura_control -> for','estructura_control',1,'p_estructura_control','main.py',276),
  ('while -> while_normal','while',1,'p_while','main.py',281),
  ('while -> while_do','while',1,'p_while','main.py',282),
  ('while_normal -> WHILE PAR_IZQ expresion_condicional PAR_DER LLAVE_IZQ body_while LLAVE_DER','while_normal',7,'p_while_normal','main.py',286),
  ('while_do -> DO LLAVE_IZQ body_while LLAVE_DER WHILE PAR_IZQ expresion_condicional PAR_DER END_OF_LINE','while_do',9,'p_while_do','main.py',289),
  ('body_while -> asignacion END_OF_LINE','body_while',2,'p_body_while','main.py',292),
  ('body_while -> declaracion END_OF_LINE','body_while',2,'p_body_while','main.py',293),
  ('body_while -> salida_entrada END_OF_LINE','body_while',2,'p_body_while','main.py',294),
  ('body_while -> BREAK END_OF_LINE','body_while',2,'p_body_while','main.py',295),
  ('body_while -> CONTINUE END_OF_LINE','body_while',2,'p_body_while','main.py',296),
  ('body_while -> asignacion END_OF_LINE body_while','body_while',3,'p_body_while','main.py',297),
  ('body_while -> declaracion END_OF_LINE body_while','body_while',3,'p_body_while','main.py',298),
  ('body_while -> salida_entrada END_OF_LINE body_while','body_while',3,'p_body_while','main.py',299),
  ('body_while -> BREAK END_OF_LINE body_while','body_while',3,'p_body_while','main.py',300),
  ('body_while -> CONTINUE END_OF_LINE body_while','body_while',3,'p_body_while','main.py',301),
  ('switch_case -> SWITCH PAR_IZQ valor PAR_DER LLAVE_IZQ casos LLAVE_DER','switch_case',7,'p_switch_case','main.py',311),
  ('casos -> CASE valor DOS_PUNTOS body_case BREAK END_OF_LINE','casos',6,'p_casos','main.py',314),
  ('casos -> CASE valor DOS_PUNTOS BREAK END_OF_LINE','casos',5,'p_casos','main.py',315),
  ('casos -> CASE valor DOS_PUNTOS body_case BREAK END_OF_LINE casos','casos',7,'p_casos','main.py',316),
  ('casos -> CASE valor DOS_PUNTOS BREAK END_OF_LINE casos','casos',6,'p_casos','main.py',317),
  ('body_case -> asignacion END_OF_LINE','body_case',2,'p_body_case','main.py',320),
  ('body_case -> declaracion END_OF_LINE','body_case',2,'p_body_case','main.py',321),
  ('body_case -> comparacion END_OF_LINE','body_case',2,'p_body_case','main.py',322),
  ('body_case -> salida_entrada END_OF_LINE','body_case',2,'p_body_case','main.py',323),
  ('body_case -> asignacion END_OF_LINE body_case','body_case',3,'p_body_case','main.py',324),
  ('body_case -> declaracion END_OF_LINE body_case','body_case',3,'p_body_case','main.py',325),
  ('body_case -> salida_entrada END_OF_LINE body_case','body_case',3,'p_body_case','main.py',326),
  ('body_case -> comparacion END_OF_LINE body_case','body_case',3,'p_body_case','main.py',327),
  ('for -> FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DER','for',11,'p_for','main.py',337),
  ('forIterador -> IDENTIFICADOR operadorForIteracion','forIterador',2,'p_forIterador','main.py',343),
  ('operadorForIteracion -> INCREMENTO','operadorForIteracion',1,'p_operadorForIteracion','main.py',347),
  ('operadorForIteracion -> DECREMENTO','operadorForIteracion',1,'p_operadorForIteracion','main.py',348),
  ('forCondicion -> IDENTIFICADOR operador_condicional valorForCondicion','forCondicion',3,'p_forCondicion','main.py',354),
  ('valorForCondicion -> FLOAT','valorForCondicion',1,'p_valorForCondicion','main.py',358),
  ('valorForCondicion -> DOUBLE','valorForCondicion',1,'p_valorForCondicion','main.py',359),
  ('valorForCondicion -> INT','valorForCondicion',1,'p_valorForCondicion','main.py',360),
  ('valorForCondicion -> IDENTIFICADOR','valorForCondicion',1,'p_valorForCondicion','main.py',361),
  ('forInicializador -> tipoDatoForInicializador IDENTIFICADOR IGUAL valorForInicializador','forInicializador',4,'p_forInicializador','main.py',367),
  ('forInicializador -> IDENTIFICADOR IGUAL valorForInicializador','forInicializador',3,'p_forInicializador','main.py',368),
  ('tipoDatoForInicializador -> FLOAT_TYPE','tipoDatoForInicializador',1,'p_tipoDatoForInicializador','main.py',373),
  ('tipoDatoForInicializador -> DOUBLE_TYPE','tipoDatoForInicializador',1,'p_tipoDatoForInicializador','main.py',374),
  ('tipoDatoForInicializador -> INT_TYPE','tipoDatoForInicializador',1,'p_tipoDatoForInicializador','main.py',375),
  ('valorForInicializador -> FLOAT','valorForInicializador',1,'p_valorForInicializador','main.py',379),
  ('valorForInicializador -> DOUBLE','valorForInicializador',1,'p_valorForInicializador','main.py',380),
  ('valorForInicializador -> INT','valorForInicializador',1,'p_valorForInicializador','main.py',381),
  ('valorForInicializador -> IDENTIFICADOR','valorForInicializador',1,'p_valorForInicializador','main.py',382),
  ('estructura_datos -> lista','estructura_datos',1,'p_estructura_datos','main.py',394),
  ('estructura_datos -> pila','estructura_datos',1,'p_estructura_datos','main.py',395),
  ('lista -> LIST tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINE','lista',10,'p_lista','main.py',399),
  ('tipoLista -> MENOR_QUE valor_tipo_inicializador MAYOR_QUE','tipoLista',3,'p_tipoLista','main.py',402),
  ('pila -> STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL NEW STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINE','pila',14,'p_pila','main.py',407),
  ('funciones_estructura_datos -> stack_push','funciones_estructura_datos',1,'p_funciones_estructura_datos','main.py',410),
  ('funciones_estructura_datos -> stack_pop','funciones_estructura_datos',1,'p_funciones_estructura_datos','main.py',411),
  ('stack_push -> IDENTIFICADOR PUNTO PUSH PAR_IZQ valor PAR_DER','stack_push',6,'p_stack_push','main.py',415),
  ('stack_push -> IDENTIFICADOR PUNTO PUSH PAR_IZQ NEW IDENTIFICADOR PAR_IZQ PAR_DER PAR_DER','stack_push',9,'p_stack_push','main.py',416),
  ('stack_pop -> IDENTIFICADOR PUNTO POP PAR_IZQ PAR_DER','stack_pop',5,'p_stack_pop','main.py',420),
  ('expresion -> expresion_operacion_aritmetica','expresion',1,'p_expresion','main.py',430),
  ('expresion -> expresion_condicional','expresion',1,'p_expresion','main.py',431),
  ('expresion_operacion_aritmetica -> numero operador_aritmentico numero','expresion_operacion_aritmetica',3,'p_expresion_operacion_aritmetica','main.py',435),
  ('expresion_operacion_aritmetica -> numero operador_aritmentico IDENTIFICADOR','expresion_operacion_aritmetica',3,'p_expresion_operacion_aritmetica','main.py',436),
  ('expresion_operacion_aritmetica -> IDENTIFICADOR operador_aritmentico numero','expresion_operacion_aritmetica',3,'p_expresion_operacion_aritmetica','main.py',437),
  ('expresion_operacion_aritmetica -> IDENTIFICADOR operador_aritmentico IDENTIFICADOR','expresion_operacion_aritmetica',3,'p_expresion_operacion_aritmetica','main.py',438),
  ('expresion_condicional -> numero operador_condicional numero','expresion_condicional',3,'p_expresion_condicional','main.py',442),
  ('expresion_condicional -> IDENTIFICADOR operador_condicional IDENTIFICADOR','expresion_condicional',3,'p_expresion_condicional','main.py',443),
  ('expresion_condicional -> IDENTIFICADOR operador_condicional numero','expresion_condicional',3,'p_expresion_condicional','main.py',444),
  ('expresion_condicional -> numero operador_condicional IDENTIFICADOR','expresion_condicional',3,'p_expresion_condicional','main.py',445),
  ('salida_entrada -> salida_uno','salida_entrada',1,'p_salida_entrada','main.py',456),
  ('salida_entrada -> salida_dos','salida_entrada',1,'p_salida_entrada','main.py',457),
  ('salida_entrada -> salida_tres','salida_entrada',1,'p_salida_entrada','main.py',458),
  ('salida_uno -> CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER','salida_uno',4,'p_salida_uno','main.py',462),
  ('salida_uno -> CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER','salida_uno',4,'p_salida_uno','main.py',463),
  ('salida_uno -> CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER','salida_uno',4,'p_salida_uno','main.py',464),
  ('salida_dos -> CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER','salida_dos',5,'p_salida_dos','main.py',467),
  ('salida_tres -> CONSOLE_READLINE PAR_IZQ PAR_DER','salida_tres',3,'p_salida_tres','main.py',470),
  ('funcion -> funcion_tipo_uno','funcion',1,'p_funcion','main.py',480),
  ('funcion -> funcion_tipo_tres','funcion',1,'p_funcion','main.py',481),
  ('funcion_tipo_uno -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ body LLAVE_DER','funcion_tipo_uno',8,'p_funcion_tipo_uno','main.py',485),
  ('funcion_tipo_tres -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ parametrosF PAR_DER LLAVE_IZQ bodyF LLAVE_DER','funcion_tipo_tres',9,'p_funcion_tipo_tres','main.py',491),
  ('parametrosF -> declaracion','parametrosF',1,'p_parametrosF','main.py',494),
  ('parametrosF -> declaracion COMA parametrosF','parametrosF',3,'p_parametrosF','main.py',495),
  ('bodyF -> asignacion END_OF_LINE','bodyF',2,'p_bodyF','main.py',499),
  ('bodyF -> declaracion END_OF_LINE','bodyF',2,'p_bodyF','main.py',500),
  ('bodyF -> salida_entrada END_OF_LINE','bodyF',2,'p_bodyF','main.py',501),
  ('bodyF -> asignacion END_OF_LINE bodyF','bodyF',3,'p_bodyF','main.py',502),
  ('bodyF -> declaracion END_OF_LINE bodyF','bodyF',3,'p_bodyF','main.py',503),
  ('bodyF -> salida_entrada END_OF_LINE bodyF','bodyF',3,'p_bodyF','main.py',504),
  ('lambda_exp -> lambdaArg LAMBDA lambdaCuerpo','lambda_exp',3,'p_lambda_exp','main.py',507),
  ('lambdaArg -> PAR_IZQ PAR_DER','lambdaArg',2,'p_lambdaArg','main.py',510),
  ('lambdaArg -> PAR_IZQ lambdaParametrosUno PAR_DER','lambdaArg',3,'p_lambdaArg','main.py',511),
  ('lambdaArg -> PAR_IZQ lambdaParametrosDos PAR_DER','lambdaArg',3,'p_lambdaArg','main.py',512),
  ('lambdaArg -> IDENTIFICADOR','lambdaArg',1,'p_lambdaArg','main.py',513),
  ('lambdaParametrosUno -> valor_tipo IDENTIFICADOR','lambdaParametrosUno',2,'p_lambdaParametrosUno','main.py',516),
  ('lambdaParametrosUno -> valor_tipo IDENTIFICADOR COMA lambdaParametrosUno','lambdaParametrosUno',4,'p_lambdaParametrosUno','main.py',517),
  ('lambdaParametrosDos -> IDENTIFICADOR','lambdaParametrosDos',1,'p_lambdaParametrosDos','main.py',520),
  ('lambdaParametrosDos -> IDENTIFICADOR COMA lambdaParametrosDos','lambdaParametrosDos',3,'p_lambdaParametrosDos','main.py',521),
  ('lambdaCuerpo -> expresion','lambdaCuerpo',1,'p_lambdaCuerpo','main.py',525),
  ('lambdaCuerpo -> salida_uno','lambdaCuerpo',1,'p_lambdaCuerpo','main.py',526),
  ('lambdaCuerpo -> salida_dos','lambdaCuerpo',1,'p_lambdaCuerpo','main.py',527),
]
