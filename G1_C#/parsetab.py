
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD AND AND_EQUAL AUMENTADO BOOL BOOL_TYPE BREAK BYTE CASE CHAR CHAR_TYPE CLASS COMA COMILLA_DOBLE COMILLA_SIMPLE CONSOLE_READLINE CONSOLE_WRITELINE CONST CONTINUE COR_DER COR_IZQ C_CADENA_INTERPOLADA C_IDENT_TEXTUAL DECREMENTADO DECREMENTO DEFAULT DIVIDIDO_POR DIVISION DO DOS_PUNTOS DOUBLE DOUBLE_TYPE ELSE END_OF_LINE EXC_OREQUAL FINALLY FLOAT FLOAT_TYPE FOR GLOBAL IDENTIFICADOR IGUAL IGUAL_IGUAL IN INCREMENTO INT INT_TYPE IR LAMBDA LEFTSHIFT_EQUAL LET LIST LLAVE_DER LLAVE_IZQ MAYOR_O_IGUAL_QUE MAYOR_QUE MENOR_O_IGUAL_QUE MENOR_QUE MODULO MODULO_DE MULTIPLICACION MULTIPLICADO_POR NEGACION NEW NOR NO_IGUAL NULL NULL_EQUAL NULL_VAL OBJECT ON OP_TERNARIO OR ORDERBY OR_EQUAL PAR_DER PAR_IZQ POP PRIVATE PROTECTED PUBLIC PUNTO PUSH QUEUE RESTA RETURN RIGHTSHIFT_EQUAL SHIFT_MAYOR SHIFT_MENOR SIMPLE_AND SIMPLE_OR STACK STRING STRING_TYPE STRUCT SUMA SWITCH THIS TO_UPPER TYPEOF VAR VOID WHEN WHERE WHILEbody : asignacion END_OF_LINE\n  | comparacion\n  | estructura_control\n  | estructura_datos\n  | expresion END_OF_LINE\n  | salida_entrada END_OF_LINE\n  | funcion\n  | declaracion END_OF_LINE\n  | empty\n  | funciones_estructura_datos END_OF_LINE\n  valor : CHAR\n  | numero\n  | BOOL\n  | STRING\n  | IDENTIFICADOR\n  numero : FLOAT\n  | DOUBLE\n  | INT\n  ftipo : valor_tipo\n                   | VOID\n    valor_tipo : CHAR_TYPE\n  | FLOAT_TYPE\n  | DOUBLE_TYPE\n  | INT_TYPE\n  | BOOL_TYPE\n  | STRING_TYPE\n  valor_tipo_inicializador : FLOAT_TYPE\n    | DOUBLE_TYPE\n    | STRING_TYPE\n    | INT_TYPE\n    | BOOL_TYPE\n    | CHAR_TYPE\n    | IDENTIFICADORmodificador_acceso : PRIVATE\n  | PROTECTED\n  | PUBLIC\n  operador_realacional : IGUAL_IGUAL\n  | NO_IGUAL \n  | MENOR_QUE\n  | MENOR_O_IGUAL_QUE\n  | MAYOR_QUE\n  | MAYOR_O_IGUAL_QUE\n  operador_aritmentico : SUMA\n  | RESTA\n  | MULTIPLICACION\n  | DIVISION\n  | MODULO\n  operador_condicional : IGUAL_IGUAL\n  | NO_IGUAL\n  | MENOR_QUE\n  | MENOR_O_IGUAL_QUE\n  | MAYOR_QUE\n  | MAYOR_O_IGUAL_QUE\n  operacion_string : STRING SUMA STRING\n    | STRING SUMA IDENTIFICADOR\n    | IDENTIFICADOR SUMA STRING\n    | IDENTIFICADOR SUMA IDENTIFICADORempty : END_OF_LINEasignacion : asignacionSimple\n                | asignacionCompuesta\n   asignacionSimple : IDENTIFICADOR IGUAL valor\n                      | IDENTIFICADOR IGUAL expresion\n                      | IDENTIFICADOR IGUAL salida_entrada\n                      | IDENTIFICADOR IGUAL asignacionEstructuraD\n  asignacionEstructuraD : asignacionPila\n                            | asignacionQueue\n                            | asignacionList\n    asignacionPila : NEW STACK tipoLista PAR_IZQ PAR_DERasignacionQueue : NEW QUEUE tipoLista PAR_IZQ PAR_DERasignacionList : NEW LIST tipoLista PAR_IZQ PAR_DERasignacionCompuesta : asignacionCompuesta_Logic\n                        | asignacionCompuesta_Number\n  asignacionCompuesta_Logic : IDENTIFICADOR operadoresCompuestosLogic BOOL\n                               | IDENTIFICADOR operadoresCompuestosLogic expresion_condicional\n                               | IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR\n  asignacionCompuesta_Number : IDENTIFICADOR operadoresCompuestosNumber numero\n                                | IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica\n                                | IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR\n   operadoresCompuestosNumber : AUMENTADO\n                          | DECREMENTADO\n                          | MULTIPLICADO_POR\n                          | DIVIDIDO_POR\n                          | MODULO_DE\n   operadoresCompuestosLogic : AND_EQUAL\n                                | OR_EQUAL\n                                | EXC_OREQUAL\n  declaracion : valor_tipo IDENTIFICADOR\n                 | declaracionEstructuraD\n                 | declaracionAsignacion\n   declaracionAsignacion : valor_tipo asignacionSimple\n\n  declaracionEstructuraD : declaracionList\n                              | declaracionQueue\n                              | declaracionPila\n    declaracionList : LIST tipoLista IDENTIFICADORdeclaracionQueue : QUEUE tipoLista IDENTIFICADORdeclaracionPila : STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADORcomparacion : valor operador_realacional valorestructura_control : while\n  | switch_case\n  | for\n  while : while_normal\n           | while_do\n  while_normal : WHILE PAR_IZQ expresion_condicional PAR_DER LLAVE_IZQ body_while LLAVE_DERwhile_do : DO LLAVE_IZQ body_while LLAVE_DER WHILE PAR_IZQ expresion_condicional PAR_DER END_OF_LINEbody_while : asignacion END_OF_LINE\n                  | declaracion END_OF_LINE\n                  | salida_entrada END_OF_LINE\n                  | BREAK END_OF_LINE\n                  | CONTINUE END_OF_LINE\n                  | asignacion END_OF_LINE body_while\n                  | declaracion END_OF_LINE body_while\n                  | salida_entrada END_OF_LINE body_while\n                  | BREAK END_OF_LINE body_while\n                  | CONTINUE END_OF_LINE body_while\n\n    switch_case : SWITCH PAR_IZQ valor PAR_DER LLAVE_IZQ casos LLAVE_DERcasos : CASE valor DOS_PUNTOS body_case BREAK END_OF_LINE\n  | CASE valor DOS_PUNTOS BREAK END_OF_LINE\n  | CASE valor DOS_PUNTOS body_case BREAK END_OF_LINE casos\n  | CASE valor DOS_PUNTOS BREAK END_OF_LINE casos\n  body_case : asignacion END_OF_LINE\n  | declaracion END_OF_LINE\n  | comparacion END_OF_LINE\n  | salida_entrada END_OF_LINE\n  | asignacion END_OF_LINE body_case\n  | declaracion END_OF_LINE body_case\n  | salida_entrada END_OF_LINE body_case\n  | comparacion END_OF_LINE body_case\n  for : FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DERforIterador : IDENTIFICADOR operadorForIteracionoperadorForIteracion : INCREMENTO \n                            | DECREMENTOforCondicion : IDENTIFICADOR operador_condicional valorForCondicionvalorForCondicion : FLOAT\n            | DOUBLE\n            | INT\n            | IDENTIFICADORforInicializador : tipoDatoForInicializador IDENTIFICADOR IGUAL valorForInicializador\n                    | IDENTIFICADOR IGUAL valorForInicializadortipoDatoForInicializador : FLOAT_TYPE\n                        | DOUBLE_TYPE\n                        | INT_TYPEvalorForInicializador : FLOAT\n            | DOUBLE\n            | INT\n            | IDENTIFICADORestructura_datos : lista\n                      | pila\n  lista : LIST tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINEtipoLista : MENOR_QUE valor_tipo_inicializador MAYOR_QUEpila : STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL NEW STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINEfunciones_estructura_datos : stack_push\n                                  | stack_pop\n    stack_push : IDENTIFICADOR PUNTO PUSH PAR_IZQ valor PAR_DERstack_pop : IDENTIFICADOR PUNTO POP PAR_IZQ PAR_DERexpresion : expresion_operacion_aritmetica\n  | expresion_condicional\n  expresion_operacion_aritmetica : numero operador_aritmentico numero\n  | numero operador_aritmentico IDENTIFICADOR\n  | IDENTIFICADOR operador_aritmentico numero\n  | IDENTIFICADOR operador_aritmentico IDENTIFICADOR\n  expresion_condicional : numero operador_condicional numero\n  | IDENTIFICADOR operador_condicional IDENTIFICADOR\n  | IDENTIFICADOR operador_condicional numero\n  | numero operador_condicional IDENTIFICADOR\n  salida_entrada : salida_uno\n                    | salida_dos\n                    | salida_tressalida_uno : CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER\n                    | CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER\n                    | CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DERsalida_dos : CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DERsalida_tres : CONSOLE_READLINE PAR_IZQ PAR_DERfuncion : funcion_tipo_uno\n             | funcion_tipo_tres\n  funcion_tipo_uno : modificador_acceso VOID IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ body LLAVE_DERfuncion_tipo_tres : modificador_acceso VOID IDENTIFICADOR PAR_IZQ parametrosF PAR_DER LLAVE_IZQ bodyF LLAVE_DERparametrosF : declaracion\n                 | declaracion COMA parametrosF\n  bodyF : asignacion END_OF_LINE\n            | declaracion END_OF_LINE\n            | salida_entrada END_OF_LINE\n            | asignacion END_OF_LINE bodyF\n            | declaracion END_OF_LINE bodyF\n            | salida_entrada END_OF_LINE bodyF'
    
_lr_action_items = {'END_OF_LINE':([0,2,7,8,10,12,13,14,21,22,23,24,25,30,31,32,33,34,35,36,37,38,39,55,56,57,58,59,60,79,80,119,120,121,122,123,124,125,126,127,128,129,131,132,133,134,137,138,139,141,142,143,144,145,146,147,149,155,169,174,175,176,177,178,182,195,197,198,215,217,220,221,222,223,224,226,231,242,247,252,255,261,262,263,268,269,270,271,272,280,290,291,292,293,295,296,297,298,299,301,302,309,331,],[3,67,68,69,70,71,-59,-60,-155,-156,-165,-166,-167,-88,-89,-151,-152,-71,-72,-11,-12,-13,-14,-91,-92,-93,-16,-17,-18,-87,-90,-97,-12,-15,-15,-61,-62,-63,-64,-65,-66,-67,-160,-159,-162,-163,-75,-73,-74,-78,-76,-77,-157,-158,-161,-164,189,-94,-172,204,205,206,207,208,-95,-168,-169,-170,-154,250,-145,-138,-142,-143,-144,-96,-171,-94,-153,-137,3,-68,-69,-70,-136,-132,-133,-134,-135,-96,305,306,307,308,310,311,312,313,314,3,316,321,332,]),'IDENTIFICADOR':([0,28,49,50,51,52,53,54,72,73,74,75,76,77,78,81,82,83,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,115,116,117,118,150,152,153,154,186,189,191,193,194,196,199,204,205,206,207,208,209,210,219,235,249,250,251,255,259,260,276,281,301,303,305,306,307,311,312,313,314,],[29,79,-21,-22,-23,-24,-25,-26,121,-37,-38,-39,-40,-41,-42,122,131,133,137,141,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-84,-85,-86,-79,-80,-81,-82,-83,145,147,121,151,155,163,163,167,170,172,179,182,190,-139,-140,-141,121,218,220,-149,226,228,229,179,179,179,179,179,242,163,220,179,121,267,268,29,172,280,179,300,29,163,179,179,179,300,300,300,300,]),'CHAR':([0,72,73,74,75,76,77,78,81,108,186,249,255,281,301,311,312,313,314,],[36,36,-37,-38,-39,-40,-41,-42,36,36,36,36,36,36,36,36,36,36,36,]),'BOOL':([0,72,73,74,75,76,77,78,81,85,98,99,100,108,186,249,255,281,301,311,312,313,314,],[38,38,-37,-38,-39,-40,-41,-42,38,138,-84,-85,-86,38,38,38,38,38,38,38,38,38,38,]),'STRING':([0,72,73,74,75,76,77,78,81,108,113,168,186,196,199,249,255,281,301,311,312,313,314,],[39,39,-37,-38,-39,-40,-41,-42,39,39,165,200,39,227,230,39,39,39,39,39,39,39,39,]),'SWITCH':([0,255,301,],[42,42,42,]),'FOR':([0,255,301,],[43,43,43,]),'LIST':([0,117,130,201,204,205,206,207,208,225,235,255,257,276,281,301,305,306,307,311,312,313,314,],[44,180,185,180,180,180,180,180,180,253,180,44,180,180,180,44,180,180,180,180,180,180,180,]),'STACK':([0,117,130,201,204,205,206,207,208,235,255,257,274,276,281,301,305,306,307,311,312,313,314,],[45,181,183,181,181,181,181,181,181,181,45,181,287,181,181,45,181,181,181,181,181,181,181,]),'CONSOLE_WRITELINE':([0,81,117,204,205,206,207,208,235,255,276,281,301,305,306,307,311,312,313,314,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'CONSOLE_READLINE':([0,81,117,204,205,206,207,208,235,255,276,281,301,305,306,307,311,312,313,314,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'CHAR_TYPE':([0,111,112,117,201,204,205,206,207,208,210,235,255,257,276,281,301,303,305,306,307,311,312,313,314,],[49,162,162,49,49,49,49,49,49,49,162,49,49,49,49,49,49,162,49,49,49,49,49,49,49,]),'FLOAT_TYPE':([0,109,111,112,117,201,204,205,206,207,208,210,235,255,257,276,281,301,303,305,306,307,311,312,313,314,],[50,152,157,157,50,50,50,50,50,50,50,157,50,50,50,50,50,50,157,50,50,50,50,50,50,50,]),'DOUBLE_TYPE':([0,109,111,112,117,201,204,205,206,207,208,210,235,255,257,276,281,301,303,305,306,307,311,312,313,314,],[51,153,158,158,51,51,51,51,51,51,51,158,51,51,51,51,51,51,158,51,51,51,51,51,51,51,]),'INT_TYPE':([0,109,111,112,117,201,204,205,206,207,208,210,235,255,257,276,281,301,303,305,306,307,311,312,313,314,],[52,154,160,160,52,52,52,52,52,52,52,160,52,52,52,52,52,52,160,52,52,52,52,52,52,52,]),'BOOL_TYPE':([0,111,112,117,201,204,205,206,207,208,210,235,255,257,276,281,301,303,305,306,307,311,312,313,314,],[53,161,161,53,53,53,53,53,53,53,161,53,53,53,53,53,53,161,53,53,53,53,53,53,53,]),'STRING_TYPE':([0,111,112,117,201,204,205,206,207,208,210,235,255,257,276,281,301,303,305,306,307,311,312,313,314,],[54,159,159,54,54,54,54,54,54,54,159,54,54,54,54,54,54,159,54,54,54,54,54,54,54,]),'FLOAT':([0,72,73,74,75,76,77,78,81,82,83,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,116,186,191,219,249,251,255,259,281,301,311,312,313,314,],[58,58,-37,-38,-39,-40,-41,-42,58,58,58,58,58,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-84,-85,-86,-79,-80,-81,-82,-83,58,58,58,58,58,222,222,58,270,58,58,58,58,58,58,58,58,]),'DOUBLE':([0,72,73,74,75,76,77,78,81,82,83,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,116,186,191,219,249,251,255,259,281,301,311,312,313,314,],[59,59,-37,-38,-39,-40,-41,-42,59,59,59,59,59,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-84,-85,-86,-79,-80,-81,-82,-83,59,59,59,59,59,223,223,59,271,59,59,59,59,59,59,59,59,]),'INT':([0,72,73,74,75,76,77,78,81,82,83,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,116,186,191,219,249,251,255,259,281,301,311,312,313,314,],[60,60,-37,-38,-39,-40,-41,-42,60,60,60,60,60,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-84,-85,-86,-79,-80,-81,-82,-83,60,60,60,60,60,224,224,60,272,60,60,60,60,60,60,60,60,]),'WHILE':([0,203,255,301,],[61,236,61,61,]),'DO':([0,255,301,],[62,62,62,]),'PRIVATE':([0,255,301,],[63,63,63,]),'PROTECTED':([0,255,301,],[64,64,64,]),'PUBLIC':([0,255,301,],[65,65,65,]),'QUEUE':([0,117,130,201,204,205,206,207,208,235,255,257,276,281,301,305,306,307,311,312,313,314,],[66,66,184,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'$end':([1,3,4,5,6,9,11,16,17,18,19,20,26,27,36,38,39,40,41,58,59,60,67,68,69,70,71,119,120,121,264,278,288,304,308,316,327,332,],[0,-58,-2,-3,-4,-7,-9,-98,-99,-100,-146,-147,-173,-174,-11,-13,-14,-101,-102,-16,-17,-18,-1,-5,-6,-8,-10,-97,-12,-15,-115,-103,-175,-176,-104,-148,-128,-150,]),'LLAVE_DER':([3,4,5,6,9,11,16,17,18,19,20,26,27,36,38,39,40,41,58,59,60,67,68,69,70,71,119,120,121,173,204,205,206,207,208,237,238,239,240,241,248,258,264,275,278,288,289,304,305,306,307,308,310,315,316,318,319,320,321,322,327,329,332,],[-58,-2,-3,-4,-7,-9,-98,-99,-100,-146,-147,-173,-174,-11,-13,-14,-101,-102,-16,-17,-18,-1,-5,-6,-8,-10,-97,-12,-15,203,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,264,278,-115,288,-103,-175,304,-176,-179,-180,-181,-104,-117,327,-148,-182,-183,-184,-116,-119,-128,-118,-150,]),'IGUAL_IGUAL':([15,29,36,37,38,39,58,59,60,120,122,137,140,172,218,300,],[73,92,-11,92,-13,-14,-16,-17,-18,-12,92,92,92,92,92,-15,]),'NO_IGUAL':([15,29,36,37,38,39,58,59,60,120,122,137,140,172,218,300,],[74,93,-11,93,-13,-14,-16,-17,-18,-12,93,93,93,93,93,-15,]),'MENOR_QUE':([15,29,36,37,38,39,44,45,58,59,60,66,120,122,137,140,172,180,181,183,184,185,218,253,287,300,],[75,94,-11,94,-13,-14,111,112,-16,-17,-18,111,-12,94,94,94,94,111,210,111,111,111,94,111,303,-15,]),'MENOR_O_IGUAL_QUE':([15,29,36,37,38,39,58,59,60,120,122,137,140,172,218,300,],[76,95,-11,95,-13,-14,-16,-17,-18,-12,95,95,95,95,95,-15,]),'MAYOR_QUE':([15,29,36,37,38,39,58,59,60,120,122,137,140,156,157,158,159,160,161,162,163,164,172,218,243,300,317,],[77,96,-11,96,-13,-14,-16,-17,-18,-12,96,96,96,193,-27,-28,-29,-30,-31,-32,-33,194,96,96,260,-15,328,]),'MAYOR_O_IGUAL_QUE':([15,29,36,37,38,39,58,59,60,120,122,137,140,172,218,300,],[78,97,-11,97,-13,-14,-16,-17,-18,-12,97,97,97,97,97,-15,]),'COMA':([21,22,23,24,25,30,31,36,37,38,39,55,56,57,58,59,60,79,80,122,123,124,125,126,127,128,129,131,132,133,134,144,145,146,147,169,182,195,197,198,231,234,242,261,262,263,280,],[-155,-156,-165,-166,-167,-88,-89,-11,-12,-13,-14,-91,-92,-93,-16,-17,-18,-87,-90,-15,-61,-62,-63,-64,-65,-66,-67,-160,-159,-162,-163,-157,-158,-161,-164,-172,-95,-168,-169,-170,-171,257,-94,-68,-69,-70,-96,]),'PAR_DER':([21,22,23,24,25,30,31,36,37,38,39,55,56,57,58,59,60,79,80,114,120,121,122,123,124,125,126,127,128,129,131,132,133,134,144,145,146,147,148,165,166,167,169,171,182,187,195,197,198,200,201,214,227,228,229,230,231,233,234,242,244,245,246,261,262,263,266,277,279,280,283,284,285,286,330,],[-155,-156,-165,-166,-167,-88,-89,-11,-12,-13,-14,-91,-92,-93,-16,-17,-18,-87,-90,169,-12,-15,-15,-61,-62,-63,-64,-65,-66,-67,-160,-159,-162,-163,-157,-158,-161,-164,188,195,197,198,-172,202,-95,215,-168,-169,-170,231,232,247,-54,-55,-57,-56,-171,256,-177,-94,261,262,263,-68,-69,-70,282,-178,293,-96,-129,-130,-131,302,331,]),'IGUAL':([29,79,151,155,179,190,226,300,],[81,81,191,192,81,219,254,81,]),'PUNTO':([29,],[84,]),'SUMA':([29,37,58,59,60,122,141,142,165,167,],[87,87,-16,-17,-18,87,87,87,196,199,]),'RESTA':([29,37,58,59,60,122,141,142,],[88,88,-16,-17,-18,88,88,88,]),'MULTIPLICACION':([29,37,58,59,60,122,141,142,],[89,89,-16,-17,-18,89,89,89,]),'DIVISION':([29,37,58,59,60,122,141,142,],[90,90,-16,-17,-18,90,90,90,]),'MODULO':([29,37,58,59,60,122,141,142,],[91,91,-16,-17,-18,91,91,91,]),'AND_EQUAL':([29,179,300,],[98,98,98,]),'OR_EQUAL':([29,179,300,],[99,99,99,]),'EXC_OREQUAL':([29,179,300,],[100,100,100,]),'AUMENTADO':([29,179,300,],[101,101,101,]),'DECREMENTADO':([29,179,300,],[102,102,102,]),'MULTIPLICADO_POR':([29,179,300,],[103,103,103,]),'DIVIDIDO_POR':([29,179,300,],[104,104,104,]),'MODULO_DE':([29,179,300,],[105,105,105,]),'DOS_PUNTOS':([36,38,39,58,59,60,120,121,265,],[-11,-13,-14,-16,-17,-18,-12,-15,281,]),'PAR_IZQ':([42,43,46,47,61,135,136,170,193,211,212,213,236,273,328,],[108,109,113,114,116,186,187,201,-149,244,245,246,259,286,330,]),'VOID':([48,63,64,65,],[115,-34,-35,-36,]),'LLAVE_IZQ':([62,188,202,232,256,282,],[117,216,235,255,276,301,]),'NEW':([81,192,254,],[130,225,274,]),'PUSH':([84,],[135,]),'POP':([84,],[136,]),'C_CADENA_INTERPOLADA':([113,],[168,]),'BREAK':([117,204,205,206,207,208,235,281,294,311,312,313,314,323,324,325,326,],[177,177,177,177,177,177,177,295,309,-120,-121,-122,-123,-124,-125,-127,-126,]),'CONTINUE':([117,204,205,206,207,208,235,],[178,178,178,178,178,178,178,]),'CASE':([216,310,321,],[249,249,249,]),'INCREMENTO':([267,],[284,]),'DECREMENTO':([267,],[285,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'body':([0,255,301,],[1,275,315,]),'asignacion':([0,117,204,205,206,207,208,235,255,276,281,301,305,306,307,311,312,313,314,],[2,174,174,174,174,174,174,174,2,290,296,2,290,290,290,296,296,296,296,]),'comparacion':([0,255,281,301,311,312,313,314,],[4,4,298,4,298,298,298,298,]),'estructura_control':([0,255,301,],[5,5,5,]),'estructura_datos':([0,255,301,],[6,6,6,]),'expresion':([0,81,255,301,],[7,124,7,7,]),'salida_entrada':([0,81,117,204,205,206,207,208,235,255,276,281,301,305,306,307,311,312,313,314,],[8,125,176,176,176,176,176,176,176,8,292,299,8,292,292,292,299,299,299,299,]),'funcion':([0,255,301,],[9,9,9,]),'declaracion':([0,117,201,204,205,206,207,208,235,255,257,276,281,301,305,306,307,311,312,313,314,],[10,175,234,175,175,175,175,175,175,10,234,291,297,10,291,291,291,297,297,297,297,]),'empty':([0,255,301,],[11,11,11,]),'funciones_estructura_datos':([0,255,301,],[12,12,12,]),'asignacionSimple':([0,28,117,204,205,206,207,208,235,255,276,281,301,305,306,307,311,312,313,314,],[13,80,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'asignacionCompuesta':([0,117,204,205,206,207,208,235,255,276,281,301,305,306,307,311,312,313,314,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'valor':([0,72,81,108,186,249,255,281,301,311,312,313,314,],[15,119,123,148,214,265,15,15,15,15,15,15,15,]),'while':([0,255,301,],[16,16,16,]),'switch_case':([0,255,301,],[17,17,17,]),'for':([0,255,301,],[18,18,18,]),'lista':([0,255,301,],[19,19,19,]),'pila':([0,255,301,],[20,20,20,]),'expresion_operacion_aritmetica':([0,81,86,255,301,],[21,21,143,21,21,]),'expresion_condicional':([0,81,85,116,255,259,301,],[22,22,139,171,22,279,22,]),'salida_uno':([0,81,117,204,205,206,207,208,235,255,276,281,301,305,306,307,311,312,313,314,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'salida_dos':([0,81,117,204,205,206,207,208,235,255,276,281,301,305,306,307,311,312,313,314,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'salida_tres':([0,81,117,204,205,206,207,208,235,255,276,281,301,305,306,307,311,312,313,314,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'funcion_tipo_uno':([0,255,301,],[26,26,26,]),'funcion_tipo_tres':([0,255,301,],[27,27,27,]),'valor_tipo':([0,117,201,204,205,206,207,208,235,255,257,276,281,301,305,306,307,311,312,313,314,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'declaracionEstructuraD':([0,117,201,204,205,206,207,208,235,255,257,276,281,301,305,306,307,311,312,313,314,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'declaracionAsignacion':([0,117,201,204,205,206,207,208,235,255,257,276,281,301,305,306,307,311,312,313,314,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'stack_push':([0,255,301,],[32,32,32,]),'stack_pop':([0,255,301,],[33,33,33,]),'asignacionCompuesta_Logic':([0,117,204,205,206,207,208,235,255,276,281,301,305,306,307,311,312,313,314,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'asignacionCompuesta_Number':([0,117,204,205,206,207,208,235,255,276,281,301,305,306,307,311,312,313,314,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'numero':([0,72,81,82,83,85,86,106,107,108,116,186,249,255,259,281,301,311,312,313,314,],[37,120,37,132,134,140,142,144,146,120,140,120,120,37,140,120,37,120,120,120,120,]),'while_normal':([0,255,301,],[40,40,40,]),'while_do':([0,255,301,],[41,41,41,]),'modificador_acceso':([0,255,301,],[48,48,48,]),'declaracionList':([0,117,201,204,205,206,207,208,235,255,257,276,281,301,305,306,307,311,312,313,314,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'declaracionQueue':([0,117,201,204,205,206,207,208,235,255,257,276,281,301,305,306,307,311,312,313,314,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'declaracionPila':([0,117,201,204,205,206,207,208,235,255,257,276,281,301,305,306,307,311,312,313,314,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'operador_realacional':([15,],[72,]),'operador_aritmentico':([29,37,122,141,142,],[82,106,82,82,106,]),'operador_condicional':([29,37,122,137,140,172,218,],[83,107,83,83,107,83,251,]),'operadoresCompuestosLogic':([29,179,300,],[85,85,85,]),'operadoresCompuestosNumber':([29,179,300,],[86,86,86,]),'tipoLista':([44,66,180,183,184,185,253,],[110,118,209,211,212,213,273,]),'asignacionEstructuraD':([81,],[126,]),'asignacionPila':([81,],[127,]),'asignacionQueue':([81,],[128,]),'asignacionList':([81,],[129,]),'forInicializador':([109,],[149,]),'tipoDatoForInicializador':([109,],[150,]),'valor_tipo_inicializador':([111,112,210,303,],[156,164,243,317,]),'operacion_string':([113,],[166,]),'body_while':([117,204,205,206,207,208,235,],[173,237,238,239,240,241,258,]),'forCondicion':([189,],[217,]),'valorForInicializador':([191,219,],[221,252,]),'parametrosF':([201,257,],[233,277,]),'casos':([216,310,321,],[248,322,329,]),'forIterador':([250,],[266,]),'valorForCondicion':([251,],[269,]),'operadorForIteracion':([267,],[283,]),'bodyF':([276,305,306,307,],[289,318,319,320,]),'body_case':([281,311,312,313,314,],[294,323,324,325,326,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> body","S'",1,None,None,None),
  ('body -> asignacion END_OF_LINE','body',2,'p_body','main.py',6),
  ('body -> comparacion','body',1,'p_body','main.py',7),
  ('body -> estructura_control','body',1,'p_body','main.py',8),
  ('body -> estructura_datos','body',1,'p_body','main.py',9),
  ('body -> expresion END_OF_LINE','body',2,'p_body','main.py',10),
  ('body -> salida_entrada END_OF_LINE','body',2,'p_body','main.py',11),
  ('body -> funcion','body',1,'p_body','main.py',12),
  ('body -> declaracion END_OF_LINE','body',2,'p_body','main.py',13),
  ('body -> empty','body',1,'p_body','main.py',14),
  ('body -> funciones_estructura_datos END_OF_LINE','body',2,'p_body','main.py',15),
  ('valor -> CHAR','valor',1,'p_valor','main.py',24),
  ('valor -> numero','valor',1,'p_valor','main.py',25),
  ('valor -> BOOL','valor',1,'p_valor','main.py',26),
  ('valor -> STRING','valor',1,'p_valor','main.py',27),
  ('valor -> IDENTIFICADOR','valor',1,'p_valor','main.py',28),
  ('numero -> FLOAT','numero',1,'p_numero','main.py',32),
  ('numero -> DOUBLE','numero',1,'p_numero','main.py',33),
  ('numero -> INT','numero',1,'p_numero','main.py',34),
  ('ftipo -> valor_tipo','ftipo',1,'p_ftipo','main.py',37),
  ('ftipo -> VOID','ftipo',1,'p_ftipo','main.py',38),
  ('valor_tipo -> CHAR_TYPE','valor_tipo',1,'p_valor_tipo','main.py',42),
  ('valor_tipo -> FLOAT_TYPE','valor_tipo',1,'p_valor_tipo','main.py',43),
  ('valor_tipo -> DOUBLE_TYPE','valor_tipo',1,'p_valor_tipo','main.py',44),
  ('valor_tipo -> INT_TYPE','valor_tipo',1,'p_valor_tipo','main.py',45),
  ('valor_tipo -> BOOL_TYPE','valor_tipo',1,'p_valor_tipo','main.py',46),
  ('valor_tipo -> STRING_TYPE','valor_tipo',1,'p_valor_tipo','main.py',47),
  ('valor_tipo_inicializador -> FLOAT_TYPE','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','main.py',51),
  ('valor_tipo_inicializador -> DOUBLE_TYPE','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','main.py',52),
  ('valor_tipo_inicializador -> STRING_TYPE','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','main.py',53),
  ('valor_tipo_inicializador -> INT_TYPE','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','main.py',54),
  ('valor_tipo_inicializador -> BOOL_TYPE','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','main.py',55),
  ('valor_tipo_inicializador -> CHAR_TYPE','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','main.py',56),
  ('valor_tipo_inicializador -> IDENTIFICADOR','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','main.py',57),
  ('modificador_acceso -> PRIVATE','modificador_acceso',1,'p_modificador_acceso','main.py',60),
  ('modificador_acceso -> PROTECTED','modificador_acceso',1,'p_modificador_acceso','main.py',61),
  ('modificador_acceso -> PUBLIC','modificador_acceso',1,'p_modificador_acceso','main.py',62),
  ('operador_realacional -> IGUAL_IGUAL','operador_realacional',1,'p_operador_realacional','main.py',66),
  ('operador_realacional -> NO_IGUAL','operador_realacional',1,'p_operador_realacional','main.py',67),
  ('operador_realacional -> MENOR_QUE','operador_realacional',1,'p_operador_realacional','main.py',68),
  ('operador_realacional -> MENOR_O_IGUAL_QUE','operador_realacional',1,'p_operador_realacional','main.py',69),
  ('operador_realacional -> MAYOR_QUE','operador_realacional',1,'p_operador_realacional','main.py',70),
  ('operador_realacional -> MAYOR_O_IGUAL_QUE','operador_realacional',1,'p_operador_realacional','main.py',71),
  ('operador_aritmentico -> SUMA','operador_aritmentico',1,'p_operador_aritmentico','main.py',75),
  ('operador_aritmentico -> RESTA','operador_aritmentico',1,'p_operador_aritmentico','main.py',76),
  ('operador_aritmentico -> MULTIPLICACION','operador_aritmentico',1,'p_operador_aritmentico','main.py',77),
  ('operador_aritmentico -> DIVISION','operador_aritmentico',1,'p_operador_aritmentico','main.py',78),
  ('operador_aritmentico -> MODULO','operador_aritmentico',1,'p_operador_aritmentico','main.py',79),
  ('operador_condicional -> IGUAL_IGUAL','operador_condicional',1,'p_operador_condicional','main.py',83),
  ('operador_condicional -> NO_IGUAL','operador_condicional',1,'p_operador_condicional','main.py',84),
  ('operador_condicional -> MENOR_QUE','operador_condicional',1,'p_operador_condicional','main.py',85),
  ('operador_condicional -> MENOR_O_IGUAL_QUE','operador_condicional',1,'p_operador_condicional','main.py',86),
  ('operador_condicional -> MAYOR_QUE','operador_condicional',1,'p_operador_condicional','main.py',87),
  ('operador_condicional -> MAYOR_O_IGUAL_QUE','operador_condicional',1,'p_operador_condicional','main.py',88),
  ('operacion_string -> STRING SUMA STRING','operacion_string',3,'p_operacion_string','main.py',92),
  ('operacion_string -> STRING SUMA IDENTIFICADOR','operacion_string',3,'p_operacion_string','main.py',93),
  ('operacion_string -> IDENTIFICADOR SUMA STRING','operacion_string',3,'p_operacion_string','main.py',94),
  ('operacion_string -> IDENTIFICADOR SUMA IDENTIFICADOR','operacion_string',3,'p_operacion_string','main.py',95),
  ('empty -> END_OF_LINE','empty',1,'p_empty','main.py',105),
  ('asignacion -> asignacionSimple','asignacion',1,'p_asignacion','main.py',108),
  ('asignacion -> asignacionCompuesta','asignacion',1,'p_asignacion','main.py',109),
  ('asignacionSimple -> IDENTIFICADOR IGUAL valor','asignacionSimple',3,'p_asignacionSimple','main.py',112),
  ('asignacionSimple -> IDENTIFICADOR IGUAL expresion','asignacionSimple',3,'p_asignacionSimple','main.py',113),
  ('asignacionSimple -> IDENTIFICADOR IGUAL salida_entrada','asignacionSimple',3,'p_asignacionSimple','main.py',114),
  ('asignacionSimple -> IDENTIFICADOR IGUAL asignacionEstructuraD','asignacionSimple',3,'p_asignacionSimple','main.py',115),
  ('asignacionEstructuraD -> asignacionPila','asignacionEstructuraD',1,'p_asignacionEstructuraD','main.py',119),
  ('asignacionEstructuraD -> asignacionQueue','asignacionEstructuraD',1,'p_asignacionEstructuraD','main.py',120),
  ('asignacionEstructuraD -> asignacionList','asignacionEstructuraD',1,'p_asignacionEstructuraD','main.py',121),
  ('asignacionPila -> NEW STACK tipoLista PAR_IZQ PAR_DER','asignacionPila',5,'p_asignacionPila','main.py',125),
  ('asignacionQueue -> NEW QUEUE tipoLista PAR_IZQ PAR_DER','asignacionQueue',5,'p_asignacionQueue','main.py',128),
  ('asignacionList -> NEW LIST tipoLista PAR_IZQ PAR_DER','asignacionList',5,'p_asignacionList','main.py',131),
  ('asignacionCompuesta -> asignacionCompuesta_Logic','asignacionCompuesta',1,'p_asignacionCompuesta','main.py',134),
  ('asignacionCompuesta -> asignacionCompuesta_Number','asignacionCompuesta',1,'p_asignacionCompuesta','main.py',135),
  ('asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic BOOL','asignacionCompuesta_Logic',3,'p_asignacionCompuesta_Logic','main.py',138),
  ('asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic expresion_condicional','asignacionCompuesta_Logic',3,'p_asignacionCompuesta_Logic','main.py',139),
  ('asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR','asignacionCompuesta_Logic',3,'p_asignacionCompuesta_Logic','main.py',140),
  ('asignacionCompuesta_Number -> IDENTIFICADOR operadoresCompuestosNumber numero','asignacionCompuesta_Number',3,'p_asignacionCompuesta_Number','main.py',144),
  ('asignacionCompuesta_Number -> IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica','asignacionCompuesta_Number',3,'p_asignacionCompuesta_Number','main.py',145),
  ('asignacionCompuesta_Number -> IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR','asignacionCompuesta_Number',3,'p_asignacionCompuesta_Number','main.py',146),
  ('operadoresCompuestosNumber -> AUMENTADO','operadoresCompuestosNumber',1,'p_operadoresCompuestosNumber','main.py',150),
  ('operadoresCompuestosNumber -> DECREMENTADO','operadoresCompuestosNumber',1,'p_operadoresCompuestosNumber','main.py',151),
  ('operadoresCompuestosNumber -> MULTIPLICADO_POR','operadoresCompuestosNumber',1,'p_operadoresCompuestosNumber','main.py',152),
  ('operadoresCompuestosNumber -> DIVIDIDO_POR','operadoresCompuestosNumber',1,'p_operadoresCompuestosNumber','main.py',153),
  ('operadoresCompuestosNumber -> MODULO_DE','operadoresCompuestosNumber',1,'p_operadoresCompuestosNumber','main.py',154),
  ('operadoresCompuestosLogic -> AND_EQUAL','operadoresCompuestosLogic',1,'p_operadoresCompuestosLogic','main.py',157),
  ('operadoresCompuestosLogic -> OR_EQUAL','operadoresCompuestosLogic',1,'p_operadoresCompuestosLogic','main.py',158),
  ('operadoresCompuestosLogic -> EXC_OREQUAL','operadoresCompuestosLogic',1,'p_operadoresCompuestosLogic','main.py',159),
  ('declaracion -> valor_tipo IDENTIFICADOR','declaracion',2,'p_declaracion','main.py',162),
  ('declaracion -> declaracionEstructuraD','declaracion',1,'p_declaracion','main.py',163),
  ('declaracion -> declaracionAsignacion','declaracion',1,'p_declaracion','main.py',164),
  ('declaracionAsignacion -> valor_tipo asignacionSimple','declaracionAsignacion',2,'p_declaracionAsignacion','main.py',168),
  ('declaracionEstructuraD -> declaracionList','declaracionEstructuraD',1,'p_declaracionEstructuraD','main.py',172),
  ('declaracionEstructuraD -> declaracionQueue','declaracionEstructuraD',1,'p_declaracionEstructuraD','main.py',173),
  ('declaracionEstructuraD -> declaracionPila','declaracionEstructuraD',1,'p_declaracionEstructuraD','main.py',174),
  ('declaracionList -> LIST tipoLista IDENTIFICADOR','declaracionList',3,'p_declaracionList','main.py',178),
  ('declaracionQueue -> QUEUE tipoLista IDENTIFICADOR','declaracionQueue',3,'p_declaracionQueue','main.py',181),
  ('declaracionPila -> STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR','declaracionPila',5,'p_declaracionPila','main.py',184),
  ('comparacion -> valor operador_realacional valor','comparacion',3,'p_comparacion','main.py',208),
  ('estructura_control -> while','estructura_control',1,'p_estructura_control','main.py',217),
  ('estructura_control -> switch_case','estructura_control',1,'p_estructura_control','main.py',218),
  ('estructura_control -> for','estructura_control',1,'p_estructura_control','main.py',219),
  ('while -> while_normal','while',1,'p_while','main.py',224),
  ('while -> while_do','while',1,'p_while','main.py',225),
  ('while_normal -> WHILE PAR_IZQ expresion_condicional PAR_DER LLAVE_IZQ body_while LLAVE_DER','while_normal',7,'p_while_normal','main.py',229),
  ('while_do -> DO LLAVE_IZQ body_while LLAVE_DER WHILE PAR_IZQ expresion_condicional PAR_DER END_OF_LINE','while_do',9,'p_while_do','main.py',232),
  ('body_while -> asignacion END_OF_LINE','body_while',2,'p_body_while','main.py',235),
  ('body_while -> declaracion END_OF_LINE','body_while',2,'p_body_while','main.py',236),
  ('body_while -> salida_entrada END_OF_LINE','body_while',2,'p_body_while','main.py',237),
  ('body_while -> BREAK END_OF_LINE','body_while',2,'p_body_while','main.py',238),
  ('body_while -> CONTINUE END_OF_LINE','body_while',2,'p_body_while','main.py',239),
  ('body_while -> asignacion END_OF_LINE body_while','body_while',3,'p_body_while','main.py',240),
  ('body_while -> declaracion END_OF_LINE body_while','body_while',3,'p_body_while','main.py',241),
  ('body_while -> salida_entrada END_OF_LINE body_while','body_while',3,'p_body_while','main.py',242),
  ('body_while -> BREAK END_OF_LINE body_while','body_while',3,'p_body_while','main.py',243),
  ('body_while -> CONTINUE END_OF_LINE body_while','body_while',3,'p_body_while','main.py',244),
  ('switch_case -> SWITCH PAR_IZQ valor PAR_DER LLAVE_IZQ casos LLAVE_DER','switch_case',7,'p_switch_case','main.py',254),
  ('casos -> CASE valor DOS_PUNTOS body_case BREAK END_OF_LINE','casos',6,'p_casos','main.py',257),
  ('casos -> CASE valor DOS_PUNTOS BREAK END_OF_LINE','casos',5,'p_casos','main.py',258),
  ('casos -> CASE valor DOS_PUNTOS body_case BREAK END_OF_LINE casos','casos',7,'p_casos','main.py',259),
  ('casos -> CASE valor DOS_PUNTOS BREAK END_OF_LINE casos','casos',6,'p_casos','main.py',260),
  ('body_case -> asignacion END_OF_LINE','body_case',2,'p_body_case','main.py',263),
  ('body_case -> declaracion END_OF_LINE','body_case',2,'p_body_case','main.py',264),
  ('body_case -> comparacion END_OF_LINE','body_case',2,'p_body_case','main.py',265),
  ('body_case -> salida_entrada END_OF_LINE','body_case',2,'p_body_case','main.py',266),
  ('body_case -> asignacion END_OF_LINE body_case','body_case',3,'p_body_case','main.py',267),
  ('body_case -> declaracion END_OF_LINE body_case','body_case',3,'p_body_case','main.py',268),
  ('body_case -> salida_entrada END_OF_LINE body_case','body_case',3,'p_body_case','main.py',269),
  ('body_case -> comparacion END_OF_LINE body_case','body_case',3,'p_body_case','main.py',270),
  ('for -> FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DER','for',11,'p_for','main.py',280),
  ('forIterador -> IDENTIFICADOR operadorForIteracion','forIterador',2,'p_forIterador','main.py',286),
  ('operadorForIteracion -> INCREMENTO','operadorForIteracion',1,'p_operadorForIteracion','main.py',290),
  ('operadorForIteracion -> DECREMENTO','operadorForIteracion',1,'p_operadorForIteracion','main.py',291),
  ('forCondicion -> IDENTIFICADOR operador_condicional valorForCondicion','forCondicion',3,'p_forCondicion','main.py',297),
  ('valorForCondicion -> FLOAT','valorForCondicion',1,'p_valorForCondicion','main.py',301),
  ('valorForCondicion -> DOUBLE','valorForCondicion',1,'p_valorForCondicion','main.py',302),
  ('valorForCondicion -> INT','valorForCondicion',1,'p_valorForCondicion','main.py',303),
  ('valorForCondicion -> IDENTIFICADOR','valorForCondicion',1,'p_valorForCondicion','main.py',304),
  ('forInicializador -> tipoDatoForInicializador IDENTIFICADOR IGUAL valorForInicializador','forInicializador',4,'p_forInicializador','main.py',310),
  ('forInicializador -> IDENTIFICADOR IGUAL valorForInicializador','forInicializador',3,'p_forInicializador','main.py',311),
  ('tipoDatoForInicializador -> FLOAT_TYPE','tipoDatoForInicializador',1,'p_tipoDatoForInicializador','main.py',316),
  ('tipoDatoForInicializador -> DOUBLE_TYPE','tipoDatoForInicializador',1,'p_tipoDatoForInicializador','main.py',317),
  ('tipoDatoForInicializador -> INT_TYPE','tipoDatoForInicializador',1,'p_tipoDatoForInicializador','main.py',318),
  ('valorForInicializador -> FLOAT','valorForInicializador',1,'p_valorForInicializador','main.py',322),
  ('valorForInicializador -> DOUBLE','valorForInicializador',1,'p_valorForInicializador','main.py',323),
  ('valorForInicializador -> INT','valorForInicializador',1,'p_valorForInicializador','main.py',324),
  ('valorForInicializador -> IDENTIFICADOR','valorForInicializador',1,'p_valorForInicializador','main.py',325),
  ('estructura_datos -> lista','estructura_datos',1,'p_estructura_datos','main.py',337),
  ('estructura_datos -> pila','estructura_datos',1,'p_estructura_datos','main.py',338),
  ('lista -> LIST tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINE','lista',10,'p_lista','main.py',342),
  ('tipoLista -> MENOR_QUE valor_tipo_inicializador MAYOR_QUE','tipoLista',3,'p_tipoLista','main.py',345),
  ('pila -> STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL NEW STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINE','pila',14,'p_pila','main.py',350),
  ('funciones_estructura_datos -> stack_push','funciones_estructura_datos',1,'p_funciones_estructura_datos','main.py',353),
  ('funciones_estructura_datos -> stack_pop','funciones_estructura_datos',1,'p_funciones_estructura_datos','main.py',354),
  ('stack_push -> IDENTIFICADOR PUNTO PUSH PAR_IZQ valor PAR_DER','stack_push',6,'p_stack_push','main.py',358),
  ('stack_pop -> IDENTIFICADOR PUNTO POP PAR_IZQ PAR_DER','stack_pop',5,'p_stack_pop','main.py',361),
  ('expresion -> expresion_operacion_aritmetica','expresion',1,'p_expresion','main.py',371),
  ('expresion -> expresion_condicional','expresion',1,'p_expresion','main.py',372),
  ('expresion_operacion_aritmetica -> numero operador_aritmentico numero','expresion_operacion_aritmetica',3,'p_expresion_operacion_aritmetica','main.py',376),
  ('expresion_operacion_aritmetica -> numero operador_aritmentico IDENTIFICADOR','expresion_operacion_aritmetica',3,'p_expresion_operacion_aritmetica','main.py',377),
  ('expresion_operacion_aritmetica -> IDENTIFICADOR operador_aritmentico numero','expresion_operacion_aritmetica',3,'p_expresion_operacion_aritmetica','main.py',378),
  ('expresion_operacion_aritmetica -> IDENTIFICADOR operador_aritmentico IDENTIFICADOR','expresion_operacion_aritmetica',3,'p_expresion_operacion_aritmetica','main.py',379),
  ('expresion_condicional -> numero operador_condicional numero','expresion_condicional',3,'p_expresion_condicional','main.py',383),
  ('expresion_condicional -> IDENTIFICADOR operador_condicional IDENTIFICADOR','expresion_condicional',3,'p_expresion_condicional','main.py',384),
  ('expresion_condicional -> IDENTIFICADOR operador_condicional numero','expresion_condicional',3,'p_expresion_condicional','main.py',385),
  ('expresion_condicional -> numero operador_condicional IDENTIFICADOR','expresion_condicional',3,'p_expresion_condicional','main.py',386),
  ('salida_entrada -> salida_uno','salida_entrada',1,'p_salida_entrada','main.py',397),
  ('salida_entrada -> salida_dos','salida_entrada',1,'p_salida_entrada','main.py',398),
  ('salida_entrada -> salida_tres','salida_entrada',1,'p_salida_entrada','main.py',399),
  ('salida_uno -> CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER','salida_uno',4,'p_salida_uno','main.py',403),
  ('salida_uno -> CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER','salida_uno',4,'p_salida_uno','main.py',404),
  ('salida_uno -> CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER','salida_uno',4,'p_salida_uno','main.py',405),
  ('salida_dos -> CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER','salida_dos',5,'p_salida_dos','main.py',408),
  ('salida_tres -> CONSOLE_READLINE PAR_IZQ PAR_DER','salida_tres',3,'p_salida_tres','main.py',411),
  ('funcion -> funcion_tipo_uno','funcion',1,'p_funcion','main.py',421),
  ('funcion -> funcion_tipo_tres','funcion',1,'p_funcion','main.py',422),
  ('funcion_tipo_uno -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ body LLAVE_DER','funcion_tipo_uno',8,'p_funcion_tipo_uno','main.py',426),
  ('funcion_tipo_tres -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ parametrosF PAR_DER LLAVE_IZQ bodyF LLAVE_DER','funcion_tipo_tres',9,'p_funcion_tipo_tres','main.py',432),
  ('parametrosF -> declaracion','parametrosF',1,'p_parametrosF','main.py',435),
  ('parametrosF -> declaracion COMA parametrosF','parametrosF',3,'p_parametrosF','main.py',436),
  ('bodyF -> asignacion END_OF_LINE','bodyF',2,'p_bodyF','main.py',440),
  ('bodyF -> declaracion END_OF_LINE','bodyF',2,'p_bodyF','main.py',441),
  ('bodyF -> salida_entrada END_OF_LINE','bodyF',2,'p_bodyF','main.py',442),
  ('bodyF -> asignacion END_OF_LINE bodyF','bodyF',3,'p_bodyF','main.py',443),
  ('bodyF -> declaracion END_OF_LINE bodyF','bodyF',3,'p_bodyF','main.py',444),
  ('bodyF -> salida_entrada END_OF_LINE bodyF','bodyF',3,'p_bodyF','main.py',445),
]
