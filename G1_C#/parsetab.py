
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD AND AND_EQUAL AUMENTADO BOOL BOOL_TYPE BREAK BYTE CASE CHAR CHAR_TYPE CLASS COMA COMILLA_DOBLE COMILLA_SIMPLE CONSOLE_READLINE CONSOLE_WRITELINE CONST CONTINUE COR_DER COR_IZQ C_CADENA_INTERPOLADA C_IDENT_TEXTUAL DECREMENTADO DECREMENTO DEFAULT DIVIDIDO_POR DIVISION DO DOS_PUNTOS DOUBLE DOUBLE_TYPE ELSE END_OF_LINE EXC_OREQUAL FINALLY FLOAT FLOAT_TYPE FOR GLOBAL IDENTIFICADOR IGUAL IGUAL_IGUAL IN INCREMENTO INT INT_TYPE IR LAMBDA LEFTSHIFT_EQUAL LET LLAVE_DER LLAVE_IZQ MAYOR_O_IGUAL_QUE MAYOR_QUE MENOR_O_IGUAL_QUE MENOR_QUE MODULO MODULO_DE MULTIPLICACION MULTIPLICADO_POR NEGACION NEW NOR NO_IGUAL NULL NULL_EQUAL NULL_VAL OBJECT ON OP_TERNARIO OR ORDERBY OR_EQUAL PAR_DER PAR_IZQ PRIVATE PROTECTED PUBLIC PUNTO PUSH RESTA RETURN RIGHTSHIFT_EQUAL SHIFT_MAYOR SHIFT_MENOR SIMPLE_AND SIMPLE_OR STACK STRING STRING_TYPE STRUCT SUMA SWITCH THIS TO_UPPER TYPEOF VAR VOID WHEN WHERE WHILEbody : asignacion END_OF_LINE\n  | comparacion\n  | estructura_control\n  | estructura_datos\n  | expresion\n  | salida_entrada\n  | funcion\n  | declaracion END_OF_LINE\n  | empty\n  valor : CHAR\n  | numero\n  | BOOL\n  | STRING\n  | IDENTIFICADOR\n  numero : FLOAT\n  | DOUBLE\n  | INT\n  valor_tipo : CHAR_TYPE\n  | FLOAT_TYPE\n  | DOUBLE_TYPE\n  | INT_TYPE\n  | BOOL_TYPE\n  | STRING_TYPE\n  | VOID\n  modificador_acceso : PRIVATE\n  | PROTECTED\n  | PUBLIC\n  operador_realacional : IGUAL_IGUAL\n  | NO_IGUAL \n  | MENOR_QUE\n  | MENOR_O_IGUAL_QUE\n  | MAYOR_QUE\n  | MAYOR_O_IGUAL_QUE\n  operador_aritmentico : SUMA\n  | RESTA\n  | MULTIPLICACION\n  | DIVISION\n  | MODULO\n  operador_condicional : IGUAL_IGUAL\n  | NO_IGUAL\n  | MENOR_QUE\n  | MENOR_O_IGUAL_QUE\n  | MAYOR_QUE\n  | MAYOR_O_IGUAL_QUE\n  empty : END_OF_LINEasignacion : asignacionSimple\n   asignacionSimple : IDENTIFICADOR IGUAL valor\n                      | IDENTIFICADOR IGUAL expresion\n  declaracion : valor_tipo IDENTIFICADOR declaracion : valor_tipo asignacion\n  \n  comparacion : valor operador_realacional valorestructura_control : while\n  | switch_case\n  | for\n  while : IGUALswitch_case : IGUALfor : IGUALestructura_datos : IGUALexpresion : expresion_operacion_aritmetica\n  | expresion_condicional\n  expresion_operacion_aritmetica : numero operador_aritmentico numero\n  | IDENTIFICADOR operador_aritmentico IDENTIFICADOR\n  expresion_condicional : numero operador_condicional numero\n  | IDENTIFICADOR operador_condicional IDENTIFICADOR\n  salida_entrada : IGUALfuncion : IGUAL'
    
_lr_action_items = {'IGUAL':([0,21,45,],[17,47,47,]),'END_OF_LINE':([0,2,10,12,18,19,22,23,24,25,33,34,35,45,46,66,67,68,69,70,71,72,],[3,36,37,-46,-59,-60,-10,-11,-12,-13,-15,-16,-17,-49,-50,-14,-47,-48,-62,-64,-61,-63,]),'IDENTIFICADOR':([0,20,26,27,28,29,30,31,32,38,39,40,41,42,43,44,47,48,49,50,51,52,53,54,55,56,57,58,59,60,],[21,45,-18,-19,-20,-21,-22,-23,-24,65,-28,-29,-30,-31,-32,-33,66,69,70,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,]),'CHAR':([0,38,39,40,41,42,43,44,47,],[22,22,-28,-29,-30,-31,-32,-33,22,]),'BOOL':([0,38,39,40,41,42,43,44,47,],[24,24,-28,-29,-30,-31,-32,-33,24,]),'STRING':([0,38,39,40,41,42,43,44,47,],[25,25,-28,-29,-30,-31,-32,-33,25,]),'CHAR_TYPE':([0,],[26,]),'FLOAT_TYPE':([0,],[27,]),'DOUBLE_TYPE':([0,],[28,]),'INT_TYPE':([0,],[29,]),'BOOL_TYPE':([0,],[30,]),'STRING_TYPE':([0,],[31,]),'VOID':([0,],[32,]),'FLOAT':([0,38,39,40,41,42,43,44,47,50,51,52,53,54,55,56,57,58,59,60,61,62,],[33,33,-28,-29,-30,-31,-32,-33,33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,33,33,]),'DOUBLE':([0,38,39,40,41,42,43,44,47,50,51,52,53,54,55,56,57,58,59,60,61,62,],[34,34,-28,-29,-30,-31,-32,-33,34,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,34,34,]),'INT':([0,38,39,40,41,42,43,44,47,50,51,52,53,54,55,56,57,58,59,60,61,62,],[35,35,-28,-29,-30,-31,-32,-33,35,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,35,35,]),'$end':([1,3,4,5,6,7,8,9,11,14,15,16,17,18,19,22,24,25,33,34,35,36,37,63,64,65,69,70,71,72,],[0,-45,-2,-3,-4,-5,-6,-7,-9,-52,-53,-54,-55,-59,-60,-10,-12,-13,-15,-16,-17,-1,-8,-51,-11,-14,-62,-64,-61,-63,]),'IGUAL_IGUAL':([13,21,22,23,24,25,33,34,35,66,],[39,55,-10,55,-12,-13,-15,-16,-17,55,]),'NO_IGUAL':([13,21,22,23,24,25,33,34,35,66,],[40,56,-10,56,-12,-13,-15,-16,-17,56,]),'MENOR_QUE':([13,21,22,23,24,25,33,34,35,66,],[41,57,-10,57,-12,-13,-15,-16,-17,57,]),'MENOR_O_IGUAL_QUE':([13,21,22,23,24,25,33,34,35,66,],[42,58,-10,58,-12,-13,-15,-16,-17,58,]),'MAYOR_QUE':([13,21,22,23,24,25,33,34,35,66,],[43,59,-10,59,-12,-13,-15,-16,-17,59,]),'MAYOR_O_IGUAL_QUE':([13,21,22,23,24,25,33,34,35,66,],[44,60,-10,60,-12,-13,-15,-16,-17,60,]),'SUMA':([21,23,33,34,35,66,],[50,50,-15,-16,-17,50,]),'RESTA':([21,23,33,34,35,66,],[51,51,-15,-16,-17,51,]),'MULTIPLICACION':([21,23,33,34,35,66,],[52,52,-15,-16,-17,52,]),'DIVISION':([21,23,33,34,35,66,],[53,53,-15,-16,-17,53,]),'MODULO':([21,23,33,34,35,66,],[54,54,-15,-16,-17,54,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'body':([0,],[1,]),'asignacion':([0,20,],[2,46,]),'comparacion':([0,],[4,]),'estructura_control':([0,],[5,]),'estructura_datos':([0,],[6,]),'expresion':([0,47,],[7,68,]),'salida_entrada':([0,],[8,]),'funcion':([0,],[9,]),'declaracion':([0,],[10,]),'empty':([0,],[11,]),'asignacionSimple':([0,20,],[12,12,]),'valor':([0,38,47,],[13,63,67,]),'while':([0,],[14,]),'switch_case':([0,],[15,]),'for':([0,],[16,]),'expresion_operacion_aritmetica':([0,47,],[18,18,]),'expresion_condicional':([0,47,],[19,19,]),'valor_tipo':([0,],[20,]),'numero':([0,38,47,61,62,],[23,64,23,71,72,]),'operador_realacional':([13,],[38,]),'operador_aritmentico':([21,23,66,],[48,61,48,]),'operador_condicional':([21,23,66,],[49,62,49,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> body","S'",1,None,None,None),
  ('body -> asignacion END_OF_LINE','body',2,'p_body','main.py',6),
  ('body -> comparacion','body',1,'p_body','main.py',7),
  ('body -> estructura_control','body',1,'p_body','main.py',8),
  ('body -> estructura_datos','body',1,'p_body','main.py',9),
  ('body -> expresion','body',1,'p_body','main.py',10),
  ('body -> salida_entrada','body',1,'p_body','main.py',11),
  ('body -> funcion','body',1,'p_body','main.py',12),
  ('body -> declaracion END_OF_LINE','body',2,'p_body','main.py',13),
  ('body -> empty','body',1,'p_body','main.py',14),
  ('valor -> CHAR','valor',1,'p_valor','main.py',23),
  ('valor -> numero','valor',1,'p_valor','main.py',24),
  ('valor -> BOOL','valor',1,'p_valor','main.py',25),
  ('valor -> STRING','valor',1,'p_valor','main.py',26),
  ('valor -> IDENTIFICADOR','valor',1,'p_valor','main.py',27),
  ('numero -> FLOAT','numero',1,'p_numero','main.py',31),
  ('numero -> DOUBLE','numero',1,'p_numero','main.py',32),
  ('numero -> INT','numero',1,'p_numero','main.py',33),
  ('valor_tipo -> CHAR_TYPE','valor_tipo',1,'p_valor_tipo','main.py',37),
  ('valor_tipo -> FLOAT_TYPE','valor_tipo',1,'p_valor_tipo','main.py',38),
  ('valor_tipo -> DOUBLE_TYPE','valor_tipo',1,'p_valor_tipo','main.py',39),
  ('valor_tipo -> INT_TYPE','valor_tipo',1,'p_valor_tipo','main.py',40),
  ('valor_tipo -> BOOL_TYPE','valor_tipo',1,'p_valor_tipo','main.py',41),
  ('valor_tipo -> STRING_TYPE','valor_tipo',1,'p_valor_tipo','main.py',42),
  ('valor_tipo -> VOID','valor_tipo',1,'p_valor_tipo','main.py',43),
  ('modificador_acceso -> PRIVATE','modificador_acceso',1,'p_modificador_acceso','main.py',47),
  ('modificador_acceso -> PROTECTED','modificador_acceso',1,'p_modificador_acceso','main.py',48),
  ('modificador_acceso -> PUBLIC','modificador_acceso',1,'p_modificador_acceso','main.py',49),
  ('operador_realacional -> IGUAL_IGUAL','operador_realacional',1,'p_operador_realacional','main.py',53),
  ('operador_realacional -> NO_IGUAL','operador_realacional',1,'p_operador_realacional','main.py',54),
  ('operador_realacional -> MENOR_QUE','operador_realacional',1,'p_operador_realacional','main.py',55),
  ('operador_realacional -> MENOR_O_IGUAL_QUE','operador_realacional',1,'p_operador_realacional','main.py',56),
  ('operador_realacional -> MAYOR_QUE','operador_realacional',1,'p_operador_realacional','main.py',57),
  ('operador_realacional -> MAYOR_O_IGUAL_QUE','operador_realacional',1,'p_operador_realacional','main.py',58),
  ('operador_aritmentico -> SUMA','operador_aritmentico',1,'p_operador_aritmentico','main.py',62),
  ('operador_aritmentico -> RESTA','operador_aritmentico',1,'p_operador_aritmentico','main.py',63),
  ('operador_aritmentico -> MULTIPLICACION','operador_aritmentico',1,'p_operador_aritmentico','main.py',64),
  ('operador_aritmentico -> DIVISION','operador_aritmentico',1,'p_operador_aritmentico','main.py',65),
  ('operador_aritmentico -> MODULO','operador_aritmentico',1,'p_operador_aritmentico','main.py',66),
  ('operador_condicional -> IGUAL_IGUAL','operador_condicional',1,'p_operador_condicional','main.py',70),
  ('operador_condicional -> NO_IGUAL','operador_condicional',1,'p_operador_condicional','main.py',71),
  ('operador_condicional -> MENOR_QUE','operador_condicional',1,'p_operador_condicional','main.py',72),
  ('operador_condicional -> MENOR_O_IGUAL_QUE','operador_condicional',1,'p_operador_condicional','main.py',73),
  ('operador_condicional -> MAYOR_QUE','operador_condicional',1,'p_operador_condicional','main.py',74),
  ('operador_condicional -> MAYOR_O_IGUAL_QUE','operador_condicional',1,'p_operador_condicional','main.py',75),
  ('empty -> END_OF_LINE','empty',1,'p_empty','main.py',86),
  ('asignacion -> asignacionSimple','asignacion',1,'p_asignacion','main.py',89),
  ('asignacionSimple -> IDENTIFICADOR IGUAL valor','asignacionSimple',3,'p_asignacionSimple','main.py',92),
  ('asignacionSimple -> IDENTIFICADOR IGUAL expresion','asignacionSimple',3,'p_asignacionSimple','main.py',93),
  ('declaracion -> valor_tipo IDENTIFICADOR','declaracion',2,'p_declaracion','main.py',97),
  ('declaracion -> valor_tipo asignacion','declaracion',2,'p_declaracionAsignacion','main.py',100),
  ('comparacion -> valor operador_realacional valor','comparacion',3,'p_comparacion','main.py',126),
  ('estructura_control -> while','estructura_control',1,'p_estructura_control','main.py',135),
  ('estructura_control -> switch_case','estructura_control',1,'p_estructura_control','main.py',136),
  ('estructura_control -> for','estructura_control',1,'p_estructura_control','main.py',137),
  ('while -> IGUAL','while',1,'p_while','main.py',142),
  ('switch_case -> IGUAL','switch_case',1,'p_switch_case','main.py',150),
  ('for -> IGUAL','for',1,'p_for','main.py',158),
  ('estructura_datos -> IGUAL','estructura_datos',1,'p_estructura_datos','main.py',167),
  ('expresion -> expresion_operacion_aritmetica','expresion',1,'p_expresion','main.py',176),
  ('expresion -> expresion_condicional','expresion',1,'p_expresion','main.py',177),
  ('expresion_operacion_aritmetica -> numero operador_aritmentico numero','expresion_operacion_aritmetica',3,'p_expresion_operacion_aritmetica','main.py',181),
  ('expresion_operacion_aritmetica -> IDENTIFICADOR operador_aritmentico IDENTIFICADOR','expresion_operacion_aritmetica',3,'p_expresion_operacion_aritmetica','main.py',182),
  ('expresion_condicional -> numero operador_condicional numero','expresion_condicional',3,'p_expresion_condicional','main.py',186),
  ('expresion_condicional -> IDENTIFICADOR operador_condicional IDENTIFICADOR','expresion_condicional',3,'p_expresion_condicional','main.py',187),
  ('salida_entrada -> IGUAL','salida_entrada',1,'p_salida_entrada','main.py',198),
  ('funcion -> IGUAL','funcion',1,'p_funcion','main.py',207),
]
