
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD AND AND_EQUAL AUMENTADO BOOL BOOL_TYPE BREAK BYTE CASE CHAR CHAR_TYPE CLASS COMA COMILLA_DOBLE COMILLA_SIMPLE CONSOLE_READLINE CONSOLE_WRITELINE CONST CONTINUE COR_DER COR_IZQ C_CADENA_INTERPOLADA C_IDENT_TEXTUAL DECREMENTADO DECREMENTO DEFAULT DIVIDIDO_POR DIVISION DO DOS_PUNTOS DOUBLE DOUBLE_TYPE ELSE END_OF_LINE EXC_OREQUAL FINALLY FLOAT FLOAT_TYPE FOR GLOBAL IDENTIFICADOR IGUAL IGUAL_IGUAL IN INCREMENTO INT INT_TYPE IR LAMBDA LEFTSHIFT_EQUAL LET LIST LLAVE_DER LLAVE_IZQ MAYOR_O_IGUAL_QUE MAYOR_QUE MENOR_O_IGUAL_QUE MENOR_QUE MODULO MODULO_DE MULTIPLICACION MULTIPLICADO_POR NEGACION NEW NOR NO_IGUAL NULL NULL_EQUAL NULL_VAL OBJECT ON OP_TERNARIO OR ORDERBY OR_EQUAL PAR_DER PAR_IZQ PRIVATE PROTECTED PUBLIC PUNTO PUSH RESTA RETURN RIGHTSHIFT_EQUAL SHIFT_MAYOR SHIFT_MENOR SIMPLE_AND SIMPLE_OR STACK STRING STRING_TYPE STRUCT SUMA SWITCH THIS TO_UPPER TYPEOF VAR VOID WHEN WHERE WHILEbody : asignacion END_OF_LINE\n  | comparacion\n  | estructura_control\n  | estructura_datos\n  | expresion END_OF_LINE\n  | salida_entrada\n  | funcion\n  | declaracion END_OF_LINE\n  | empty\n  valor : CHAR\n  | numero\n  | BOOL\n  | STRING\n  | IDENTIFICADOR\n  numero : FLOAT\n  | DOUBLE\n  | INT\n  valor_tipo : CHAR_TYPE\n  | FLOAT_TYPE\n  | DOUBLE_TYPE\n  | INT_TYPE\n  | BOOL_TYPE\n  | STRING_TYPE\n  | VOID\n  valor_tipo_inicializador : FLOAT_TYPE\n    | DOUBLE_TYPE\n    | STRING_TYPE\n    | INT_TYPE\n    | BOOL_TYPE\n    | CHAR_TYPE\n    | IDENTIFICADORmodificador_acceso : PRIVATE\n  | PROTECTED\n  | PUBLIC\n  operador_realacional : IGUAL_IGUAL\n  | NO_IGUAL \n  | MENOR_QUE\n  | MENOR_O_IGUAL_QUE\n  | MAYOR_QUE\n  | MAYOR_O_IGUAL_QUE\n  operador_aritmentico : SUMA\n  | RESTA\n  | MULTIPLICACION\n  | DIVISION\n  | MODULO\n  operador_condicional : IGUAL_IGUAL\n  | NO_IGUAL\n  | MENOR_QUE\n  | MENOR_O_IGUAL_QUE\n  | MAYOR_QUE\n  | MAYOR_O_IGUAL_QUE\n  operacion_string : STRING SUMA STRING\n    | STRING SUMA IDENTIFICADOR\n    | IDENTIFICADOR SUMA STRING\n    | IDENTIFICADOR SUMA IDENTIFICADORempty : END_OF_LINEasignacion : asignacionSimple\n   asignacionSimple : IDENTIFICADOR IGUAL valor\n                      | IDENTIFICADOR IGUAL expresion\n  declaracion : valor_tipo IDENTIFICADOR declaracion : valor_tipo asignacion\n\n  comparacion : valor operador_realacional valorestructura_control : while\n  | switch_case\n  | for\n  while : IGUALswitch_case : IGUALfor : FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DERforIterador : IDENTIFICADOR operadorForIteracionoperadorForIteracion : INCREMENTO \n                            | DECREMENTOforCondicion : IDENTIFICADOR operador_condicional valorForCondicionvalorForCondicion : FLOAT\n            | DOUBLE\n            | INT\n            | IDENTIFICADORforInicializador : tipoDatoForInicializador IDENTIFICADOR IGUAL valorForInicializador\n                    | IDENTIFICADOR IGUAL valorForInicializadortipoDatoForInicializador : FLOAT_TYPE\n                        | DOUBLE_TYPE\n                        | INT_TYPEvalorForInicializador : FLOAT\n            | DOUBLE\n            | INT\n            | IDENTIFICADORestructura_datos : listalista : LIST tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINEtipoLista : MENOR_QUE valor_tipo_inicializador MAYOR_QUEexpresion : expresion_operacion_aritmetica\n  | expresion_condicional\n  | salida_entrada\n  expresion_operacion_aritmetica : numero operador_aritmentico numero\n  | IDENTIFICADOR operador_aritmentico IDENTIFICADOR\n  expresion_condicional : numero operador_condicional numero\n  | IDENTIFICADOR operador_condicional IDENTIFICADOR\n  salida_entrada : salida_uno\n                    | salida_dos\n                    | salida_tressalida_uno : CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER\n                    | CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER\n                    | CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DERsalida_dos : CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DERsalida_tres : CONSOLE_READLINE PAR_IZQ PAR_DERfuncion : funcion_tipo_unofuncion_tipo_uno : modificador_acceso VOID IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ body LLAVE_DER'
    
_lr_action_items = {'END_OF_LINE':([0,2,7,8,10,12,18,19,20,21,22,27,28,29,30,43,44,45,59,60,86,87,88,89,90,91,92,93,94,113,120,122,123,127,130,131,132,133,134,140,144,146,149,150,151,152,153,162,163,],[3,49,50,-91,51,-57,-89,-90,-96,-97,-98,-10,-11,-12,-13,-15,-16,-17,-60,-61,-14,-58,-59,-91,-93,-95,-92,-94,115,-103,-99,-100,-101,142,-85,-78,-82,-83,-84,-102,-77,3,-76,-72,-73,-74,-75,3,165,]),'IDENTIFICADOR':([0,24,36,37,38,39,40,41,42,52,53,54,55,56,57,58,61,62,63,64,65,66,67,68,69,70,71,72,73,74,77,78,79,80,82,95,97,98,99,115,117,119,121,124,129,142,143,146,162,],[25,59,-24,-18,-19,-20,-21,-22,-23,85,-35,-36,-37,-38,-39,-40,86,90,91,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,96,100,108,111,114,116,-79,-80,-81,128,130,-88,137,138,130,148,149,25,25,]),'CHAR':([0,52,53,54,55,56,57,58,61,146,162,],[27,27,-35,-36,-37,-38,-39,-40,27,27,27,]),'BOOL':([0,52,53,54,55,56,57,58,61,146,162,],[29,29,-35,-36,-37,-38,-39,-40,29,29,29,]),'STRING':([0,52,53,54,55,56,57,58,61,80,112,121,124,146,162,],[30,30,-35,-36,-37,-38,-39,-40,30,109,125,136,139,30,30,]),'IGUAL':([0,25,59,96,100,116,146,162,],[26,61,61,117,118,129,26,26,]),'FOR':([0,146,162,],[31,31,31,]),'LIST':([0,135,146,162,],[32,145,32,32,]),'CONSOLE_WRITELINE':([0,61,146,162,],[33,33,33,33,]),'CONSOLE_READLINE':([0,61,146,162,],[34,34,34,34,]),'CHAR_TYPE':([0,79,146,162,],[37,107,37,37,]),'FLOAT_TYPE':([0,77,79,146,162,],[38,97,102,38,38,]),'DOUBLE_TYPE':([0,77,79,146,162,],[39,98,103,39,39,]),'INT_TYPE':([0,77,79,146,162,],[40,99,105,40,40,]),'BOOL_TYPE':([0,79,146,162,],[41,106,41,41,]),'STRING_TYPE':([0,79,146,162,],[42,104,42,42,]),'VOID':([0,35,46,47,48,146,162,],[36,82,-32,-33,-34,36,36,]),'FLOAT':([0,52,53,54,55,56,57,58,61,64,65,66,67,68,69,70,71,72,73,74,75,76,117,129,143,146,162,],[43,43,-35,-36,-37,-38,-39,-40,43,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,43,43,132,132,151,43,43,]),'DOUBLE':([0,52,53,54,55,56,57,58,61,64,65,66,67,68,69,70,71,72,73,74,75,76,117,129,143,146,162,],[44,44,-35,-36,-37,-38,-39,-40,44,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,44,44,133,133,152,44,44,]),'INT':([0,52,53,54,55,56,57,58,61,64,65,66,67,68,69,70,71,72,73,74,75,76,117,129,143,146,162,],[45,45,-35,-36,-37,-38,-39,-40,45,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,45,45,134,134,153,45,45,]),'PRIVATE':([0,146,162,],[46,46,46,]),'PROTECTED':([0,146,162,],[47,47,47,]),'PUBLIC':([0,146,162,],[48,48,48,]),'$end':([1,3,4,5,6,8,9,11,14,15,16,17,20,21,22,23,26,27,29,30,43,44,45,49,50,51,83,84,85,113,120,122,123,140,161,165,166,],[0,-56,-2,-3,-4,-6,-7,-9,-63,-64,-65,-86,-96,-97,-98,-104,-66,-10,-12,-13,-15,-16,-17,-1,-5,-8,-62,-11,-14,-103,-99,-100,-101,-102,-105,-87,-68,]),'LLAVE_DER':([3,4,5,6,8,9,11,14,15,16,17,20,21,22,23,26,27,29,30,43,44,45,49,50,51,83,84,85,113,120,122,123,140,155,161,164,165,166,],[-56,-2,-3,-4,-6,-7,-9,-63,-64,-65,-86,-96,-97,-98,-104,-66,-10,-12,-13,-15,-16,-17,-1,-5,-8,-62,-11,-14,-103,-99,-100,-101,-102,161,-105,166,-87,-68,]),'IGUAL_IGUAL':([13,25,27,28,29,30,43,44,45,86,128,],[53,69,-10,69,-12,-13,-15,-16,-17,69,69,]),'NO_IGUAL':([13,25,27,28,29,30,43,44,45,86,128,],[54,70,-10,70,-12,-13,-15,-16,-17,70,70,]),'MENOR_QUE':([13,25,27,28,29,30,32,43,44,45,86,128,145,],[55,71,-10,71,-12,-13,79,-15,-16,-17,71,71,79,]),'MENOR_O_IGUAL_QUE':([13,25,27,28,29,30,43,44,45,86,128,],[56,72,-10,72,-12,-13,-15,-16,-17,72,72,]),'MAYOR_QUE':([13,25,27,28,29,30,43,44,45,86,101,102,103,104,105,106,107,108,128,],[57,73,-10,73,-12,-13,-15,-16,-17,73,119,-25,-26,-27,-28,-29,-30,-31,73,]),'MAYOR_O_IGUAL_QUE':([13,25,27,28,29,30,43,44,45,86,128,],[58,74,-10,74,-12,-13,-15,-16,-17,74,74,]),'SUMA':([25,28,43,44,45,86,109,111,],[64,64,-15,-16,-17,64,121,124,]),'RESTA':([25,28,43,44,45,86,],[65,65,-15,-16,-17,65,]),'MULTIPLICACION':([25,28,43,44,45,86,],[66,66,-15,-16,-17,66,]),'DIVISION':([25,28,43,44,45,86,],[67,67,-15,-16,-17,67,]),'MODULO':([25,28,43,44,45,86,],[68,68,-15,-16,-17,68,]),'PAR_IZQ':([31,33,34,114,119,154,],[77,80,81,126,-88,160,]),'C_CADENA_INTERPOLADA':([80,],[112,]),'PAR_DER':([81,109,110,111,125,126,136,137,138,139,147,157,158,159,160,],[113,120,122,123,140,141,-52,-53,-55,-54,156,-69,-70,-71,163,]),'NEW':([118,],[135,]),'LLAVE_IZQ':([141,156,],[146,162,]),'INCREMENTO':([148,],[158,]),'DECREMENTO':([148,],[159,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'body':([0,146,162,],[1,155,164,]),'asignacion':([0,24,146,162,],[2,60,2,2,]),'comparacion':([0,146,162,],[4,4,4,]),'estructura_control':([0,146,162,],[5,5,5,]),'estructura_datos':([0,146,162,],[6,6,6,]),'expresion':([0,61,146,162,],[7,88,7,7,]),'salida_entrada':([0,61,146,162,],[8,89,8,8,]),'funcion':([0,146,162,],[9,9,9,]),'declaracion':([0,146,162,],[10,10,10,]),'empty':([0,146,162,],[11,11,11,]),'asignacionSimple':([0,24,146,162,],[12,12,12,12,]),'valor':([0,52,61,146,162,],[13,83,87,13,13,]),'while':([0,146,162,],[14,14,14,]),'switch_case':([0,146,162,],[15,15,15,]),'for':([0,146,162,],[16,16,16,]),'lista':([0,146,162,],[17,17,17,]),'expresion_operacion_aritmetica':([0,61,146,162,],[18,18,18,18,]),'expresion_condicional':([0,61,146,162,],[19,19,19,19,]),'salida_uno':([0,61,146,162,],[20,20,20,20,]),'salida_dos':([0,61,146,162,],[21,21,21,21,]),'salida_tres':([0,61,146,162,],[22,22,22,22,]),'funcion_tipo_uno':([0,146,162,],[23,23,23,]),'valor_tipo':([0,146,162,],[24,24,24,]),'numero':([0,52,61,75,76,146,162,],[28,84,28,92,93,28,28,]),'modificador_acceso':([0,146,162,],[35,35,35,]),'operador_realacional':([13,],[52,]),'operador_aritmentico':([25,28,86,],[62,75,62,]),'operador_condicional':([25,28,86,128,],[63,76,63,143,]),'tipoLista':([32,145,],[78,154,]),'forInicializador':([77,],[94,]),'tipoDatoForInicializador':([77,],[95,]),'valor_tipo_inicializador':([79,],[101,]),'operacion_string':([80,],[110,]),'forCondicion':([115,],[127,]),'valorForInicializador':([117,129,],[131,144,]),'forIterador':([142,],[147,]),'valorForCondicion':([143,],[150,]),'operadorForIteracion':([148,],[157,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> body","S'",1,None,None,None),
  ('body -> asignacion END_OF_LINE','body',2,'p_body','main.py',6),
  ('body -> comparacion','body',1,'p_body','main.py',7),
  ('body -> estructura_control','body',1,'p_body','main.py',8),
  ('body -> estructura_datos','body',1,'p_body','main.py',9),
  ('body -> expresion END_OF_LINE','body',2,'p_body','main.py',10),
  ('body -> salida_entrada','body',1,'p_body','main.py',11),
  ('body -> funcion','body',1,'p_body','main.py',12),
  ('body -> declaracion END_OF_LINE','body',2,'p_body','main.py',13),
  ('body -> empty','body',1,'p_body','main.py',14),
  ('valor -> CHAR','valor',1,'p_valor','main.py',23),
  ('valor -> numero','valor',1,'p_valor','main.py',24),
  ('valor -> BOOL','valor',1,'p_valor','main.py',25),
  ('valor -> STRING','valor',1,'p_valor','main.py',26),
  ('valor -> IDENTIFICADOR','valor',1,'p_valor','main.py',27),
  ('numero -> FLOAT','numero',1,'p_numero','main.py',31),
  ('numero -> DOUBLE','numero',1,'p_numero','main.py',32),
  ('numero -> INT','numero',1,'p_numero','main.py',33),
  ('valor_tipo -> CHAR_TYPE','valor_tipo',1,'p_valor_tipo','main.py',37),
  ('valor_tipo -> FLOAT_TYPE','valor_tipo',1,'p_valor_tipo','main.py',38),
  ('valor_tipo -> DOUBLE_TYPE','valor_tipo',1,'p_valor_tipo','main.py',39),
  ('valor_tipo -> INT_TYPE','valor_tipo',1,'p_valor_tipo','main.py',40),
  ('valor_tipo -> BOOL_TYPE','valor_tipo',1,'p_valor_tipo','main.py',41),
  ('valor_tipo -> STRING_TYPE','valor_tipo',1,'p_valor_tipo','main.py',42),
  ('valor_tipo -> VOID','valor_tipo',1,'p_valor_tipo','main.py',43),
  ('valor_tipo_inicializador -> FLOAT_TYPE','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','main.py',47),
  ('valor_tipo_inicializador -> DOUBLE_TYPE','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','main.py',48),
  ('valor_tipo_inicializador -> STRING_TYPE','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','main.py',49),
  ('valor_tipo_inicializador -> INT_TYPE','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','main.py',50),
  ('valor_tipo_inicializador -> BOOL_TYPE','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','main.py',51),
  ('valor_tipo_inicializador -> CHAR_TYPE','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','main.py',52),
  ('valor_tipo_inicializador -> IDENTIFICADOR','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','main.py',53),
  ('modificador_acceso -> PRIVATE','modificador_acceso',1,'p_modificador_acceso','main.py',56),
  ('modificador_acceso -> PROTECTED','modificador_acceso',1,'p_modificador_acceso','main.py',57),
  ('modificador_acceso -> PUBLIC','modificador_acceso',1,'p_modificador_acceso','main.py',58),
  ('operador_realacional -> IGUAL_IGUAL','operador_realacional',1,'p_operador_realacional','main.py',62),
  ('operador_realacional -> NO_IGUAL','operador_realacional',1,'p_operador_realacional','main.py',63),
  ('operador_realacional -> MENOR_QUE','operador_realacional',1,'p_operador_realacional','main.py',64),
  ('operador_realacional -> MENOR_O_IGUAL_QUE','operador_realacional',1,'p_operador_realacional','main.py',65),
  ('operador_realacional -> MAYOR_QUE','operador_realacional',1,'p_operador_realacional','main.py',66),
  ('operador_realacional -> MAYOR_O_IGUAL_QUE','operador_realacional',1,'p_operador_realacional','main.py',67),
  ('operador_aritmentico -> SUMA','operador_aritmentico',1,'p_operador_aritmentico','main.py',71),
  ('operador_aritmentico -> RESTA','operador_aritmentico',1,'p_operador_aritmentico','main.py',72),
  ('operador_aritmentico -> MULTIPLICACION','operador_aritmentico',1,'p_operador_aritmentico','main.py',73),
  ('operador_aritmentico -> DIVISION','operador_aritmentico',1,'p_operador_aritmentico','main.py',74),
  ('operador_aritmentico -> MODULO','operador_aritmentico',1,'p_operador_aritmentico','main.py',75),
  ('operador_condicional -> IGUAL_IGUAL','operador_condicional',1,'p_operador_condicional','main.py',79),
  ('operador_condicional -> NO_IGUAL','operador_condicional',1,'p_operador_condicional','main.py',80),
  ('operador_condicional -> MENOR_QUE','operador_condicional',1,'p_operador_condicional','main.py',81),
  ('operador_condicional -> MENOR_O_IGUAL_QUE','operador_condicional',1,'p_operador_condicional','main.py',82),
  ('operador_condicional -> MAYOR_QUE','operador_condicional',1,'p_operador_condicional','main.py',83),
  ('operador_condicional -> MAYOR_O_IGUAL_QUE','operador_condicional',1,'p_operador_condicional','main.py',84),
  ('operacion_string -> STRING SUMA STRING','operacion_string',3,'p_operacion_string','main.py',88),
  ('operacion_string -> STRING SUMA IDENTIFICADOR','operacion_string',3,'p_operacion_string','main.py',89),
  ('operacion_string -> IDENTIFICADOR SUMA STRING','operacion_string',3,'p_operacion_string','main.py',90),
  ('operacion_string -> IDENTIFICADOR SUMA IDENTIFICADOR','operacion_string',3,'p_operacion_string','main.py',91),
  ('empty -> END_OF_LINE','empty',1,'p_empty','main.py',101),
  ('asignacion -> asignacionSimple','asignacion',1,'p_asignacion','main.py',104),
  ('asignacionSimple -> IDENTIFICADOR IGUAL valor','asignacionSimple',3,'p_asignacionSimple','main.py',107),
  ('asignacionSimple -> IDENTIFICADOR IGUAL expresion','asignacionSimple',3,'p_asignacionSimple','main.py',108),
  ('declaracion -> valor_tipo IDENTIFICADOR','declaracion',2,'p_declaracion','main.py',112),
  ('declaracion -> valor_tipo asignacion','declaracion',2,'p_declaracionAsignacion','main.py',115),
  ('comparacion -> valor operador_realacional valor','comparacion',3,'p_comparacion','main.py',141),
  ('estructura_control -> while','estructura_control',1,'p_estructura_control','main.py',150),
  ('estructura_control -> switch_case','estructura_control',1,'p_estructura_control','main.py',151),
  ('estructura_control -> for','estructura_control',1,'p_estructura_control','main.py',152),
  ('while -> IGUAL','while',1,'p_while','main.py',157),
  ('switch_case -> IGUAL','switch_case',1,'p_switch_case','main.py',165),
  ('for -> FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DER','for',11,'p_for','main.py',174),
  ('forIterador -> IDENTIFICADOR operadorForIteracion','forIterador',2,'p_forIterador','main.py',180),
  ('operadorForIteracion -> INCREMENTO','operadorForIteracion',1,'p_operadorForIteracion','main.py',184),
  ('operadorForIteracion -> DECREMENTO','operadorForIteracion',1,'p_operadorForIteracion','main.py',185),
  ('forCondicion -> IDENTIFICADOR operador_condicional valorForCondicion','forCondicion',3,'p_forCondicion','main.py',191),
  ('valorForCondicion -> FLOAT','valorForCondicion',1,'p_valorForCondicion','main.py',195),
  ('valorForCondicion -> DOUBLE','valorForCondicion',1,'p_valorForCondicion','main.py',196),
  ('valorForCondicion -> INT','valorForCondicion',1,'p_valorForCondicion','main.py',197),
  ('valorForCondicion -> IDENTIFICADOR','valorForCondicion',1,'p_valorForCondicion','main.py',198),
  ('forInicializador -> tipoDatoForInicializador IDENTIFICADOR IGUAL valorForInicializador','forInicializador',4,'p_forInicializador','main.py',204),
  ('forInicializador -> IDENTIFICADOR IGUAL valorForInicializador','forInicializador',3,'p_forInicializador','main.py',205),
  ('tipoDatoForInicializador -> FLOAT_TYPE','tipoDatoForInicializador',1,'p_tipoDatoForInicializador','main.py',210),
  ('tipoDatoForInicializador -> DOUBLE_TYPE','tipoDatoForInicializador',1,'p_tipoDatoForInicializador','main.py',211),
  ('tipoDatoForInicializador -> INT_TYPE','tipoDatoForInicializador',1,'p_tipoDatoForInicializador','main.py',212),
  ('valorForInicializador -> FLOAT','valorForInicializador',1,'p_valorForInicializador','main.py',216),
  ('valorForInicializador -> DOUBLE','valorForInicializador',1,'p_valorForInicializador','main.py',217),
  ('valorForInicializador -> INT','valorForInicializador',1,'p_valorForInicializador','main.py',218),
  ('valorForInicializador -> IDENTIFICADOR','valorForInicializador',1,'p_valorForInicializador','main.py',219),
  ('estructura_datos -> lista','estructura_datos',1,'p_estructura_datos','main.py',231),
  ('lista -> LIST tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINE','lista',10,'p_lista','main.py',234),
  ('tipoLista -> MENOR_QUE valor_tipo_inicializador MAYOR_QUE','tipoLista',3,'p_tipoLista','main.py',237),
  ('expresion -> expresion_operacion_aritmetica','expresion',1,'p_expresion','main.py',248),
  ('expresion -> expresion_condicional','expresion',1,'p_expresion','main.py',249),
  ('expresion -> salida_entrada','expresion',1,'p_expresion','main.py',250),
  ('expresion_operacion_aritmetica -> numero operador_aritmentico numero','expresion_operacion_aritmetica',3,'p_expresion_operacion_aritmetica','main.py',254),
  ('expresion_operacion_aritmetica -> IDENTIFICADOR operador_aritmentico IDENTIFICADOR','expresion_operacion_aritmetica',3,'p_expresion_operacion_aritmetica','main.py',255),
  ('expresion_condicional -> numero operador_condicional numero','expresion_condicional',3,'p_expresion_condicional','main.py',259),
  ('expresion_condicional -> IDENTIFICADOR operador_condicional IDENTIFICADOR','expresion_condicional',3,'p_expresion_condicional','main.py',260),
  ('salida_entrada -> salida_uno','salida_entrada',1,'p_salida_entrada','main.py',271),
  ('salida_entrada -> salida_dos','salida_entrada',1,'p_salida_entrada','main.py',272),
  ('salida_entrada -> salida_tres','salida_entrada',1,'p_salida_entrada','main.py',273),
  ('salida_uno -> CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER','salida_uno',4,'p_salida_uno','main.py',277),
  ('salida_uno -> CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER','salida_uno',4,'p_salida_uno','main.py',278),
  ('salida_uno -> CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER','salida_uno',4,'p_salida_uno','main.py',279),
  ('salida_dos -> CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER','salida_dos',5,'p_salida_dos','main.py',282),
  ('salida_tres -> CONSOLE_READLINE PAR_IZQ PAR_DER','salida_tres',3,'p_salida_tres','main.py',285),
  ('funcion -> funcion_tipo_uno','funcion',1,'p_funcion','main.py',295),
  ('funcion_tipo_uno -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ body LLAVE_DER','funcion_tipo_uno',8,'p_funcion_tipo_uno','main.py',298),
]
