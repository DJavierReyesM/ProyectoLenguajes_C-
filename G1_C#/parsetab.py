
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD AND AND_EQUAL AUMENTADO BOOL BOOL_TYPE BREAK BYTE CASE CHAR CHAR_TYPE CLASS COMA COMILLA_DOBLE COMILLA_SIMPLE CONSOLE_READLINE CONSOLE_WRITELINE CONST CONTINUE COR_DER COR_IZQ C_CADENA_INTERPOLADA C_IDENT_TEXTUAL DECREMENTADO DECREMENTO DEFAULT DIVIDIDO_POR DIVISION DO DOS_PUNTOS DOUBLE DOUBLE_TYPE ELSE END_OF_LINE EXC_OREQUAL FINALLY FLOAT FLOAT_TYPE FOR GLOBAL IDENTIFICADOR IGUAL IGUAL_IGUAL IN INCREMENTO INT INT_TYPE IR LAMBDA LEFTSHIFT_EQUAL LET LIST LLAVE_DER LLAVE_IZQ MAYOR_O_IGUAL_QUE MAYOR_QUE MENOR_O_IGUAL_QUE MENOR_QUE MODULO MODULO_DE MULTIPLICACION MULTIPLICADO_POR NEGACION NEW NOR NO_IGUAL NULL NULL_EQUAL NULL_VAL OBJECT ON OP_TERNARIO OR ORDERBY OR_EQUAL PAR_DER PAR_IZQ POP PRIVATE PROTECTED PUBLIC PUNTO PUSH QUEUE RESTA RETURN RIGHTSHIFT_EQUAL SHIFT_MAYOR SHIFT_MENOR SIMPLE_AND SIMPLE_OR STACK STRING STRING_TYPE STRUCT SUMA SWITCH THIS TO_UPPER TYPEOF VAR VOID WHEN WHERE WHILEbody : asignacion END_OF_LINE\n  | comparacion\n  | estructura_control\n  | estructura_datos\n  | expresion END_OF_LINE\n  | salida_entrada END_OF_LINE\n  | funcion\n  | declaracion END_OF_LINE\n  | empty\n  | funciones_estructura_datos END_OF_LINE\n  valor : CHAR\n  | numero\n  | BOOL\n  | STRING\n  | IDENTIFICADOR\n  numero : FLOAT\n  | DOUBLE\n  | INT\n  ftipo : valor_tipo\n                   | VOID\n    valor_tipo : CHAR_TYPE\n  | FLOAT_TYPE\n  | DOUBLE_TYPE\n  | INT_TYPE\n  | BOOL_TYPE\n  | STRING_TYPE\n  valor_tipo_inicializador : FLOAT_TYPE\n    | DOUBLE_TYPE\n    | STRING_TYPE\n    | INT_TYPE\n    | BOOL_TYPE\n    | CHAR_TYPE\n    | IDENTIFICADORmodificador_acceso : PRIVATE\n  | PROTECTED\n  | PUBLIC\n  operador_realacional : IGUAL_IGUAL\n  | NO_IGUAL \n  | MENOR_QUE\n  | MENOR_O_IGUAL_QUE\n  | MAYOR_QUE\n  | MAYOR_O_IGUAL_QUE\n  operador_aritmentico : SUMA\n  | RESTA\n  | MULTIPLICACION\n  | DIVISION\n  | MODULO\n  operador_condicional : IGUAL_IGUAL\n  | NO_IGUAL\n  | MENOR_QUE\n  | MENOR_O_IGUAL_QUE\n  | MAYOR_QUE\n  | MAYOR_O_IGUAL_QUE\n  operacion_string : STRING SUMA STRING\n    | STRING SUMA IDENTIFICADOR\n    | IDENTIFICADOR SUMA STRING\n    | IDENTIFICADOR SUMA IDENTIFICADORempty : END_OF_LINEasignacion : asignacionSimple\n                | asignacionCompuesta\n                | asignacionClase\n                | asignacionEstructuraD\n                | asignacionNull\n   asignacionSimple : IDENTIFICADOR IGUAL valor\n                      | IDENTIFICADOR IGUAL expresion\n                      | IDENTIFICADOR IGUAL salida_entrada\n  asignacionNull : IDENTIFICADOR IGUAL NULLasignacionClase : IDENTIFICADOR IGUAL NEW IDENTIFICADOR PAR_IZQ PAR_DERasignacionEstructuraD : IDENTIFICADOR IGUAL asignacionPila\n                            | IDENTIFICADOR IGUAL asignacionQueue\n                            | IDENTIFICADOR IGUAL asignacionList\n    asignacionPila : NEW STACK tipoLista PAR_IZQ PAR_DERasignacionQueue : NEW QUEUE tipoLista PAR_IZQ PAR_DERasignacionList : NEW LIST tipoLista PAR_IZQ PAR_DERasignacionCompuesta : asignacionCompuesta_Logic\n                        | asignacionCompuesta_Number\n                        | asignacionCompuesta_Null\n  asignacionCompuesta_Logic : IDENTIFICADOR operadoresCompuestosLogic BOOL\n                               | IDENTIFICADOR operadoresCompuestosLogic expresion_condicional\n                               | IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR\n  asignacionCompuesta_Number : IDENTIFICADOR operadoresCompuestosNumber numero\n                                | IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica\n                                | IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR\n  asignacionCompuesta_Null : IDENTIFICADOR NULL_EQUAL valor\n                                | IDENTIFICADOR NULL_EQUAL expresion\n                                | IDENTIFICADOR NULL_EQUAL asignacionPila\n                                | IDENTIFICADOR NULL_EQUAL asignacionQueue\n                                | IDENTIFICADOR NULL_EQUAL asignacionList operadoresCompuestosNumber : AUMENTADO\n                          | DECREMENTADO\n                          | MULTIPLICADO_POR\n                          | DIVIDIDO_POR\n                          | MODULO_DE\n   operadoresCompuestosLogic : AND_EQUAL\n                                | OR_EQUAL\n                                | EXC_OREQUAL\n  declaracion : valor_tipo IDENTIFICADOR\n                 | declaracionEstructuraD\n                 | declaracionAsignacion\n                 | declaracionClase\n                 | declaracionNull\n  declaracionNull : valor_tipo OP_TERNARIO IDENTIFICADORdeclaracionClase : IDENTIFICADOR IDENTIFICADOR declaracionAsignacion : valor_tipo asignacionSimple\n                            | declaracionClase IGUAL NEW IDENTIFICADOR PAR_IZQ PAR_DER\n                            | declaracionClase IGUAL NULL\n                            | declaracionClase IGUAL IDENTIFICADOR\n                            | declaracionNull IGUAL valor\n                            | declaracionNull IGUAL expresion\n                            | declaracionNull IGUAL NULL\n                            | declaracionEstructuraD IGUAL NULL\n\n  declaracionEstructuraD : declaracionList\n                              | declaracionQueue\n                              | declaracionPila\n    declaracionList : LIST tipoLista IDENTIFICADORdeclaracionQueue : QUEUE tipoLista IDENTIFICADORdeclaracionPila : STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADORcomparacion : valor operador_realacional valorestructura_control : while\n  | switch_case\n  | for\n  while : while_normal\n           | while_do\n  while_normal : WHILE PAR_IZQ expresion_condicional PAR_DER LLAVE_IZQ body_while LLAVE_DERwhile_do : DO LLAVE_IZQ body_while LLAVE_DER WHILE PAR_IZQ expresion_condicional PAR_DER END_OF_LINEbody_while : asignacion END_OF_LINE\n                  | declaracion END_OF_LINE\n                  | salida_entrada END_OF_LINE\n                  | BREAK END_OF_LINE\n                  | CONTINUE END_OF_LINE\n                  | asignacion END_OF_LINE body_while\n                  | declaracion END_OF_LINE body_while\n                  | salida_entrada END_OF_LINE body_while\n                  | BREAK END_OF_LINE body_while\n                  | CONTINUE END_OF_LINE body_while\n\n    switch_case : SWITCH PAR_IZQ valor PAR_DER LLAVE_IZQ casos LLAVE_DERcasos : CASE valor DOS_PUNTOS body_case BREAK END_OF_LINE\n  | CASE valor DOS_PUNTOS BREAK END_OF_LINE\n  | CASE valor DOS_PUNTOS body_case BREAK END_OF_LINE casos\n  | CASE valor DOS_PUNTOS BREAK END_OF_LINE casos\n  body_case : asignacion END_OF_LINE\n  | declaracion END_OF_LINE\n  | comparacion END_OF_LINE\n  | salida_entrada END_OF_LINE\n  | asignacion END_OF_LINE body_case\n  | declaracion END_OF_LINE body_case\n  | salida_entrada END_OF_LINE body_case\n  | comparacion END_OF_LINE body_case\n  for : FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DERforIterador : IDENTIFICADOR operadorForIteracionoperadorForIteracion : INCREMENTO \n                            | DECREMENTOforCondicion : IDENTIFICADOR operador_condicional valorForCondicionvalorForCondicion : FLOAT\n            | DOUBLE\n            | INT\n            | IDENTIFICADORforInicializador : tipoDatoForInicializador IDENTIFICADOR IGUAL valorForInicializador\n                    | IDENTIFICADOR IGUAL valorForInicializadortipoDatoForInicializador : FLOAT_TYPE\n                        | DOUBLE_TYPE\n                        | INT_TYPEvalorForInicializador : FLOAT\n            | DOUBLE\n            | INT\n            | IDENTIFICADORestructura_datos : lista\n                      | pila\n  lista : LIST tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINEtipoLista : MENOR_QUE valor_tipo_inicializador MAYOR_QUEpila : STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL NEW STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINEfunciones_estructura_datos : stack_push\n                                  | stack_pop\n    stack_push : IDENTIFICADOR PUNTO PUSH PAR_IZQ valor PAR_DERstack_pop : IDENTIFICADOR PUNTO POP PAR_IZQ PAR_DERexpresion : expresion_operacion_aritmetica\n  | expresion_condicional\n  expresion_operacion_aritmetica : numero operador_aritmentico numero\n  | numero operador_aritmentico IDENTIFICADOR\n  | IDENTIFICADOR operador_aritmentico numero\n  | IDENTIFICADOR operador_aritmentico IDENTIFICADOR\n  expresion_condicional : numero operador_condicional numero\n  | IDENTIFICADOR operador_condicional IDENTIFICADOR\n  | IDENTIFICADOR operador_condicional numero\n  | numero operador_condicional IDENTIFICADOR\n  salida_entrada : salida_uno\n                    | salida_dos\n                    | salida_tressalida_uno : CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER\n                    | CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER\n                    | CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DERsalida_dos : CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DERsalida_tres : CONSOLE_READLINE PAR_IZQ PAR_DERfuncion : funcion_tipo_uno\n             | funcion_tipo_tres\n  funcion_tipo_uno : modificador_acceso VOID IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ body LLAVE_DERfuncion_tipo_tres : modificador_acceso VOID IDENTIFICADOR PAR_IZQ parametrosF PAR_DER LLAVE_IZQ bodyF LLAVE_DERparametrosF : declaracion\n                 | declaracion COMA parametrosF\n  bodyF : asignacion END_OF_LINE\n            | declaracion END_OF_LINE\n            | salida_entrada END_OF_LINE\n            | asignacion END_OF_LINE bodyF\n            | declaracion END_OF_LINE bodyF\n            | salida_entrada END_OF_LINE bodyF'
    
_lr_action_items = {'END_OF_LINE':([0,2,7,8,10,12,13,14,15,16,17,24,25,26,27,28,33,34,35,36,37,38,39,40,41,42,43,44,45,61,62,63,64,65,66,85,86,88,131,132,133,135,136,137,138,139,141,142,143,144,145,146,147,148,151,152,153,155,156,157,158,159,160,161,162,164,166,167,168,169,170,171,172,173,174,176,182,196,201,202,203,204,205,209,224,226,227,245,248,251,252,253,254,255,257,262,274,276,280,281,286,289,295,296,297,302,303,304,305,306,314,324,325,326,327,329,330,331,332,333,335,336,343,365,],[3,73,74,75,76,77,-59,-60,-61,-62,-63,-176,-177,-186,-187,-188,-98,-99,-100,-101,-172,-173,-75,-76,-77,-11,-12,-13,-14,-112,-113,-114,-16,-17,-18,-97,-104,-103,-118,-12,-15,-102,-15,-64,-65,-66,-69,-70,-71,-67,-181,-180,-183,-184,-80,-78,-79,-83,-81,-82,-84,-85,-86,-87,-88,-111,-107,-106,-108,-109,-110,-178,-179,-182,-185,218,-115,-193,233,234,235,236,237,-116,-189,-190,-191,-175,284,-166,-159,-163,-164,-165,-117,-192,-115,-68,-174,-105,-158,3,-72,-73,-74,-157,-153,-154,-155,-156,-117,339,340,341,342,344,345,346,347,348,3,350,355,366,]),'IDENTIFICADOR':([0,31,32,55,56,57,58,59,60,78,79,80,81,82,83,84,87,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,116,117,118,119,120,121,122,123,124,125,127,128,129,130,134,140,165,177,179,180,181,206,214,218,220,222,223,225,228,230,233,234,235,236,237,238,239,250,263,267,283,284,285,289,291,293,294,310,315,334,335,337,339,340,341,345,346,347,348,],[32,85,88,-21,-22,-23,-24,-25,-26,133,-37,-38,-39,-40,-41,-42,135,136,145,147,151,155,136,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-94,-95,-96,-89,-90,-91,-92,-93,166,136,172,174,133,178,182,190,190,194,197,199,206,209,136,210,216,219,-160,-161,-162,88,133,249,251,-170,257,259,260,263,206,206,206,206,206,274,190,251,88,206,133,301,302,32,263,199,314,206,334,88,32,190,206,206,206,334,334,334,334,]),'CHAR':([0,78,79,80,81,82,83,84,89,95,117,120,134,214,283,289,315,335,345,346,347,348,],[42,42,-37,-38,-39,-40,-41,-42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'BOOL':([0,78,79,80,81,82,83,84,89,93,95,107,108,109,117,120,134,214,283,289,315,335,345,346,347,348,],[44,44,-37,-38,-39,-40,-41,-42,44,152,44,-94,-95,-96,44,44,44,44,44,44,44,44,44,44,44,44,]),'STRING':([0,78,79,80,81,82,83,84,89,95,117,120,125,134,195,214,225,228,283,289,315,335,345,346,347,348,],[45,45,-37,-38,-39,-40,-41,-42,45,45,45,45,192,45,229,45,258,261,45,45,45,45,45,45,45,45,]),'SWITCH':([0,289,335,],[48,48,48,]),'FOR':([0,289,335,],[49,49,49,]),'LIST':([0,129,140,163,230,233,234,235,236,237,256,267,289,291,310,315,335,339,340,341,345,346,347,348,],[50,207,213,213,207,207,207,207,207,207,287,207,50,207,207,207,50,207,207,207,207,207,207,207,]),'STACK':([0,129,140,163,230,233,234,235,236,237,267,289,291,308,310,315,335,339,340,341,345,346,347,348,],[51,208,211,211,208,208,208,208,208,208,208,51,208,321,208,208,51,208,208,208,208,208,208,208,]),'CONSOLE_WRITELINE':([0,89,129,134,233,234,235,236,237,267,289,310,315,335,339,340,341,345,346,347,348,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'CONSOLE_READLINE':([0,89,129,134,233,234,235,236,237,267,289,310,315,335,339,340,341,345,346,347,348,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'CHAR_TYPE':([0,123,124,129,230,233,234,235,236,237,239,267,289,291,310,315,335,337,339,340,341,345,346,347,348,],[55,189,189,55,55,55,55,55,55,55,189,55,55,55,55,55,55,189,55,55,55,55,55,55,55,]),'FLOAT_TYPE':([0,121,123,124,129,230,233,234,235,236,237,239,267,289,291,310,315,335,337,339,340,341,345,346,347,348,],[56,179,184,184,56,56,56,56,56,56,56,184,56,56,56,56,56,56,184,56,56,56,56,56,56,56,]),'DOUBLE_TYPE':([0,121,123,124,129,230,233,234,235,236,237,239,267,289,291,310,315,335,337,339,340,341,345,346,347,348,],[57,180,185,185,57,57,57,57,57,57,57,185,57,57,57,57,57,57,185,57,57,57,57,57,57,57,]),'INT_TYPE':([0,121,123,124,129,230,233,234,235,236,237,239,267,289,291,310,315,335,337,339,340,341,345,346,347,348,],[58,181,187,187,58,58,58,58,58,58,58,187,58,58,58,58,58,58,187,58,58,58,58,58,58,58,]),'BOOL_TYPE':([0,123,124,129,230,233,234,235,236,237,239,267,289,291,310,315,335,337,339,340,341,345,346,347,348,],[59,188,188,59,59,59,59,59,59,59,188,59,59,59,59,59,59,188,59,59,59,59,59,59,59,]),'STRING_TYPE':([0,123,124,129,230,233,234,235,236,237,239,267,289,291,310,315,335,337,339,340,341,345,346,347,348,],[60,186,186,60,60,60,60,60,60,60,186,60,60,60,60,60,60,186,60,60,60,60,60,60,60,]),'FLOAT':([0,78,79,80,81,82,83,84,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,117,118,119,120,128,134,214,220,250,283,285,289,293,315,335,345,346,347,348,],[64,64,-37,-38,-39,-40,-41,-42,64,64,64,64,64,64,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-94,-95,-96,-89,-90,-91,-92,-93,64,64,64,64,64,64,64,253,253,64,304,64,64,64,64,64,64,64,64,]),'DOUBLE':([0,78,79,80,81,82,83,84,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,117,118,119,120,128,134,214,220,250,283,285,289,293,315,335,345,346,347,348,],[65,65,-37,-38,-39,-40,-41,-42,65,65,65,65,65,65,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-94,-95,-96,-89,-90,-91,-92,-93,65,65,65,65,65,65,65,254,254,65,305,65,65,65,65,65,65,65,65,]),'INT':([0,78,79,80,81,82,83,84,89,90,91,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,117,118,119,120,128,134,214,220,250,283,285,289,293,315,335,345,346,347,348,],[66,66,-37,-38,-39,-40,-41,-42,66,66,66,66,66,66,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-94,-95,-96,-89,-90,-91,-92,-93,66,66,66,66,66,66,66,255,255,66,306,66,66,66,66,66,66,66,66,]),'WHILE':([0,232,289,335,],[67,268,67,67,]),'DO':([0,289,335,],[68,68,68,]),'PRIVATE':([0,289,335,],[69,69,69,]),'PROTECTED':([0,289,335,],[70,70,70,]),'PUBLIC':([0,289,335,],[71,71,71,]),'QUEUE':([0,129,140,163,230,233,234,235,236,237,267,289,291,310,315,335,339,340,341,345,346,347,348,],[72,72,212,212,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,]),'$end':([1,3,4,5,6,9,11,19,20,21,22,23,29,30,42,44,45,46,47,64,65,66,73,74,75,76,77,131,132,133,298,312,322,338,342,350,361,366,],[0,-58,-2,-3,-4,-7,-9,-119,-120,-121,-167,-168,-194,-195,-11,-13,-14,-122,-123,-16,-17,-18,-1,-5,-6,-8,-10,-118,-12,-15,-136,-124,-196,-197,-125,-169,-149,-171,]),'LLAVE_DER':([3,4,5,6,9,11,19,20,21,22,23,29,30,42,44,45,46,47,64,65,66,73,74,75,76,77,131,132,133,200,233,234,235,236,237,269,270,271,272,273,282,292,298,309,312,322,323,338,339,340,341,342,344,349,350,352,353,354,355,356,361,363,366,],[-58,-2,-3,-4,-7,-9,-119,-120,-121,-167,-168,-194,-195,-11,-13,-14,-122,-123,-16,-17,-18,-1,-5,-6,-8,-10,-118,-12,-15,232,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,298,312,-136,322,-124,-196,338,-197,-200,-201,-202,-125,-138,361,-169,-203,-204,-205,-137,-140,-149,-139,-171,]),'IGUAL_IGUAL':([18,32,42,43,44,45,64,65,66,132,136,151,154,199,249,334,],[79,101,-11,101,-13,-14,-16,-17,-18,-12,101,101,101,101,101,-15,]),'NO_IGUAL':([18,32,42,43,44,45,64,65,66,132,136,151,154,199,249,334,],[80,102,-11,102,-13,-14,-16,-17,-18,-12,102,102,102,102,102,-15,]),'MENOR_QUE':([18,32,42,43,44,45,50,51,64,65,66,72,132,136,151,154,199,207,208,211,212,213,249,287,321,334,],[81,103,-11,103,-13,-14,123,124,-16,-17,-18,123,-12,103,103,103,103,123,239,123,123,123,103,123,337,-15,]),'MENOR_O_IGUAL_QUE':([18,32,42,43,44,45,64,65,66,132,136,151,154,199,249,334,],[82,104,-11,104,-13,-14,-16,-17,-18,-12,104,104,104,104,104,-15,]),'MAYOR_QUE':([18,32,42,43,44,45,64,65,66,132,136,151,154,183,184,185,186,187,188,189,190,191,199,249,275,334,351,],[83,105,-11,105,-13,-14,-16,-17,-18,-12,105,105,105,222,-27,-28,-29,-30,-31,-32,-33,223,105,105,294,-15,362,]),'MAYOR_O_IGUAL_QUE':([18,32,42,43,44,45,64,65,66,132,136,151,154,199,249,334,],[84,106,-11,106,-13,-14,-16,-17,-18,-12,106,106,106,106,106,-15,]),'COMA':([24,25,26,27,28,33,34,35,36,42,43,44,45,61,62,63,64,65,66,85,86,88,135,136,137,138,139,145,146,147,148,164,166,167,168,169,170,171,172,173,174,196,209,224,226,227,262,266,274,281,314,],[-176,-177,-186,-187,-188,-98,-99,-100,-101,-11,-12,-13,-14,-112,-113,-114,-16,-17,-18,-97,-104,-103,-102,-15,-64,-65,-66,-181,-180,-183,-184,-111,-107,-106,-108,-109,-110,-178,-179,-182,-185,-193,-116,-189,-190,-191,-192,291,-115,-105,-117,]),'PAR_DER':([24,25,26,27,28,33,34,35,36,42,43,44,45,61,62,63,64,65,66,85,86,88,126,132,133,135,136,137,138,139,145,146,147,148,164,166,167,168,169,170,171,172,173,174,175,192,193,194,196,198,209,215,224,226,227,229,230,240,244,246,258,259,260,261,262,265,266,274,277,278,279,281,300,311,313,314,317,318,319,320,364,],[-176,-177,-186,-187,-188,-98,-99,-100,-101,-11,-12,-13,-14,-112,-113,-114,-16,-17,-18,-97,-104,-103,196,-12,-15,-102,-15,-64,-65,-66,-181,-180,-183,-184,-111,-107,-106,-108,-109,-110,-178,-179,-182,-185,217,224,226,227,-193,231,-116,245,-189,-190,-191,262,264,276,280,281,-54,-55,-57,-56,-192,290,-198,-115,295,296,297,-105,316,-199,327,-117,-150,-151,-152,336,365,]),'OP_TERNARIO':([31,55,56,57,58,59,60,],[87,-21,-22,-23,-24,-25,-26,]),'IGUAL':([32,33,35,36,61,62,63,85,88,135,178,182,206,209,219,257,274,314,334,],[89,115,116,117,-112,-113,-114,134,-103,-102,220,221,89,-116,250,288,-115,-117,89,]),'PUNTO':([32,],[92,]),'NULL_EQUAL':([32,206,334,],[95,95,95,]),'SUMA':([32,43,64,65,66,136,155,156,192,194,],[96,96,-16,-17,-18,96,96,96,225,228,]),'RESTA':([32,43,64,65,66,136,155,156,],[97,97,-16,-17,-18,97,97,97,]),'MULTIPLICACION':([32,43,64,65,66,136,155,156,],[98,98,-16,-17,-18,98,98,98,]),'DIVISION':([32,43,64,65,66,136,155,156,],[99,99,-16,-17,-18,99,99,99,]),'MODULO':([32,43,64,65,66,136,155,156,],[100,100,-16,-17,-18,100,100,100,]),'AND_EQUAL':([32,206,334,],[107,107,107,]),'OR_EQUAL':([32,206,334,],[108,108,108,]),'EXC_OREQUAL':([32,206,334,],[109,109,109,]),'AUMENTADO':([32,206,334,],[110,110,110,]),'DECREMENTADO':([32,206,334,],[111,111,111,]),'MULTIPLICADO_POR':([32,206,334,],[112,112,112,]),'DIVIDIDO_POR':([32,206,334,],[113,113,113,]),'MODULO_DE':([32,206,334,],[114,114,114,]),'DOS_PUNTOS':([42,44,45,64,65,66,132,133,299,],[-11,-13,-14,-16,-17,-18,-12,-15,315,]),'PAR_IZQ':([48,49,52,53,67,149,150,197,210,216,222,241,242,243,268,307,362,],[120,121,125,126,128,214,215,230,240,246,-170,277,278,279,293,320,364,]),'VOID':([54,69,70,71,],[127,-34,-35,-36,]),'LLAVE_IZQ':([68,217,231,264,290,316,],[129,247,267,289,310,335,]),'NEW':([89,95,116,221,288,],[140,163,165,256,308,]),'NULL':([89,115,116,117,],[144,164,167,170,]),'PUSH':([92,],[149,]),'POP':([92,],[150,]),'C_CADENA_INTERPOLADA':([125,],[195,]),'BREAK':([129,233,234,235,236,237,267,315,328,345,346,347,348,357,358,359,360,],[204,204,204,204,204,204,204,329,343,-141,-142,-143,-144,-145,-146,-148,-147,]),'CONTINUE':([129,233,234,235,236,237,267,],[205,205,205,205,205,205,205,]),'CASE':([247,344,355,],[283,283,283,]),'INCREMENTO':([301,],[318,]),'DECREMENTO':([301,],[319,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'body':([0,289,335,],[1,309,349,]),'asignacion':([0,129,233,234,235,236,237,267,289,310,315,335,339,340,341,345,346,347,348,],[2,201,201,201,201,201,201,201,2,324,330,2,324,324,324,330,330,330,330,]),'comparacion':([0,289,315,335,345,346,347,348,],[4,4,332,4,332,332,332,332,]),'estructura_control':([0,289,335,],[5,5,5,]),'estructura_datos':([0,289,335,],[6,6,6,]),'expresion':([0,89,95,117,134,289,335,],[7,138,159,169,138,7,7,]),'salida_entrada':([0,89,129,134,233,234,235,236,237,267,289,310,315,335,339,340,341,345,346,347,348,],[8,139,203,139,203,203,203,203,203,203,8,326,333,8,326,326,326,333,333,333,333,]),'funcion':([0,289,335,],[9,9,9,]),'declaracion':([0,129,230,233,234,235,236,237,267,289,291,310,315,335,339,340,341,345,346,347,348,],[10,202,266,202,202,202,202,202,202,10,266,325,331,10,325,325,325,331,331,331,331,]),'empty':([0,289,335,],[11,11,11,]),'funciones_estructura_datos':([0,289,335,],[12,12,12,]),'asignacionSimple':([0,31,129,233,234,235,236,237,267,289,310,315,335,339,340,341,345,346,347,348,],[13,86,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'asignacionCompuesta':([0,129,233,234,235,236,237,267,289,310,315,335,339,340,341,345,346,347,348,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'asignacionClase':([0,129,233,234,235,236,237,267,289,310,315,335,339,340,341,345,346,347,348,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'asignacionEstructuraD':([0,129,233,234,235,236,237,267,289,310,315,335,339,340,341,345,346,347,348,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'asignacionNull':([0,129,233,234,235,236,237,267,289,310,315,335,339,340,341,345,346,347,348,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'valor':([0,78,89,95,117,120,134,214,283,289,315,335,345,346,347,348,],[18,131,137,158,168,175,137,244,299,18,18,18,18,18,18,18,]),'while':([0,289,335,],[19,19,19,]),'switch_case':([0,289,335,],[20,20,20,]),'for':([0,289,335,],[21,21,21,]),'lista':([0,289,335,],[22,22,22,]),'pila':([0,289,335,],[23,23,23,]),'expresion_operacion_aritmetica':([0,89,94,95,117,134,289,335,],[24,24,157,24,24,24,24,24,]),'expresion_condicional':([0,89,93,95,117,128,134,289,293,335,],[25,25,153,25,25,198,25,25,313,25,]),'salida_uno':([0,89,129,134,233,234,235,236,237,267,289,310,315,335,339,340,341,345,346,347,348,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'salida_dos':([0,89,129,134,233,234,235,236,237,267,289,310,315,335,339,340,341,345,346,347,348,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'salida_tres':([0,89,129,134,233,234,235,236,237,267,289,310,315,335,339,340,341,345,346,347,348,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'funcion_tipo_uno':([0,289,335,],[29,29,29,]),'funcion_tipo_tres':([0,289,335,],[30,30,30,]),'valor_tipo':([0,129,230,233,234,235,236,237,267,289,291,310,315,335,339,340,341,345,346,347,348,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'declaracionEstructuraD':([0,129,230,233,234,235,236,237,267,289,291,310,315,335,339,340,341,345,346,347,348,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'declaracionAsignacion':([0,129,230,233,234,235,236,237,267,289,291,310,315,335,339,340,341,345,346,347,348,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'declaracionClase':([0,129,230,233,234,235,236,237,267,289,291,310,315,335,339,340,341,345,346,347,348,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'declaracionNull':([0,129,230,233,234,235,236,237,267,289,291,310,315,335,339,340,341,345,346,347,348,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'stack_push':([0,289,335,],[37,37,37,]),'stack_pop':([0,289,335,],[38,38,38,]),'asignacionCompuesta_Logic':([0,129,233,234,235,236,237,267,289,310,315,335,339,340,341,345,346,347,348,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'asignacionCompuesta_Number':([0,129,233,234,235,236,237,267,289,310,315,335,339,340,341,345,346,347,348,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'asignacionCompuesta_Null':([0,129,233,234,235,236,237,267,289,310,315,335,339,340,341,345,346,347,348,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'numero':([0,78,89,90,91,93,94,95,117,118,119,120,128,134,214,283,289,293,315,335,345,346,347,348,],[43,132,43,146,148,154,156,43,43,171,173,132,154,43,132,132,43,154,132,43,132,132,132,132,]),'while_normal':([0,289,335,],[46,46,46,]),'while_do':([0,289,335,],[47,47,47,]),'modificador_acceso':([0,289,335,],[54,54,54,]),'declaracionList':([0,129,230,233,234,235,236,237,267,289,291,310,315,335,339,340,341,345,346,347,348,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'declaracionQueue':([0,129,230,233,234,235,236,237,267,289,291,310,315,335,339,340,341,345,346,347,348,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'declaracionPila':([0,129,230,233,234,235,236,237,267,289,291,310,315,335,339,340,341,345,346,347,348,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'operador_realacional':([18,],[78,]),'operador_aritmentico':([32,43,136,155,156,],[90,118,90,90,118,]),'operador_condicional':([32,43,136,151,154,199,249,],[91,119,91,91,119,91,285,]),'operadoresCompuestosLogic':([32,206,334,],[93,93,93,]),'operadoresCompuestosNumber':([32,206,334,],[94,94,94,]),'tipoLista':([50,72,207,211,212,213,287,],[122,130,238,241,242,243,307,]),'asignacionPila':([89,95,],[141,160,]),'asignacionQueue':([89,95,],[142,161,]),'asignacionList':([89,95,],[143,162,]),'forInicializador':([121,],[176,]),'tipoDatoForInicializador':([121,],[177,]),'valor_tipo_inicializador':([123,124,239,337,],[183,191,275,351,]),'operacion_string':([125,],[193,]),'body_while':([129,233,234,235,236,237,267,],[200,269,270,271,272,273,292,]),'forCondicion':([218,],[248,]),'valorForInicializador':([220,250,],[252,286,]),'parametrosF':([230,291,],[265,311,]),'casos':([247,344,355,],[282,356,363,]),'forIterador':([284,],[300,]),'valorForCondicion':([285,],[303,]),'operadorForIteracion':([301,],[317,]),'bodyF':([310,339,340,341,],[323,352,353,354,]),'body_case':([315,345,346,347,348,],[328,357,358,359,360,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> body","S'",1,None,None,None),
  ('body -> asignacion END_OF_LINE','body',2,'p_body','main.py',6),
  ('body -> comparacion','body',1,'p_body','main.py',7),
  ('body -> estructura_control','body',1,'p_body','main.py',8),
  ('body -> estructura_datos','body',1,'p_body','main.py',9),
  ('body -> expresion END_OF_LINE','body',2,'p_body','main.py',10),
  ('body -> salida_entrada END_OF_LINE','body',2,'p_body','main.py',11),
  ('body -> funcion','body',1,'p_body','main.py',12),
  ('body -> declaracion END_OF_LINE','body',2,'p_body','main.py',13),
  ('body -> empty','body',1,'p_body','main.py',14),
  ('body -> funciones_estructura_datos END_OF_LINE','body',2,'p_body','main.py',15),
  ('valor -> CHAR','valor',1,'p_valor','main.py',24),
  ('valor -> numero','valor',1,'p_valor','main.py',25),
  ('valor -> BOOL','valor',1,'p_valor','main.py',26),
  ('valor -> STRING','valor',1,'p_valor','main.py',27),
  ('valor -> IDENTIFICADOR','valor',1,'p_valor','main.py',28),
  ('numero -> FLOAT','numero',1,'p_numero','main.py',32),
  ('numero -> DOUBLE','numero',1,'p_numero','main.py',33),
  ('numero -> INT','numero',1,'p_numero','main.py',34),
  ('ftipo -> valor_tipo','ftipo',1,'p_ftipo','main.py',37),
  ('ftipo -> VOID','ftipo',1,'p_ftipo','main.py',38),
  ('valor_tipo -> CHAR_TYPE','valor_tipo',1,'p_valor_tipo','main.py',42),
  ('valor_tipo -> FLOAT_TYPE','valor_tipo',1,'p_valor_tipo','main.py',43),
  ('valor_tipo -> DOUBLE_TYPE','valor_tipo',1,'p_valor_tipo','main.py',44),
  ('valor_tipo -> INT_TYPE','valor_tipo',1,'p_valor_tipo','main.py',45),
  ('valor_tipo -> BOOL_TYPE','valor_tipo',1,'p_valor_tipo','main.py',46),
  ('valor_tipo -> STRING_TYPE','valor_tipo',1,'p_valor_tipo','main.py',47),
  ('valor_tipo_inicializador -> FLOAT_TYPE','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','main.py',51),
  ('valor_tipo_inicializador -> DOUBLE_TYPE','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','main.py',52),
  ('valor_tipo_inicializador -> STRING_TYPE','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','main.py',53),
  ('valor_tipo_inicializador -> INT_TYPE','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','main.py',54),
  ('valor_tipo_inicializador -> BOOL_TYPE','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','main.py',55),
  ('valor_tipo_inicializador -> CHAR_TYPE','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','main.py',56),
  ('valor_tipo_inicializador -> IDENTIFICADOR','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','main.py',57),
  ('modificador_acceso -> PRIVATE','modificador_acceso',1,'p_modificador_acceso','main.py',60),
  ('modificador_acceso -> PROTECTED','modificador_acceso',1,'p_modificador_acceso','main.py',61),
  ('modificador_acceso -> PUBLIC','modificador_acceso',1,'p_modificador_acceso','main.py',62),
  ('operador_realacional -> IGUAL_IGUAL','operador_realacional',1,'p_operador_realacional','main.py',66),
  ('operador_realacional -> NO_IGUAL','operador_realacional',1,'p_operador_realacional','main.py',67),
  ('operador_realacional -> MENOR_QUE','operador_realacional',1,'p_operador_realacional','main.py',68),
  ('operador_realacional -> MENOR_O_IGUAL_QUE','operador_realacional',1,'p_operador_realacional','main.py',69),
  ('operador_realacional -> MAYOR_QUE','operador_realacional',1,'p_operador_realacional','main.py',70),
  ('operador_realacional -> MAYOR_O_IGUAL_QUE','operador_realacional',1,'p_operador_realacional','main.py',71),
  ('operador_aritmentico -> SUMA','operador_aritmentico',1,'p_operador_aritmentico','main.py',75),
  ('operador_aritmentico -> RESTA','operador_aritmentico',1,'p_operador_aritmentico','main.py',76),
  ('operador_aritmentico -> MULTIPLICACION','operador_aritmentico',1,'p_operador_aritmentico','main.py',77),
  ('operador_aritmentico -> DIVISION','operador_aritmentico',1,'p_operador_aritmentico','main.py',78),
  ('operador_aritmentico -> MODULO','operador_aritmentico',1,'p_operador_aritmentico','main.py',79),
  ('operador_condicional -> IGUAL_IGUAL','operador_condicional',1,'p_operador_condicional','main.py',83),
  ('operador_condicional -> NO_IGUAL','operador_condicional',1,'p_operador_condicional','main.py',84),
  ('operador_condicional -> MENOR_QUE','operador_condicional',1,'p_operador_condicional','main.py',85),
  ('operador_condicional -> MENOR_O_IGUAL_QUE','operador_condicional',1,'p_operador_condicional','main.py',86),
  ('operador_condicional -> MAYOR_QUE','operador_condicional',1,'p_operador_condicional','main.py',87),
  ('operador_condicional -> MAYOR_O_IGUAL_QUE','operador_condicional',1,'p_operador_condicional','main.py',88),
  ('operacion_string -> STRING SUMA STRING','operacion_string',3,'p_operacion_string','main.py',92),
  ('operacion_string -> STRING SUMA IDENTIFICADOR','operacion_string',3,'p_operacion_string','main.py',93),
  ('operacion_string -> IDENTIFICADOR SUMA STRING','operacion_string',3,'p_operacion_string','main.py',94),
  ('operacion_string -> IDENTIFICADOR SUMA IDENTIFICADOR','operacion_string',3,'p_operacion_string','main.py',95),
  ('empty -> END_OF_LINE','empty',1,'p_empty','main.py',105),
  ('asignacion -> asignacionSimple','asignacion',1,'p_asignacion','main.py',108),
  ('asignacion -> asignacionCompuesta','asignacion',1,'p_asignacion','main.py',109),
  ('asignacion -> asignacionClase','asignacion',1,'p_asignacion','main.py',110),
  ('asignacion -> asignacionEstructuraD','asignacion',1,'p_asignacion','main.py',111),
  ('asignacion -> asignacionNull','asignacion',1,'p_asignacion','main.py',112),
  ('asignacionSimple -> IDENTIFICADOR IGUAL valor','asignacionSimple',3,'p_asignacionSimple','main.py',115),
  ('asignacionSimple -> IDENTIFICADOR IGUAL expresion','asignacionSimple',3,'p_asignacionSimple','main.py',116),
  ('asignacionSimple -> IDENTIFICADOR IGUAL salida_entrada','asignacionSimple',3,'p_asignacionSimple','main.py',117),
  ('asignacionNull -> IDENTIFICADOR IGUAL NULL','asignacionNull',3,'p_asignacionNull','main.py',120),
  ('asignacionClase -> IDENTIFICADOR IGUAL NEW IDENTIFICADOR PAR_IZQ PAR_DER','asignacionClase',6,'p_asignacionClase','main.py',123),
  ('asignacionEstructuraD -> IDENTIFICADOR IGUAL asignacionPila','asignacionEstructuraD',3,'p_asignacionEstructuraD','main.py',127),
  ('asignacionEstructuraD -> IDENTIFICADOR IGUAL asignacionQueue','asignacionEstructuraD',3,'p_asignacionEstructuraD','main.py',128),
  ('asignacionEstructuraD -> IDENTIFICADOR IGUAL asignacionList','asignacionEstructuraD',3,'p_asignacionEstructuraD','main.py',129),
  ('asignacionPila -> NEW STACK tipoLista PAR_IZQ PAR_DER','asignacionPila',5,'p_asignacionPila','main.py',133),
  ('asignacionQueue -> NEW QUEUE tipoLista PAR_IZQ PAR_DER','asignacionQueue',5,'p_asignacionQueue','main.py',136),
  ('asignacionList -> NEW LIST tipoLista PAR_IZQ PAR_DER','asignacionList',5,'p_asignacionList','main.py',139),
  ('asignacionCompuesta -> asignacionCompuesta_Logic','asignacionCompuesta',1,'p_asignacionCompuesta','main.py',142),
  ('asignacionCompuesta -> asignacionCompuesta_Number','asignacionCompuesta',1,'p_asignacionCompuesta','main.py',143),
  ('asignacionCompuesta -> asignacionCompuesta_Null','asignacionCompuesta',1,'p_asignacionCompuesta','main.py',144),
  ('asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic BOOL','asignacionCompuesta_Logic',3,'p_asignacionCompuesta_Logic','main.py',147),
  ('asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic expresion_condicional','asignacionCompuesta_Logic',3,'p_asignacionCompuesta_Logic','main.py',148),
  ('asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR','asignacionCompuesta_Logic',3,'p_asignacionCompuesta_Logic','main.py',149),
  ('asignacionCompuesta_Number -> IDENTIFICADOR operadoresCompuestosNumber numero','asignacionCompuesta_Number',3,'p_asignacionCompuesta_Number','main.py',153),
  ('asignacionCompuesta_Number -> IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica','asignacionCompuesta_Number',3,'p_asignacionCompuesta_Number','main.py',154),
  ('asignacionCompuesta_Number -> IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR','asignacionCompuesta_Number',3,'p_asignacionCompuesta_Number','main.py',155),
  ('asignacionCompuesta_Null -> IDENTIFICADOR NULL_EQUAL valor','asignacionCompuesta_Null',3,'p_asignacionCompuesta_Null','main.py',159),
  ('asignacionCompuesta_Null -> IDENTIFICADOR NULL_EQUAL expresion','asignacionCompuesta_Null',3,'p_asignacionCompuesta_Null','main.py',160),
  ('asignacionCompuesta_Null -> IDENTIFICADOR NULL_EQUAL asignacionPila','asignacionCompuesta_Null',3,'p_asignacionCompuesta_Null','main.py',161),
  ('asignacionCompuesta_Null -> IDENTIFICADOR NULL_EQUAL asignacionQueue','asignacionCompuesta_Null',3,'p_asignacionCompuesta_Null','main.py',162),
  ('asignacionCompuesta_Null -> IDENTIFICADOR NULL_EQUAL asignacionList','asignacionCompuesta_Null',3,'p_asignacionCompuesta_Null','main.py',163),
  ('operadoresCompuestosNumber -> AUMENTADO','operadoresCompuestosNumber',1,'p_operadoresCompuestosNumber','main.py',166),
  ('operadoresCompuestosNumber -> DECREMENTADO','operadoresCompuestosNumber',1,'p_operadoresCompuestosNumber','main.py',167),
  ('operadoresCompuestosNumber -> MULTIPLICADO_POR','operadoresCompuestosNumber',1,'p_operadoresCompuestosNumber','main.py',168),
  ('operadoresCompuestosNumber -> DIVIDIDO_POR','operadoresCompuestosNumber',1,'p_operadoresCompuestosNumber','main.py',169),
  ('operadoresCompuestosNumber -> MODULO_DE','operadoresCompuestosNumber',1,'p_operadoresCompuestosNumber','main.py',170),
  ('operadoresCompuestosLogic -> AND_EQUAL','operadoresCompuestosLogic',1,'p_operadoresCompuestosLogic','main.py',173),
  ('operadoresCompuestosLogic -> OR_EQUAL','operadoresCompuestosLogic',1,'p_operadoresCompuestosLogic','main.py',174),
  ('operadoresCompuestosLogic -> EXC_OREQUAL','operadoresCompuestosLogic',1,'p_operadoresCompuestosLogic','main.py',175),
  ('declaracion -> valor_tipo IDENTIFICADOR','declaracion',2,'p_declaracion','main.py',178),
  ('declaracion -> declaracionEstructuraD','declaracion',1,'p_declaracion','main.py',179),
  ('declaracion -> declaracionAsignacion','declaracion',1,'p_declaracion','main.py',180),
  ('declaracion -> declaracionClase','declaracion',1,'p_declaracion','main.py',181),
  ('declaracion -> declaracionNull','declaracion',1,'p_declaracion','main.py',182),
  ('declaracionNull -> valor_tipo OP_TERNARIO IDENTIFICADOR','declaracionNull',3,'p_declaracionNull','main.py',186),
  ('declaracionClase -> IDENTIFICADOR IDENTIFICADOR','declaracionClase',2,'p_declaracionClase','main.py',189),
  ('declaracionAsignacion -> valor_tipo asignacionSimple','declaracionAsignacion',2,'p_declaracionAsignacion','main.py',192),
  ('declaracionAsignacion -> declaracionClase IGUAL NEW IDENTIFICADOR PAR_IZQ PAR_DER','declaracionAsignacion',6,'p_declaracionAsignacion','main.py',193),
  ('declaracionAsignacion -> declaracionClase IGUAL NULL','declaracionAsignacion',3,'p_declaracionAsignacion','main.py',194),
  ('declaracionAsignacion -> declaracionClase IGUAL IDENTIFICADOR','declaracionAsignacion',3,'p_declaracionAsignacion','main.py',195),
  ('declaracionAsignacion -> declaracionNull IGUAL valor','declaracionAsignacion',3,'p_declaracionAsignacion','main.py',196),
  ('declaracionAsignacion -> declaracionNull IGUAL expresion','declaracionAsignacion',3,'p_declaracionAsignacion','main.py',197),
  ('declaracionAsignacion -> declaracionNull IGUAL NULL','declaracionAsignacion',3,'p_declaracionAsignacion','main.py',198),
  ('declaracionAsignacion -> declaracionEstructuraD IGUAL NULL','declaracionAsignacion',3,'p_declaracionAsignacion','main.py',199),
  ('declaracionEstructuraD -> declaracionList','declaracionEstructuraD',1,'p_declaracionEstructuraD','main.py',203),
  ('declaracionEstructuraD -> declaracionQueue','declaracionEstructuraD',1,'p_declaracionEstructuraD','main.py',204),
  ('declaracionEstructuraD -> declaracionPila','declaracionEstructuraD',1,'p_declaracionEstructuraD','main.py',205),
  ('declaracionList -> LIST tipoLista IDENTIFICADOR','declaracionList',3,'p_declaracionList','main.py',209),
  ('declaracionQueue -> QUEUE tipoLista IDENTIFICADOR','declaracionQueue',3,'p_declaracionQueue','main.py',212),
  ('declaracionPila -> STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR','declaracionPila',5,'p_declaracionPila','main.py',215),
  ('comparacion -> valor operador_realacional valor','comparacion',3,'p_comparacion','main.py',239),
  ('estructura_control -> while','estructura_control',1,'p_estructura_control','main.py',248),
  ('estructura_control -> switch_case','estructura_control',1,'p_estructura_control','main.py',249),
  ('estructura_control -> for','estructura_control',1,'p_estructura_control','main.py',250),
  ('while -> while_normal','while',1,'p_while','main.py',255),
  ('while -> while_do','while',1,'p_while','main.py',256),
  ('while_normal -> WHILE PAR_IZQ expresion_condicional PAR_DER LLAVE_IZQ body_while LLAVE_DER','while_normal',7,'p_while_normal','main.py',260),
  ('while_do -> DO LLAVE_IZQ body_while LLAVE_DER WHILE PAR_IZQ expresion_condicional PAR_DER END_OF_LINE','while_do',9,'p_while_do','main.py',263),
  ('body_while -> asignacion END_OF_LINE','body_while',2,'p_body_while','main.py',266),
  ('body_while -> declaracion END_OF_LINE','body_while',2,'p_body_while','main.py',267),
  ('body_while -> salida_entrada END_OF_LINE','body_while',2,'p_body_while','main.py',268),
  ('body_while -> BREAK END_OF_LINE','body_while',2,'p_body_while','main.py',269),
  ('body_while -> CONTINUE END_OF_LINE','body_while',2,'p_body_while','main.py',270),
  ('body_while -> asignacion END_OF_LINE body_while','body_while',3,'p_body_while','main.py',271),
  ('body_while -> declaracion END_OF_LINE body_while','body_while',3,'p_body_while','main.py',272),
  ('body_while -> salida_entrada END_OF_LINE body_while','body_while',3,'p_body_while','main.py',273),
  ('body_while -> BREAK END_OF_LINE body_while','body_while',3,'p_body_while','main.py',274),
  ('body_while -> CONTINUE END_OF_LINE body_while','body_while',3,'p_body_while','main.py',275),
  ('switch_case -> SWITCH PAR_IZQ valor PAR_DER LLAVE_IZQ casos LLAVE_DER','switch_case',7,'p_switch_case','main.py',285),
  ('casos -> CASE valor DOS_PUNTOS body_case BREAK END_OF_LINE','casos',6,'p_casos','main.py',288),
  ('casos -> CASE valor DOS_PUNTOS BREAK END_OF_LINE','casos',5,'p_casos','main.py',289),
  ('casos -> CASE valor DOS_PUNTOS body_case BREAK END_OF_LINE casos','casos',7,'p_casos','main.py',290),
  ('casos -> CASE valor DOS_PUNTOS BREAK END_OF_LINE casos','casos',6,'p_casos','main.py',291),
  ('body_case -> asignacion END_OF_LINE','body_case',2,'p_body_case','main.py',294),
  ('body_case -> declaracion END_OF_LINE','body_case',2,'p_body_case','main.py',295),
  ('body_case -> comparacion END_OF_LINE','body_case',2,'p_body_case','main.py',296),
  ('body_case -> salida_entrada END_OF_LINE','body_case',2,'p_body_case','main.py',297),
  ('body_case -> asignacion END_OF_LINE body_case','body_case',3,'p_body_case','main.py',298),
  ('body_case -> declaracion END_OF_LINE body_case','body_case',3,'p_body_case','main.py',299),
  ('body_case -> salida_entrada END_OF_LINE body_case','body_case',3,'p_body_case','main.py',300),
  ('body_case -> comparacion END_OF_LINE body_case','body_case',3,'p_body_case','main.py',301),
  ('for -> FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DER','for',11,'p_for','main.py',311),
  ('forIterador -> IDENTIFICADOR operadorForIteracion','forIterador',2,'p_forIterador','main.py',317),
  ('operadorForIteracion -> INCREMENTO','operadorForIteracion',1,'p_operadorForIteracion','main.py',321),
  ('operadorForIteracion -> DECREMENTO','operadorForIteracion',1,'p_operadorForIteracion','main.py',322),
  ('forCondicion -> IDENTIFICADOR operador_condicional valorForCondicion','forCondicion',3,'p_forCondicion','main.py',328),
  ('valorForCondicion -> FLOAT','valorForCondicion',1,'p_valorForCondicion','main.py',332),
  ('valorForCondicion -> DOUBLE','valorForCondicion',1,'p_valorForCondicion','main.py',333),
  ('valorForCondicion -> INT','valorForCondicion',1,'p_valorForCondicion','main.py',334),
  ('valorForCondicion -> IDENTIFICADOR','valorForCondicion',1,'p_valorForCondicion','main.py',335),
  ('forInicializador -> tipoDatoForInicializador IDENTIFICADOR IGUAL valorForInicializador','forInicializador',4,'p_forInicializador','main.py',341),
  ('forInicializador -> IDENTIFICADOR IGUAL valorForInicializador','forInicializador',3,'p_forInicializador','main.py',342),
  ('tipoDatoForInicializador -> FLOAT_TYPE','tipoDatoForInicializador',1,'p_tipoDatoForInicializador','main.py',347),
  ('tipoDatoForInicializador -> DOUBLE_TYPE','tipoDatoForInicializador',1,'p_tipoDatoForInicializador','main.py',348),
  ('tipoDatoForInicializador -> INT_TYPE','tipoDatoForInicializador',1,'p_tipoDatoForInicializador','main.py',349),
  ('valorForInicializador -> FLOAT','valorForInicializador',1,'p_valorForInicializador','main.py',353),
  ('valorForInicializador -> DOUBLE','valorForInicializador',1,'p_valorForInicializador','main.py',354),
  ('valorForInicializador -> INT','valorForInicializador',1,'p_valorForInicializador','main.py',355),
  ('valorForInicializador -> IDENTIFICADOR','valorForInicializador',1,'p_valorForInicializador','main.py',356),
  ('estructura_datos -> lista','estructura_datos',1,'p_estructura_datos','main.py',368),
  ('estructura_datos -> pila','estructura_datos',1,'p_estructura_datos','main.py',369),
  ('lista -> LIST tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINE','lista',10,'p_lista','main.py',373),
  ('tipoLista -> MENOR_QUE valor_tipo_inicializador MAYOR_QUE','tipoLista',3,'p_tipoLista','main.py',376),
  ('pila -> STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL NEW STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINE','pila',14,'p_pila','main.py',381),
  ('funciones_estructura_datos -> stack_push','funciones_estructura_datos',1,'p_funciones_estructura_datos','main.py',384),
  ('funciones_estructura_datos -> stack_pop','funciones_estructura_datos',1,'p_funciones_estructura_datos','main.py',385),
  ('stack_push -> IDENTIFICADOR PUNTO PUSH PAR_IZQ valor PAR_DER','stack_push',6,'p_stack_push','main.py',389),
  ('stack_pop -> IDENTIFICADOR PUNTO POP PAR_IZQ PAR_DER','stack_pop',5,'p_stack_pop','main.py',392),
  ('expresion -> expresion_operacion_aritmetica','expresion',1,'p_expresion','main.py',402),
  ('expresion -> expresion_condicional','expresion',1,'p_expresion','main.py',403),
  ('expresion_operacion_aritmetica -> numero operador_aritmentico numero','expresion_operacion_aritmetica',3,'p_expresion_operacion_aritmetica','main.py',407),
  ('expresion_operacion_aritmetica -> numero operador_aritmentico IDENTIFICADOR','expresion_operacion_aritmetica',3,'p_expresion_operacion_aritmetica','main.py',408),
  ('expresion_operacion_aritmetica -> IDENTIFICADOR operador_aritmentico numero','expresion_operacion_aritmetica',3,'p_expresion_operacion_aritmetica','main.py',409),
  ('expresion_operacion_aritmetica -> IDENTIFICADOR operador_aritmentico IDENTIFICADOR','expresion_operacion_aritmetica',3,'p_expresion_operacion_aritmetica','main.py',410),
  ('expresion_condicional -> numero operador_condicional numero','expresion_condicional',3,'p_expresion_condicional','main.py',414),
  ('expresion_condicional -> IDENTIFICADOR operador_condicional IDENTIFICADOR','expresion_condicional',3,'p_expresion_condicional','main.py',415),
  ('expresion_condicional -> IDENTIFICADOR operador_condicional numero','expresion_condicional',3,'p_expresion_condicional','main.py',416),
  ('expresion_condicional -> numero operador_condicional IDENTIFICADOR','expresion_condicional',3,'p_expresion_condicional','main.py',417),
  ('salida_entrada -> salida_uno','salida_entrada',1,'p_salida_entrada','main.py',428),
  ('salida_entrada -> salida_dos','salida_entrada',1,'p_salida_entrada','main.py',429),
  ('salida_entrada -> salida_tres','salida_entrada',1,'p_salida_entrada','main.py',430),
  ('salida_uno -> CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER','salida_uno',4,'p_salida_uno','main.py',434),
  ('salida_uno -> CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER','salida_uno',4,'p_salida_uno','main.py',435),
  ('salida_uno -> CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER','salida_uno',4,'p_salida_uno','main.py',436),
  ('salida_dos -> CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER','salida_dos',5,'p_salida_dos','main.py',439),
  ('salida_tres -> CONSOLE_READLINE PAR_IZQ PAR_DER','salida_tres',3,'p_salida_tres','main.py',442),
  ('funcion -> funcion_tipo_uno','funcion',1,'p_funcion','main.py',452),
  ('funcion -> funcion_tipo_tres','funcion',1,'p_funcion','main.py',453),
  ('funcion_tipo_uno -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ body LLAVE_DER','funcion_tipo_uno',8,'p_funcion_tipo_uno','main.py',457),
  ('funcion_tipo_tres -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ parametrosF PAR_DER LLAVE_IZQ bodyF LLAVE_DER','funcion_tipo_tres',9,'p_funcion_tipo_tres','main.py',463),
  ('parametrosF -> declaracion','parametrosF',1,'p_parametrosF','main.py',466),
  ('parametrosF -> declaracion COMA parametrosF','parametrosF',3,'p_parametrosF','main.py',467),
  ('bodyF -> asignacion END_OF_LINE','bodyF',2,'p_bodyF','main.py',471),
  ('bodyF -> declaracion END_OF_LINE','bodyF',2,'p_bodyF','main.py',472),
  ('bodyF -> salida_entrada END_OF_LINE','bodyF',2,'p_bodyF','main.py',473),
  ('bodyF -> asignacion END_OF_LINE bodyF','bodyF',3,'p_bodyF','main.py',474),
  ('bodyF -> declaracion END_OF_LINE bodyF','bodyF',3,'p_bodyF','main.py',475),
  ('bodyF -> salida_entrada END_OF_LINE bodyF','bodyF',3,'p_bodyF','main.py',476),
]
