
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD AND AND_EQUAL AUMENTADO BOOL BOOL_TYPE BREAK BYTE CASE CHAR CHAR_TYPE CLASS COMA COMILLA_DOBLE COMILLA_SIMPLE CONSOLE_READLINE CONSOLE_WRITELINE CONST CONTINUE COR_DER COR_IZQ C_CADENA_INTERPOLADA C_IDENT_TEXTUAL DECREMENTADO DECREMENTO DEFAULT DIVIDIDO_POR DIVISION DO DOS_PUNTOS DOUBLE DOUBLE_TYPE ELSE END_OF_LINE EXC_OREQUAL FINALLY FLOAT FLOAT_TYPE FOR GLOBAL IDENTIFICADOR IGUAL IGUAL_IGUAL IN INCREMENTO INT INT_TYPE IR LAMBDA LEFTSHIFT_EQUAL LET LIST LLAVE_DER LLAVE_IZQ MAYOR_O_IGUAL_QUE MAYOR_QUE MENOR_O_IGUAL_QUE MENOR_QUE MODULO MODULO_DE MULTIPLICACION MULTIPLICADO_POR NEGACION NEW NOR NO_IGUAL NULL NULL_EQUAL NULL_VAL OBJECT ON OP_TERNARIO OR ORDERBY OR_EQUAL PAR_DER PAR_IZQ POP PRIVATE PROTECTED PUBLIC PUNTO PUSH QUEUE REF RESTA RETURN RIGHTSHIFT_EQUAL SHIFT_MAYOR SHIFT_MENOR SIMPLE_AND SIMPLE_OR STACK STRING STRING_TYPE STRUCT SUMA SWITCH THIS TO_UPPER TYPEOF VAR VOID WHEN WHERE WHILEbody : asignacion END_OF_LINE\n  | comparacion\n  | estructura_control\n  | estructura_datos\n  | expresion END_OF_LINE\n  | salida_entrada END_OF_LINE\n  | funcion\n  | declaracion END_OF_LINE\n  | empty\n  | funciones_estructura_datos END_OF_LINE\n  | lambda_exp\n  valor : CHAR\n  | numero\n  | BOOL\n  | STRING\n  | IDENTIFICADOR\n  numero : FLOAT\n  | DOUBLE\n  | INT\n  ftipo : valor_tipo\n                   | VOID\n    valor_tipo : CHAR_TYPE\n  | FLOAT_TYPE\n  | DOUBLE_TYPE\n  | INT_TYPE\n  | BOOL_TYPE\n  | STRING_TYPE\n  valor_tipo_inicializador : FLOAT_TYPE\n    | DOUBLE_TYPE\n    | STRING_TYPE\n    | INT_TYPE\n    | BOOL_TYPE\n    | CHAR_TYPE\n    | IDENTIFICADORmodificador_acceso : PRIVATE\n  | PROTECTED\n  | PUBLIC\n  operador_realacional : IGUAL_IGUAL\n  | NO_IGUAL \n  | MENOR_QUE\n  | MENOR_O_IGUAL_QUE\n  | MAYOR_QUE\n  | MAYOR_O_IGUAL_QUE\n  operador_aritmentico : SUMA\n  | RESTA\n  | MULTIPLICACION\n  | DIVISION\n  | MODULO\n  operador_condicional : IGUAL_IGUAL\n  | NO_IGUAL\n  | MENOR_QUE\n  | MENOR_O_IGUAL_QUE\n  | MAYOR_QUE\n  | MAYOR_O_IGUAL_QUE\n  operacion_string : STRING SUMA STRING\n    | STRING SUMA IDENTIFICADOR\n    | IDENTIFICADOR SUMA STRING\n    | IDENTIFICADOR SUMA IDENTIFICADORempty : END_OF_LINEasignacion : asignacionSimple\n                | asignacionCompuesta\n                | asignacionClase\n                | asignacionEstructuraD\n                | asignacionNull\n                | asignacionIndex\n                | asignacionRef\n   asignacionSimple : IDENTIFICADOR IGUAL valor\n                      | IDENTIFICADOR IGUAL expresion\n                      | IDENTIFICADOR IGUAL salida_tres\n                      | IDENTIFICADOR IGUAL index\n  asignacionNull : IDENTIFICADOR IGUAL NULLasignacionClase : IDENTIFICADOR IGUAL NEW IDENTIFICADOR PAR_IZQ PAR_DERasignacionEstructuraD : IDENTIFICADOR IGUAL asignacionPila\n                            | IDENTIFICADOR IGUAL asignacionQueue\n                            | IDENTIFICADOR IGUAL asignacionList\n    asignacionPila : NEW STACK tipoLista PAR_IZQ PAR_DERasignacionQueue : NEW QUEUE tipoLista PAR_IZQ PAR_DERasignacionList : NEW LIST tipoLista PAR_IZQ PAR_DERasignacionIndex : index IGUAL index\n                       | index IGUAL valor\n    index : IDENTIFICADOR COR_IZQ INT COR_DER\n            | IDENTIFICADOR COR_IZQ IDENTIFICADOR COR_DER\n    asignacionRef : IDENTIFICADOR IGUAL REF IDENTIFICADOR\n                    | IDENTIFICADOR IGUAL REF index\n    asignacionCompuesta : asignacionCompuesta_Logic\n                        | asignacionCompuesta_Number\n                        | asignacionCompuesta_Null\n                        | asignacionCompuesta_Shift\n  asignacionCompuesta_Logic : IDENTIFICADOR operadoresCompuestosLogic BOOL\n                               | IDENTIFICADOR operadoresCompuestosLogic expresion_condicional\n                               | IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR\n                               | IDENTIFICADOR operadoresCompuestosLogic INT\n  asignacionCompuesta_Number : IDENTIFICADOR operadoresCompuestosNumber numero\n                                | IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica\n                                | IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR\n  asignacionCompuesta_Null : IDENTIFICADOR NULL_EQUAL valor\n                                | IDENTIFICADOR NULL_EQUAL expresion\n                                | IDENTIFICADOR NULL_EQUAL asignacionPila\n                                | IDENTIFICADOR NULL_EQUAL asignacionQueue\n                                | IDENTIFICADOR NULL_EQUAL asignacionListasignacionCompuesta_Shift : IDENTIFICADOR operadoresCompuestosShift IDENTIFICADOR\n                                | IDENTIFICADOR operadoresCompuestosShift INT\n     operadoresCompuestosNumber : AUMENTADO\n                          | DECREMENTADO\n                          | MULTIPLICADO_POR\n                          | DIVIDIDO_POR\n                          | MODULO_DE\n   operadoresCompuestosLogic : AND_EQUAL\n                                | OR_EQUAL\n                                | EXC_OREQUAL\n  operadoresCompuestosShift : LEFTSHIFT_EQUAL\n                                | RIGHTSHIFT_EQUAL\n    declaracion : valor_tipo IDENTIFICADOR\n                 | declaracionEstructuraD\n                 | declaracionAsignacion\n                 | declaracionClase\n                 | declaracionNull\n  declaracionNull : valor_tipo OP_TERNARIO IDENTIFICADORdeclaracionClase : IDENTIFICADOR IDENTIFICADOR declaracionAsignacion : valor_tipo asignacionSimple\n                            | declaracionClase IGUAL NEW IDENTIFICADOR PAR_IZQ PAR_DER\n                            | declaracionClase IGUAL NULL\n                            | declaracionClase IGUAL IDENTIFICADOR\n                            | declaracionNull IGUAL valor\n                            | declaracionNull IGUAL expresion\n                            | declaracionNull IGUAL NULL\n                            | declaracionEstructuraD IGUAL NULL\n                            | REF valor_tipo asignacionRef\n                            | REF IDENTIFICADOR asignacionRef\n                            | REF declaracionEstructuraD asignacionRef\n\n  declaracionEstructuraD : declaracionList\n                              | declaracionQueue\n                              | declaracionPila\n    declaracionList : LIST tipoLista IDENTIFICADORdeclaracionQueue : QUEUE tipoLista IDENTIFICADORdeclaracionPila : STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADORcomparacion : valor operador_realacional valorestructura_control : while\n  | switch_case\n  | for\n  while : while_normal\n           | while_do\n  while_normal : WHILE PAR_IZQ expresion_condicional PAR_DER LLAVE_IZQ body_while LLAVE_DERwhile_do : DO LLAVE_IZQ body_while LLAVE_DER WHILE PAR_IZQ expresion_condicional PAR_DER END_OF_LINEbody_while : asignacion END_OF_LINE\n                  | declaracion END_OF_LINE\n                  | salida_entrada END_OF_LINE\n                  | BREAK END_OF_LINE\n                  | CONTINUE END_OF_LINE\n                  | asignacion END_OF_LINE body_while\n                  | declaracion END_OF_LINE body_while\n                  | salida_entrada END_OF_LINE body_while\n                  | BREAK END_OF_LINE body_while\n                  | CONTINUE END_OF_LINE body_while\n\n    switch_case : SWITCH PAR_IZQ valor PAR_DER LLAVE_IZQ casos LLAVE_DERcasos : CASE valor DOS_PUNTOS body_case BREAK END_OF_LINE\n  | CASE valor DOS_PUNTOS BREAK END_OF_LINE\n  | CASE valor DOS_PUNTOS body_case BREAK END_OF_LINE casos\n  | CASE valor DOS_PUNTOS BREAK END_OF_LINE casos\n  body_case : asignacion END_OF_LINE\n  | declaracion END_OF_LINE\n  | comparacion END_OF_LINE\n  | salida_entrada END_OF_LINE\n  | asignacion END_OF_LINE body_case\n  | declaracion END_OF_LINE body_case\n  | salida_entrada END_OF_LINE body_case\n  | comparacion END_OF_LINE body_case\n  for : FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DERforIterador : IDENTIFICADOR operadorForIteracionoperadorForIteracion : INCREMENTO \n                            | DECREMENTOforCondicion : IDENTIFICADOR operador_condicional valorForCondicionvalorForCondicion : FLOAT\n            | DOUBLE\n            | INT\n            | IDENTIFICADORforInicializador : tipoDatoForInicializador IDENTIFICADOR IGUAL valorForInicializador\n                    | IDENTIFICADOR IGUAL valorForInicializadortipoDatoForInicializador : FLOAT_TYPE\n                        | DOUBLE_TYPE\n                        | INT_TYPEvalorForInicializador : FLOAT\n            | DOUBLE\n            | INT\n            | IDENTIFICADORestructura_datos : lista\n                      | pila\n  lista : LIST tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINEtipoLista : MENOR_QUE valor_tipo_inicializador MAYOR_QUEpila : STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL NEW STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINEfunciones_estructura_datos : stack_push\n                                  | stack_pop\n    stack_push : IDENTIFICADOR PUNTO PUSH PAR_IZQ valor PAR_DER\n                  | IDENTIFICADOR PUNTO PUSH PAR_IZQ NEW IDENTIFICADOR PAR_IZQ PAR_DER PAR_DER\n    stack_pop : IDENTIFICADOR PUNTO POP PAR_IZQ PAR_DERexpresion : expresion_operacion_aritmetica\n  | expresion_condicional\n  expresion_operacion_aritmetica : numero operador_aritmentico numero\n  | numero operador_aritmentico IDENTIFICADOR\n  | IDENTIFICADOR operador_aritmentico numero\n  | IDENTIFICADOR operador_aritmentico IDENTIFICADOR\n  expresion_condicional : numero operador_condicional numero\n  | IDENTIFICADOR operador_condicional IDENTIFICADOR\n  | IDENTIFICADOR operador_condicional numero\n  | numero operador_condicional IDENTIFICADOR\n  salida_entrada : salida_uno\n                    | salida_dos\n                    | salida_tressalida_uno : CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER\n                    | CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER\n                    | CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DERsalida_dos : CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DERsalida_tres : CONSOLE_READLINE PAR_IZQ PAR_DERfuncion : funcion_tipo_uno\n             | funcion_tipo_tres\n  funcion_tipo_uno : modificador_acceso VOID IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ body LLAVE_DERfuncion_tipo_tres : modificador_acceso VOID IDENTIFICADOR PAR_IZQ parametrosF PAR_DER LLAVE_IZQ bodyF LLAVE_DERparametrosF : declaracion\n                 | declaracion COMA parametrosF\n  bodyF : asignacion END_OF_LINE\n            | declaracion END_OF_LINE\n            | salida_entrada END_OF_LINE\n            | asignacion END_OF_LINE bodyF\n            | declaracion END_OF_LINE bodyF\n            | salida_entrada END_OF_LINE bodyFlambda_exp : lambdaArg LAMBDA lambdaCuerpolambdaArg : PAR_IZQ PAR_DER\n            | PAR_IZQ lambdaParametrosUno PAR_DER\n            | PAR_IZQ lambdaParametrosDos PAR_DER\n            | IDENTIFICADOR\n    lambdaParametrosUno : valor_tipo IDENTIFICADOR\n                        | valor_tipo IDENTIFICADOR COMA lambdaParametrosUno\n    lambdaParametrosDos : IDENTIFICADOR\n                        |  IDENTIFICADOR COMA lambdaParametrosDos\n    lambdaCuerpo : expresion\n                    | salida_uno\n                    | salida_dos\n    '
    
_lr_action_items = {'END_OF_LINE':([0,2,7,8,10,12,14,15,16,17,18,19,20,27,28,29,30,31,36,37,38,39,40,41,44,45,46,47,50,51,52,53,69,70,71,72,73,74,93,94,96,155,156,157,159,160,161,162,163,164,166,167,168,169,171,172,173,174,177,178,179,180,182,183,184,185,186,187,188,189,190,192,193,196,198,199,200,201,202,209,210,211,216,218,219,222,223,224,225,227,233,247,252,253,254,255,256,258,263,264,267,268,273,282,284,285,302,307,310,311,312,313,314,316,321,333,337,339,340,345,348,353,354,355,361,362,363,364,365,383,384,385,386,387,389,390,391,392,393,395,396,403,425,],[3,81,82,83,84,85,-60,-61,-62,-63,-64,-65,-66,-196,-197,-206,-207,-208,-114,-115,-116,-117,-191,-192,-85,-86,-87,-88,-12,-13,-14,-15,-131,-132,-133,-19,-17,-18,-113,-120,-119,-137,-13,-16,-118,-16,-67,-68,-69,-70,-73,-74,-75,-71,-201,-200,-203,-204,-91,-89,-90,-92,-95,-93,-94,-16,-96,-97,-98,-99,-100,-101,-102,-127,-123,-122,-124,-125,-126,-79,-80,-16,-128,-129,-130,-198,-199,-202,-205,276,-134,-213,291,292,293,294,295,-135,-83,-84,-82,-81,-134,-209,-210,-211,-195,343,-185,-178,-182,-183,-184,-136,-212,-72,-193,-121,-136,-177,3,-76,-77,-78,-176,-172,-173,-174,-175,399,400,401,402,-194,404,405,406,407,408,3,410,415,426,]),'IDENTIFICADOR':([0,34,35,48,49,63,64,65,66,67,68,69,70,71,86,87,88,89,90,91,92,95,97,98,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,128,129,130,131,135,137,138,139,142,143,144,145,146,147,148,149,151,152,153,154,158,165,170,197,215,220,221,228,230,231,232,257,258,265,273,276,278,280,281,283,286,288,291,292,293,294,295,301,305,309,322,326,340,342,343,344,348,350,352,369,374,394,395,397,399,400,401,405,406,407,408,],[35,93,96,136,138,-22,-23,-24,-25,-26,-27,-131,-132,-133,157,-38,-39,-40,-41,-42,-43,159,160,171,173,177,182,185,192,194,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-108,-109,-110,-103,-104,-105,-106,-107,-111,-112,198,185,207,211,214,217,217,217,223,225,157,229,233,241,241,245,248,250,257,258,160,259,263,269,136,273,241,277,-179,-180,-181,96,-135,157,-134,308,310,-189,316,318,319,322,257,257,257,257,257,338,340,310,96,257,-136,157,360,361,35,322,250,257,394,96,35,241,257,257,257,394,394,394,394,]),'CHAR':([0,86,87,88,89,90,91,92,97,103,129,131,144,158,265,342,348,374,395,405,406,407,408,],[50,50,-38,-39,-40,-41,-42,-43,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'BOOL':([0,86,87,88,89,90,91,92,97,101,103,117,118,119,129,131,144,158,265,342,348,374,395,405,406,407,408,],[52,52,-38,-39,-40,-41,-42,-43,52,178,52,-108,-109,-110,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'STRING':([0,86,87,88,89,90,91,92,97,103,129,131,144,149,158,246,265,283,286,342,348,374,395,405,406,407,408,],[53,53,-38,-39,-40,-41,-42,-43,53,53,53,53,53,243,53,287,53,317,320,53,53,53,53,53,53,53,53,]),'SWITCH':([0,348,395,],[56,56,56,]),'FOR':([0,348,395,],[57,57,57,]),'LIST':([0,49,153,165,191,288,291,292,293,294,295,315,326,348,350,369,374,395,399,400,401,405,406,407,408,],[58,140,140,262,262,140,140,140,140,140,140,346,140,58,140,140,140,58,140,140,140,140,140,140,140,]),'STACK':([0,49,153,165,191,288,291,292,293,294,295,326,348,350,367,369,374,395,399,400,401,405,406,407,408,],[59,141,141,260,260,141,141,141,141,141,141,141,59,141,380,141,141,59,141,141,141,141,141,141,141,]),'CONSOLE_WRITELINE':([0,130,153,291,292,293,294,295,326,348,369,374,395,399,400,401,405,406,407,408,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'CONSOLE_READLINE':([0,97,153,158,291,292,293,294,295,326,348,369,374,395,399,400,401,405,406,407,408,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'CHAR_TYPE':([0,48,49,147,148,153,221,270,288,291,292,293,294,295,326,348,350,369,374,395,397,399,400,401,405,406,407,408,],[63,63,63,240,240,63,240,63,63,63,63,63,63,63,63,63,63,63,63,63,240,63,63,63,63,63,63,63,]),'FLOAT_TYPE':([0,48,49,145,147,148,153,221,270,288,291,292,293,294,295,326,348,350,369,374,395,397,399,400,401,405,406,407,408,],[64,64,64,230,235,235,64,235,64,64,64,64,64,64,64,64,64,64,64,64,64,235,64,64,64,64,64,64,64,]),'DOUBLE_TYPE':([0,48,49,145,147,148,153,221,270,288,291,292,293,294,295,326,348,350,369,374,395,397,399,400,401,405,406,407,408,],[65,65,65,231,236,236,65,236,65,65,65,65,65,65,65,65,65,65,65,65,65,236,65,65,65,65,65,65,65,]),'INT_TYPE':([0,48,49,145,147,148,153,221,270,288,291,292,293,294,295,326,348,350,369,374,395,397,399,400,401,405,406,407,408,],[66,66,66,232,238,238,66,238,66,66,66,66,66,66,66,66,66,66,66,66,66,238,66,66,66,66,66,66,66,]),'BOOL_TYPE':([0,48,49,147,148,153,221,270,288,291,292,293,294,295,326,348,350,369,374,395,397,399,400,401,405,406,407,408,],[67,67,67,239,239,67,239,67,67,67,67,67,67,67,67,67,67,67,67,67,239,67,67,67,67,67,67,67,]),'STRING_TYPE':([0,48,49,147,148,153,221,270,288,291,292,293,294,295,326,348,350,369,374,395,397,399,400,401,405,406,407,408,],[68,68,68,237,237,68,237,68,68,68,68,68,68,68,68,68,68,68,68,68,237,68,68,68,68,68,68,68,]),'REF':([0,97,153,272,288,291,292,293,294,295,326,348,350,369,374,395,399,400,401,405,406,407,408,],[49,170,49,170,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'PAR_IZQ':([0,56,57,60,61,75,175,176,248,259,269,280,297,298,299,327,338,348,366,395,422,],[48,144,145,149,150,152,265,266,288,296,303,-189,334,335,336,352,356,48,379,48,424,]),'FLOAT':([0,86,87,88,89,90,91,92,97,98,99,101,102,103,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,129,130,131,142,143,144,152,158,265,278,309,342,344,348,352,374,395,405,406,407,408,],[73,73,-38,-39,-40,-41,-42,-43,73,73,73,73,73,73,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-108,-109,-110,-103,-104,-105,-106,-107,73,73,73,73,73,73,73,73,73,312,312,73,363,73,73,73,73,73,73,73,73,]),'DOUBLE':([0,86,87,88,89,90,91,92,97,98,99,101,102,103,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,129,130,131,142,143,144,152,158,265,278,309,342,344,348,352,374,395,405,406,407,408,],[74,74,-38,-39,-40,-41,-42,-43,74,74,74,74,74,74,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-108,-109,-110,-103,-104,-105,-106,-107,74,74,74,74,74,74,74,74,74,313,313,74,364,74,74,74,74,74,74,74,74,]),'INT':([0,86,87,88,89,90,91,92,97,98,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,129,130,131,142,143,144,152,158,265,278,309,342,344,348,352,374,395,405,406,407,408,],[72,72,-38,-39,-40,-41,-42,-43,72,72,72,180,72,72,193,195,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-108,-109,-110,-103,-104,-105,-106,-107,-111,-112,72,72,72,72,72,72,72,72,72,314,314,72,365,72,72,72,72,72,72,72,72,]),'WHILE':([0,290,348,395,],[75,327,75,75,]),'DO':([0,348,395,],[76,76,76,]),'PRIVATE':([0,348,395,],[77,77,77,]),'PROTECTED':([0,348,395,],[78,78,78,]),'PUBLIC':([0,348,395,],[79,79,79,]),'QUEUE':([0,49,153,165,191,288,291,292,293,294,295,326,348,350,369,374,395,399,400,401,405,406,407,408,],[80,80,80,261,261,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'$end':([1,3,4,5,6,9,11,13,22,23,24,25,26,27,28,32,33,50,52,53,54,55,72,73,74,81,82,83,84,85,155,156,157,171,172,173,174,203,204,205,206,222,223,224,225,282,284,285,321,357,371,381,398,402,410,421,426,],[0,-59,-2,-3,-4,-7,-9,-11,-138,-139,-140,-186,-187,-196,-197,-214,-215,-12,-14,-15,-141,-142,-19,-17,-18,-1,-5,-6,-8,-10,-137,-13,-16,-201,-200,-203,-204,-226,-235,-236,-237,-198,-199,-202,-205,-209,-210,-211,-212,-155,-143,-216,-217,-144,-188,-168,-190,]),'LLAVE_DER':([3,4,5,6,9,11,13,22,23,24,25,26,27,28,32,33,50,52,53,54,55,72,73,74,81,82,83,84,85,155,156,157,171,172,173,174,203,204,205,206,222,223,224,225,251,282,284,285,291,292,293,294,295,321,328,329,330,331,332,341,351,357,368,371,381,382,398,399,400,401,402,404,409,410,412,413,414,415,416,421,423,426,],[-59,-2,-3,-4,-7,-9,-11,-138,-139,-140,-186,-187,-196,-197,-214,-215,-12,-14,-15,-141,-142,-19,-17,-18,-1,-5,-6,-8,-10,-137,-13,-16,-201,-200,-203,-204,-226,-235,-236,-237,-198,-199,-202,-205,290,-209,-210,-211,-145,-146,-147,-148,-149,-212,-150,-151,-152,-153,-154,357,371,-155,381,-143,-216,398,-217,-220,-221,-222,-144,-157,421,-188,-223,-224,-225,-156,-159,-168,-158,-190,]),'IGUAL_IGUAL':([21,35,50,51,52,53,72,73,74,156,160,177,180,181,185,207,208,250,308,394,],[87,111,-12,111,-14,-15,-19,-17,-18,-13,111,111,-19,111,111,111,111,111,111,-16,]),'NO_IGUAL':([21,35,50,51,52,53,72,73,74,156,160,177,180,181,185,207,208,250,308,394,],[88,112,-12,112,-14,-15,-19,-17,-18,-13,112,112,-19,112,112,112,112,112,112,-16,]),'MENOR_QUE':([21,35,50,51,52,53,58,59,72,73,74,80,140,141,156,160,177,180,181,185,207,208,250,260,261,262,308,346,380,394,],[89,113,-12,113,-14,-15,147,148,-19,-17,-18,147,147,221,-13,113,113,-19,113,113,113,113,113,147,147,147,113,147,397,-16,]),'MENOR_O_IGUAL_QUE':([21,35,50,51,52,53,72,73,74,156,160,177,180,181,185,207,208,250,308,394,],[90,114,-12,114,-14,-15,-19,-17,-18,-13,114,114,-19,114,114,114,114,114,114,-16,]),'MAYOR_QUE':([21,35,50,51,52,53,72,73,74,156,160,177,180,181,185,207,208,234,235,236,237,238,239,240,241,242,250,274,308,394,411,],[91,115,-12,115,-14,-15,-19,-17,-18,-13,115,115,-19,115,115,115,115,280,-28,-29,-30,-31,-32,-33,-34,281,115,305,115,-16,422,]),'MAYOR_O_IGUAL_QUE':([21,35,50,51,52,53,72,73,74,156,160,177,180,181,185,207,208,250,308,394,],[92,116,-12,116,-14,-15,-19,-17,-18,-13,116,116,-19,116,116,116,116,116,116,-16,]),'COMA':([27,28,36,37,38,39,50,51,52,53,69,70,71,72,73,74,93,94,96,136,159,160,161,162,163,164,171,172,173,174,185,196,198,199,200,201,202,214,216,218,219,222,223,224,225,247,258,263,264,267,268,273,325,339,340,],[-196,-197,-114,-115,-116,-117,-12,-13,-14,-15,-131,-132,-133,-19,-17,-18,-113,-120,-119,215,-118,-16,-67,-68,-69,-70,-201,-200,-203,-204,-16,-127,-123,-122,-124,-125,-126,270,-128,-129,-130,-198,-199,-202,-205,-213,-135,-83,-84,-82,-81,-134,350,-121,-136,]),'PAR_DER':([27,28,36,37,38,39,48,50,51,52,53,69,70,71,72,73,74,93,94,96,133,134,136,150,156,157,159,160,161,162,163,164,171,172,173,174,185,196,198,199,200,201,202,214,216,218,219,222,223,224,225,226,243,244,245,247,249,258,263,264,266,267,268,271,273,287,288,296,300,303,304,317,318,319,320,324,325,334,335,336,339,340,356,359,370,372,373,376,377,378,379,424,],[-196,-197,-114,-115,-116,-117,132,-12,-13,-14,-15,-131,-132,-133,-19,-17,-18,-113,-120,-119,212,213,-233,247,-13,-16,-118,-16,-67,-68,-69,-70,-201,-200,-203,-204,-16,-127,-123,-122,-124,-125,-126,-231,-128,-129,-130,-198,-199,-202,-205,275,282,284,285,-213,289,-135,-83,-84,302,-82,-81,-234,-134,321,323,333,337,339,-232,-55,-56,-58,-57,349,-218,353,354,355,-121,-136,373,375,-219,386,387,-169,-170,-171,396,425,]),'OP_TERNARIO':([34,63,64,65,66,67,68,],[95,-22,-23,-24,-25,-26,-27,]),'IGUAL':([35,36,38,39,43,69,70,71,93,96,159,217,229,233,257,258,267,268,273,277,316,340,394,],[97,127,128,129,131,-131,-132,-133,158,-119,-118,272,278,279,97,-135,-82,-81,-134,309,347,-136,97,]),'PUNTO':([35,],[100,]),'LAMBDA':([35,42,132,212,213,],[-230,130,-227,-228,-229,]),'NULL_EQUAL':([35,257,394,],[103,103,103,]),'COR_IZQ':([35,160,211,257,263,394,],[105,105,105,105,105,105,]),'SUMA':([35,51,72,73,74,160,182,183,185,207,208,243,245,],[106,106,-19,-17,-18,106,106,106,106,106,106,283,286,]),'RESTA':([35,51,72,73,74,160,182,183,185,207,208,],[107,107,-19,-17,-18,107,107,107,107,107,107,]),'MULTIPLICACION':([35,51,72,73,74,160,182,183,185,207,208,],[108,108,-19,-17,-18,108,108,108,108,108,108,]),'DIVISION':([35,51,72,73,74,160,182,183,185,207,208,],[109,109,-19,-17,-18,109,109,109,109,109,109,]),'MODULO':([35,51,72,73,74,160,182,183,185,207,208,],[110,110,-19,-17,-18,110,110,110,110,110,110,]),'AND_EQUAL':([35,257,394,],[117,117,117,]),'OR_EQUAL':([35,257,394,],[118,118,118,]),'EXC_OREQUAL':([35,257,394,],[119,119,119,]),'AUMENTADO':([35,257,394,],[120,120,120,]),'DECREMENTADO':([35,257,394,],[121,121,121,]),'MULTIPLICADO_POR':([35,257,394,],[122,122,122,]),'DIVIDIDO_POR':([35,257,394,],[123,123,123,]),'MODULO_DE':([35,257,394,],[124,124,124,]),'LEFTSHIFT_EQUAL':([35,257,394,],[125,125,125,]),'RIGHTSHIFT_EQUAL':([35,257,394,],[126,126,126,]),'DOS_PUNTOS':([50,52,53,72,73,74,156,157,358,],[-12,-14,-15,-19,-17,-18,-13,-16,374,]),'VOID':([62,77,78,79,],[151,-35,-36,-37,]),'LLAVE_IZQ':([76,275,289,323,349,375,],[153,306,326,348,369,395,]),'NEW':([97,103,128,265,279,347,],[165,191,197,301,315,367,]),'NULL':([97,127,128,129,],[169,196,199,202,]),'PUSH':([100,],[175,]),'POP':([100,],[176,]),'C_CADENA_INTERPOLADA':([149,],[246,]),'BREAK':([153,291,292,293,294,295,326,374,388,405,406,407,408,417,418,419,420,],[255,255,255,255,255,255,255,389,403,-160,-161,-162,-163,-164,-165,-167,-166,]),'CONTINUE':([153,291,292,293,294,295,326,],[256,256,256,256,256,256,256,]),'COR_DER':([194,195,],[267,268,]),'CASE':([306,404,415,],[342,342,342,]),'INCREMENTO':([360,],[377,]),'DECREMENTO':([360,],[378,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'body':([0,348,395,],[1,368,409,]),'asignacion':([0,153,291,292,293,294,295,326,348,369,374,395,399,400,401,405,406,407,408,],[2,252,252,252,252,252,252,252,2,383,390,2,383,383,383,390,390,390,390,]),'comparacion':([0,348,374,395,405,406,407,408,],[4,4,392,4,392,392,392,392,]),'estructura_control':([0,348,395,],[5,5,5,]),'estructura_datos':([0,348,395,],[6,6,6,]),'expresion':([0,97,103,129,130,158,348,395,],[7,162,187,201,204,162,7,7,]),'salida_entrada':([0,153,291,292,293,294,295,326,348,369,374,395,399,400,401,405,406,407,408,],[8,254,254,254,254,254,254,254,8,385,393,8,385,385,385,393,393,393,393,]),'funcion':([0,348,395,],[9,9,9,]),'declaracion':([0,153,288,291,292,293,294,295,326,348,350,369,374,395,399,400,401,405,406,407,408,],[10,253,325,253,253,253,253,253,253,10,325,384,391,10,384,384,384,391,391,391,391,]),'empty':([0,348,395,],[11,11,11,]),'funciones_estructura_datos':([0,348,395,],[12,12,12,]),'lambda_exp':([0,348,395,],[13,13,13,]),'asignacionSimple':([0,34,153,291,292,293,294,295,326,348,369,374,395,399,400,401,405,406,407,408,],[14,94,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'asignacionCompuesta':([0,153,291,292,293,294,295,326,348,369,374,395,399,400,401,405,406,407,408,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'asignacionClase':([0,153,291,292,293,294,295,326,348,369,374,395,399,400,401,405,406,407,408,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'asignacionEstructuraD':([0,153,291,292,293,294,295,326,348,369,374,395,399,400,401,405,406,407,408,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'asignacionNull':([0,153,291,292,293,294,295,326,348,369,374,395,399,400,401,405,406,407,408,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'asignacionIndex':([0,153,291,292,293,294,295,326,348,369,374,395,399,400,401,405,406,407,408,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'asignacionRef':([0,137,138,139,153,291,292,293,294,295,326,348,369,374,395,399,400,401,405,406,407,408,],[20,216,218,219,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'valor':([0,86,97,103,129,131,144,158,265,342,348,374,395,405,406,407,408,],[21,155,161,186,200,210,226,161,300,358,21,21,21,21,21,21,21,]),'while':([0,348,395,],[22,22,22,]),'switch_case':([0,348,395,],[23,23,23,]),'for':([0,348,395,],[24,24,24,]),'lista':([0,348,395,],[25,25,25,]),'pila':([0,348,395,],[26,26,26,]),'expresion_operacion_aritmetica':([0,97,102,103,129,130,158,348,395,],[27,27,184,27,27,27,27,27,27,]),'expresion_condicional':([0,97,101,103,129,130,152,158,348,352,395,],[28,28,179,28,28,28,249,28,28,372,28,]),'salida_uno':([0,130,153,291,292,293,294,295,326,348,369,374,395,399,400,401,405,406,407,408,],[29,205,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'salida_dos':([0,130,153,291,292,293,294,295,326,348,369,374,395,399,400,401,405,406,407,408,],[30,206,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'salida_tres':([0,97,153,158,291,292,293,294,295,326,348,369,374,395,399,400,401,405,406,407,408,],[31,163,31,163,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'funcion_tipo_uno':([0,348,395,],[32,32,32,]),'funcion_tipo_tres':([0,348,395,],[33,33,33,]),'valor_tipo':([0,48,49,153,270,288,291,292,293,294,295,326,348,350,369,374,395,399,400,401,405,406,407,408,],[34,135,137,34,135,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'declaracionEstructuraD':([0,49,153,288,291,292,293,294,295,326,348,350,369,374,395,399,400,401,405,406,407,408,],[36,139,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'declaracionAsignacion':([0,153,288,291,292,293,294,295,326,348,350,369,374,395,399,400,401,405,406,407,408,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'declaracionClase':([0,153,288,291,292,293,294,295,326,348,350,369,374,395,399,400,401,405,406,407,408,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'declaracionNull':([0,153,288,291,292,293,294,295,326,348,350,369,374,395,399,400,401,405,406,407,408,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'stack_push':([0,348,395,],[40,40,40,]),'stack_pop':([0,348,395,],[41,41,41,]),'lambdaArg':([0,348,395,],[42,42,42,]),'index':([0,97,131,153,158,170,291,292,293,294,295,326,348,369,374,395,399,400,401,405,406,407,408,],[43,164,209,43,164,264,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'asignacionCompuesta_Logic':([0,153,291,292,293,294,295,326,348,369,374,395,399,400,401,405,406,407,408,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'asignacionCompuesta_Number':([0,153,291,292,293,294,295,326,348,369,374,395,399,400,401,405,406,407,408,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'asignacionCompuesta_Null':([0,153,291,292,293,294,295,326,348,369,374,395,399,400,401,405,406,407,408,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'asignacionCompuesta_Shift':([0,153,291,292,293,294,295,326,348,369,374,395,399,400,401,405,406,407,408,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'numero':([0,86,97,98,99,101,102,103,129,130,131,142,143,144,152,158,265,342,348,352,374,395,405,406,407,408,],[51,156,51,172,174,181,183,51,51,208,156,222,224,156,181,51,156,156,51,181,156,51,156,156,156,156,]),'while_normal':([0,348,395,],[54,54,54,]),'while_do':([0,348,395,],[55,55,55,]),'modificador_acceso':([0,348,395,],[62,62,62,]),'declaracionList':([0,49,153,288,291,292,293,294,295,326,348,350,369,374,395,399,400,401,405,406,407,408,],[69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'declaracionQueue':([0,49,153,288,291,292,293,294,295,326,348,350,369,374,395,399,400,401,405,406,407,408,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'declaracionPila':([0,49,153,288,291,292,293,294,295,326,348,350,369,374,395,399,400,401,405,406,407,408,],[71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'operador_realacional':([21,],[86,]),'operador_aritmentico':([35,51,160,182,183,185,207,208,],[98,142,98,98,142,98,98,142,]),'operador_condicional':([35,51,160,177,181,185,207,208,250,308,],[99,143,99,99,143,99,99,143,99,344,]),'operadoresCompuestosLogic':([35,257,394,],[101,101,101,]),'operadoresCompuestosNumber':([35,257,394,],[102,102,102,]),'operadoresCompuestosShift':([35,257,394,],[104,104,104,]),'lambdaParametrosUno':([48,270,],[133,304,]),'lambdaParametrosDos':([48,215,],[134,271,]),'tipoLista':([58,80,140,260,261,262,346,],[146,154,220,297,298,299,366,]),'asignacionPila':([97,103,],[166,188,]),'asignacionQueue':([97,103,],[167,189,]),'asignacionList':([97,103,],[168,190,]),'lambdaCuerpo':([130,],[203,]),'forInicializador':([145,],[227,]),'tipoDatoForInicializador':([145,],[228,]),'valor_tipo_inicializador':([147,148,221,397,],[234,242,274,411,]),'operacion_string':([149,],[244,]),'body_while':([153,291,292,293,294,295,326,],[251,328,329,330,331,332,351,]),'forCondicion':([276,],[307,]),'valorForInicializador':([278,309,],[311,345,]),'parametrosF':([288,350,],[324,370,]),'casos':([306,404,415,],[341,416,423,]),'forIterador':([343,],[359,]),'valorForCondicion':([344,],[362,]),'operadorForIteracion':([360,],[376,]),'bodyF':([369,399,400,401,],[382,412,413,414,]),'body_case':([374,405,406,407,408,],[388,417,418,419,420,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> body","S'",1,None,None,None),
  ('body -> asignacion END_OF_LINE','body',2,'p_body','main.py',6),
  ('body -> comparacion','body',1,'p_body','main.py',7),
  ('body -> estructura_control','body',1,'p_body','main.py',8),
  ('body -> estructura_datos','body',1,'p_body','main.py',9),
  ('body -> expresion END_OF_LINE','body',2,'p_body','main.py',10),
  ('body -> salida_entrada END_OF_LINE','body',2,'p_body','main.py',11),
  ('body -> funcion','body',1,'p_body','main.py',12),
  ('body -> declaracion END_OF_LINE','body',2,'p_body','main.py',13),
  ('body -> empty','body',1,'p_body','main.py',14),
  ('body -> funciones_estructura_datos END_OF_LINE','body',2,'p_body','main.py',15),
  ('body -> lambda_exp','body',1,'p_body','main.py',16),
  ('valor -> CHAR','valor',1,'p_valor','main.py',25),
  ('valor -> numero','valor',1,'p_valor','main.py',26),
  ('valor -> BOOL','valor',1,'p_valor','main.py',27),
  ('valor -> STRING','valor',1,'p_valor','main.py',28),
  ('valor -> IDENTIFICADOR','valor',1,'p_valor','main.py',29),
  ('numero -> FLOAT','numero',1,'p_numero','main.py',33),
  ('numero -> DOUBLE','numero',1,'p_numero','main.py',34),
  ('numero -> INT','numero',1,'p_numero','main.py',35),
  ('ftipo -> valor_tipo','ftipo',1,'p_ftipo','main.py',38),
  ('ftipo -> VOID','ftipo',1,'p_ftipo','main.py',39),
  ('valor_tipo -> CHAR_TYPE','valor_tipo',1,'p_valor_tipo','main.py',43),
  ('valor_tipo -> FLOAT_TYPE','valor_tipo',1,'p_valor_tipo','main.py',44),
  ('valor_tipo -> DOUBLE_TYPE','valor_tipo',1,'p_valor_tipo','main.py',45),
  ('valor_tipo -> INT_TYPE','valor_tipo',1,'p_valor_tipo','main.py',46),
  ('valor_tipo -> BOOL_TYPE','valor_tipo',1,'p_valor_tipo','main.py',47),
  ('valor_tipo -> STRING_TYPE','valor_tipo',1,'p_valor_tipo','main.py',48),
  ('valor_tipo_inicializador -> FLOAT_TYPE','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','main.py',52),
  ('valor_tipo_inicializador -> DOUBLE_TYPE','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','main.py',53),
  ('valor_tipo_inicializador -> STRING_TYPE','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','main.py',54),
  ('valor_tipo_inicializador -> INT_TYPE','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','main.py',55),
  ('valor_tipo_inicializador -> BOOL_TYPE','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','main.py',56),
  ('valor_tipo_inicializador -> CHAR_TYPE','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','main.py',57),
  ('valor_tipo_inicializador -> IDENTIFICADOR','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','main.py',58),
  ('modificador_acceso -> PRIVATE','modificador_acceso',1,'p_modificador_acceso','main.py',61),
  ('modificador_acceso -> PROTECTED','modificador_acceso',1,'p_modificador_acceso','main.py',62),
  ('modificador_acceso -> PUBLIC','modificador_acceso',1,'p_modificador_acceso','main.py',63),
  ('operador_realacional -> IGUAL_IGUAL','operador_realacional',1,'p_operador_realacional','main.py',67),
  ('operador_realacional -> NO_IGUAL','operador_realacional',1,'p_operador_realacional','main.py',68),
  ('operador_realacional -> MENOR_QUE','operador_realacional',1,'p_operador_realacional','main.py',69),
  ('operador_realacional -> MENOR_O_IGUAL_QUE','operador_realacional',1,'p_operador_realacional','main.py',70),
  ('operador_realacional -> MAYOR_QUE','operador_realacional',1,'p_operador_realacional','main.py',71),
  ('operador_realacional -> MAYOR_O_IGUAL_QUE','operador_realacional',1,'p_operador_realacional','main.py',72),
  ('operador_aritmentico -> SUMA','operador_aritmentico',1,'p_operador_aritmentico','main.py',76),
  ('operador_aritmentico -> RESTA','operador_aritmentico',1,'p_operador_aritmentico','main.py',77),
  ('operador_aritmentico -> MULTIPLICACION','operador_aritmentico',1,'p_operador_aritmentico','main.py',78),
  ('operador_aritmentico -> DIVISION','operador_aritmentico',1,'p_operador_aritmentico','main.py',79),
  ('operador_aritmentico -> MODULO','operador_aritmentico',1,'p_operador_aritmentico','main.py',80),
  ('operador_condicional -> IGUAL_IGUAL','operador_condicional',1,'p_operador_condicional','main.py',84),
  ('operador_condicional -> NO_IGUAL','operador_condicional',1,'p_operador_condicional','main.py',85),
  ('operador_condicional -> MENOR_QUE','operador_condicional',1,'p_operador_condicional','main.py',86),
  ('operador_condicional -> MENOR_O_IGUAL_QUE','operador_condicional',1,'p_operador_condicional','main.py',87),
  ('operador_condicional -> MAYOR_QUE','operador_condicional',1,'p_operador_condicional','main.py',88),
  ('operador_condicional -> MAYOR_O_IGUAL_QUE','operador_condicional',1,'p_operador_condicional','main.py',89),
  ('operacion_string -> STRING SUMA STRING','operacion_string',3,'p_operacion_string','main.py',93),
  ('operacion_string -> STRING SUMA IDENTIFICADOR','operacion_string',3,'p_operacion_string','main.py',94),
  ('operacion_string -> IDENTIFICADOR SUMA STRING','operacion_string',3,'p_operacion_string','main.py',95),
  ('operacion_string -> IDENTIFICADOR SUMA IDENTIFICADOR','operacion_string',3,'p_operacion_string','main.py',96),
  ('empty -> END_OF_LINE','empty',1,'p_empty','main.py',106),
  ('asignacion -> asignacionSimple','asignacion',1,'p_asignacion','main.py',109),
  ('asignacion -> asignacionCompuesta','asignacion',1,'p_asignacion','main.py',110),
  ('asignacion -> asignacionClase','asignacion',1,'p_asignacion','main.py',111),
  ('asignacion -> asignacionEstructuraD','asignacion',1,'p_asignacion','main.py',112),
  ('asignacion -> asignacionNull','asignacion',1,'p_asignacion','main.py',113),
  ('asignacion -> asignacionIndex','asignacion',1,'p_asignacion','main.py',114),
  ('asignacion -> asignacionRef','asignacion',1,'p_asignacion','main.py',115),
  ('asignacionSimple -> IDENTIFICADOR IGUAL valor','asignacionSimple',3,'p_asignacionSimple','main.py',118),
  ('asignacionSimple -> IDENTIFICADOR IGUAL expresion','asignacionSimple',3,'p_asignacionSimple','main.py',119),
  ('asignacionSimple -> IDENTIFICADOR IGUAL salida_tres','asignacionSimple',3,'p_asignacionSimple','main.py',120),
  ('asignacionSimple -> IDENTIFICADOR IGUAL index','asignacionSimple',3,'p_asignacionSimple','main.py',121),
  ('asignacionNull -> IDENTIFICADOR IGUAL NULL','asignacionNull',3,'p_asignacionNull','main.py',124),
  ('asignacionClase -> IDENTIFICADOR IGUAL NEW IDENTIFICADOR PAR_IZQ PAR_DER','asignacionClase',6,'p_asignacionClase','main.py',127),
  ('asignacionEstructuraD -> IDENTIFICADOR IGUAL asignacionPila','asignacionEstructuraD',3,'p_asignacionEstructuraD','main.py',131),
  ('asignacionEstructuraD -> IDENTIFICADOR IGUAL asignacionQueue','asignacionEstructuraD',3,'p_asignacionEstructuraD','main.py',132),
  ('asignacionEstructuraD -> IDENTIFICADOR IGUAL asignacionList','asignacionEstructuraD',3,'p_asignacionEstructuraD','main.py',133),
  ('asignacionPila -> NEW STACK tipoLista PAR_IZQ PAR_DER','asignacionPila',5,'p_asignacionPila','main.py',137),
  ('asignacionQueue -> NEW QUEUE tipoLista PAR_IZQ PAR_DER','asignacionQueue',5,'p_asignacionQueue','main.py',140),
  ('asignacionList -> NEW LIST tipoLista PAR_IZQ PAR_DER','asignacionList',5,'p_asignacionList','main.py',143),
  ('asignacionIndex -> index IGUAL index','asignacionIndex',3,'p_asignacionIndex','main.py',146),
  ('asignacionIndex -> index IGUAL valor','asignacionIndex',3,'p_asignacionIndex','main.py',147),
  ('index -> IDENTIFICADOR COR_IZQ INT COR_DER','index',4,'p_index','main.py',151),
  ('index -> IDENTIFICADOR COR_IZQ IDENTIFICADOR COR_DER','index',4,'p_index','main.py',152),
  ('asignacionRef -> IDENTIFICADOR IGUAL REF IDENTIFICADOR','asignacionRef',4,'p_asignacionRef','main.py',156),
  ('asignacionRef -> IDENTIFICADOR IGUAL REF index','asignacionRef',4,'p_asignacionRef','main.py',157),
  ('asignacionCompuesta -> asignacionCompuesta_Logic','asignacionCompuesta',1,'p_asignacionCompuesta','main.py',161),
  ('asignacionCompuesta -> asignacionCompuesta_Number','asignacionCompuesta',1,'p_asignacionCompuesta','main.py',162),
  ('asignacionCompuesta -> asignacionCompuesta_Null','asignacionCompuesta',1,'p_asignacionCompuesta','main.py',163),
  ('asignacionCompuesta -> asignacionCompuesta_Shift','asignacionCompuesta',1,'p_asignacionCompuesta','main.py',164),
  ('asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic BOOL','asignacionCompuesta_Logic',3,'p_asignacionCompuesta_Logic','main.py',167),
  ('asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic expresion_condicional','asignacionCompuesta_Logic',3,'p_asignacionCompuesta_Logic','main.py',168),
  ('asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR','asignacionCompuesta_Logic',3,'p_asignacionCompuesta_Logic','main.py',169),
  ('asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic INT','asignacionCompuesta_Logic',3,'p_asignacionCompuesta_Logic','main.py',170),
  ('asignacionCompuesta_Number -> IDENTIFICADOR operadoresCompuestosNumber numero','asignacionCompuesta_Number',3,'p_asignacionCompuesta_Number','main.py',174),
  ('asignacionCompuesta_Number -> IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica','asignacionCompuesta_Number',3,'p_asignacionCompuesta_Number','main.py',175),
  ('asignacionCompuesta_Number -> IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR','asignacionCompuesta_Number',3,'p_asignacionCompuesta_Number','main.py',176),
  ('asignacionCompuesta_Null -> IDENTIFICADOR NULL_EQUAL valor','asignacionCompuesta_Null',3,'p_asignacionCompuesta_Null','main.py',180),
  ('asignacionCompuesta_Null -> IDENTIFICADOR NULL_EQUAL expresion','asignacionCompuesta_Null',3,'p_asignacionCompuesta_Null','main.py',181),
  ('asignacionCompuesta_Null -> IDENTIFICADOR NULL_EQUAL asignacionPila','asignacionCompuesta_Null',3,'p_asignacionCompuesta_Null','main.py',182),
  ('asignacionCompuesta_Null -> IDENTIFICADOR NULL_EQUAL asignacionQueue','asignacionCompuesta_Null',3,'p_asignacionCompuesta_Null','main.py',183),
  ('asignacionCompuesta_Null -> IDENTIFICADOR NULL_EQUAL asignacionList','asignacionCompuesta_Null',3,'p_asignacionCompuesta_Null','main.py',184),
  ('asignacionCompuesta_Shift -> IDENTIFICADOR operadoresCompuestosShift IDENTIFICADOR','asignacionCompuesta_Shift',3,'p_asignacionCompuesta_Shift','main.py',187),
  ('asignacionCompuesta_Shift -> IDENTIFICADOR operadoresCompuestosShift INT','asignacionCompuesta_Shift',3,'p_asignacionCompuesta_Shift','main.py',188),
  ('operadoresCompuestosNumber -> AUMENTADO','operadoresCompuestosNumber',1,'p_operadoresCompuestosNumber','main.py',192),
  ('operadoresCompuestosNumber -> DECREMENTADO','operadoresCompuestosNumber',1,'p_operadoresCompuestosNumber','main.py',193),
  ('operadoresCompuestosNumber -> MULTIPLICADO_POR','operadoresCompuestosNumber',1,'p_operadoresCompuestosNumber','main.py',194),
  ('operadoresCompuestosNumber -> DIVIDIDO_POR','operadoresCompuestosNumber',1,'p_operadoresCompuestosNumber','main.py',195),
  ('operadoresCompuestosNumber -> MODULO_DE','operadoresCompuestosNumber',1,'p_operadoresCompuestosNumber','main.py',196),
  ('operadoresCompuestosLogic -> AND_EQUAL','operadoresCompuestosLogic',1,'p_operadoresCompuestosLogic','main.py',199),
  ('operadoresCompuestosLogic -> OR_EQUAL','operadoresCompuestosLogic',1,'p_operadoresCompuestosLogic','main.py',200),
  ('operadoresCompuestosLogic -> EXC_OREQUAL','operadoresCompuestosLogic',1,'p_operadoresCompuestosLogic','main.py',201),
  ('operadoresCompuestosShift -> LEFTSHIFT_EQUAL','operadoresCompuestosShift',1,'p_operadoresCompuestosShift','main.py',205),
  ('operadoresCompuestosShift -> RIGHTSHIFT_EQUAL','operadoresCompuestosShift',1,'p_operadoresCompuestosShift','main.py',206),
  ('declaracion -> valor_tipo IDENTIFICADOR','declaracion',2,'p_declaracion','main.py',210),
  ('declaracion -> declaracionEstructuraD','declaracion',1,'p_declaracion','main.py',211),
  ('declaracion -> declaracionAsignacion','declaracion',1,'p_declaracion','main.py',212),
  ('declaracion -> declaracionClase','declaracion',1,'p_declaracion','main.py',213),
  ('declaracion -> declaracionNull','declaracion',1,'p_declaracion','main.py',214),
  ('declaracionNull -> valor_tipo OP_TERNARIO IDENTIFICADOR','declaracionNull',3,'p_declaracionNull','main.py',218),
  ('declaracionClase -> IDENTIFICADOR IDENTIFICADOR','declaracionClase',2,'p_declaracionClase','main.py',221),
  ('declaracionAsignacion -> valor_tipo asignacionSimple','declaracionAsignacion',2,'p_declaracionAsignacion','main.py',224),
  ('declaracionAsignacion -> declaracionClase IGUAL NEW IDENTIFICADOR PAR_IZQ PAR_DER','declaracionAsignacion',6,'p_declaracionAsignacion','main.py',225),
  ('declaracionAsignacion -> declaracionClase IGUAL NULL','declaracionAsignacion',3,'p_declaracionAsignacion','main.py',226),
  ('declaracionAsignacion -> declaracionClase IGUAL IDENTIFICADOR','declaracionAsignacion',3,'p_declaracionAsignacion','main.py',227),
  ('declaracionAsignacion -> declaracionNull IGUAL valor','declaracionAsignacion',3,'p_declaracionAsignacion','main.py',228),
  ('declaracionAsignacion -> declaracionNull IGUAL expresion','declaracionAsignacion',3,'p_declaracionAsignacion','main.py',229),
  ('declaracionAsignacion -> declaracionNull IGUAL NULL','declaracionAsignacion',3,'p_declaracionAsignacion','main.py',230),
  ('declaracionAsignacion -> declaracionEstructuraD IGUAL NULL','declaracionAsignacion',3,'p_declaracionAsignacion','main.py',231),
  ('declaracionAsignacion -> REF valor_tipo asignacionRef','declaracionAsignacion',3,'p_declaracionAsignacion','main.py',232),
  ('declaracionAsignacion -> REF IDENTIFICADOR asignacionRef','declaracionAsignacion',3,'p_declaracionAsignacion','main.py',233),
  ('declaracionAsignacion -> REF declaracionEstructuraD asignacionRef','declaracionAsignacion',3,'p_declaracionAsignacion','main.py',234),
  ('declaracionEstructuraD -> declaracionList','declaracionEstructuraD',1,'p_declaracionEstructuraD','main.py',238),
  ('declaracionEstructuraD -> declaracionQueue','declaracionEstructuraD',1,'p_declaracionEstructuraD','main.py',239),
  ('declaracionEstructuraD -> declaracionPila','declaracionEstructuraD',1,'p_declaracionEstructuraD','main.py',240),
  ('declaracionList -> LIST tipoLista IDENTIFICADOR','declaracionList',3,'p_declaracionList','main.py',244),
  ('declaracionQueue -> QUEUE tipoLista IDENTIFICADOR','declaracionQueue',3,'p_declaracionQueue','main.py',247),
  ('declaracionPila -> STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR','declaracionPila',5,'p_declaracionPila','main.py',250),
  ('comparacion -> valor operador_realacional valor','comparacion',3,'p_comparacion','main.py',274),
  ('estructura_control -> while','estructura_control',1,'p_estructura_control','main.py',283),
  ('estructura_control -> switch_case','estructura_control',1,'p_estructura_control','main.py',284),
  ('estructura_control -> for','estructura_control',1,'p_estructura_control','main.py',285),
  ('while -> while_normal','while',1,'p_while','main.py',290),
  ('while -> while_do','while',1,'p_while','main.py',291),
  ('while_normal -> WHILE PAR_IZQ expresion_condicional PAR_DER LLAVE_IZQ body_while LLAVE_DER','while_normal',7,'p_while_normal','main.py',295),
  ('while_do -> DO LLAVE_IZQ body_while LLAVE_DER WHILE PAR_IZQ expresion_condicional PAR_DER END_OF_LINE','while_do',9,'p_while_do','main.py',298),
  ('body_while -> asignacion END_OF_LINE','body_while',2,'p_body_while','main.py',301),
  ('body_while -> declaracion END_OF_LINE','body_while',2,'p_body_while','main.py',302),
  ('body_while -> salida_entrada END_OF_LINE','body_while',2,'p_body_while','main.py',303),
  ('body_while -> BREAK END_OF_LINE','body_while',2,'p_body_while','main.py',304),
  ('body_while -> CONTINUE END_OF_LINE','body_while',2,'p_body_while','main.py',305),
  ('body_while -> asignacion END_OF_LINE body_while','body_while',3,'p_body_while','main.py',306),
  ('body_while -> declaracion END_OF_LINE body_while','body_while',3,'p_body_while','main.py',307),
  ('body_while -> salida_entrada END_OF_LINE body_while','body_while',3,'p_body_while','main.py',308),
  ('body_while -> BREAK END_OF_LINE body_while','body_while',3,'p_body_while','main.py',309),
  ('body_while -> CONTINUE END_OF_LINE body_while','body_while',3,'p_body_while','main.py',310),
  ('switch_case -> SWITCH PAR_IZQ valor PAR_DER LLAVE_IZQ casos LLAVE_DER','switch_case',7,'p_switch_case','main.py',320),
  ('casos -> CASE valor DOS_PUNTOS body_case BREAK END_OF_LINE','casos',6,'p_casos','main.py',323),
  ('casos -> CASE valor DOS_PUNTOS BREAK END_OF_LINE','casos',5,'p_casos','main.py',324),
  ('casos -> CASE valor DOS_PUNTOS body_case BREAK END_OF_LINE casos','casos',7,'p_casos','main.py',325),
  ('casos -> CASE valor DOS_PUNTOS BREAK END_OF_LINE casos','casos',6,'p_casos','main.py',326),
  ('body_case -> asignacion END_OF_LINE','body_case',2,'p_body_case','main.py',329),
  ('body_case -> declaracion END_OF_LINE','body_case',2,'p_body_case','main.py',330),
  ('body_case -> comparacion END_OF_LINE','body_case',2,'p_body_case','main.py',331),
  ('body_case -> salida_entrada END_OF_LINE','body_case',2,'p_body_case','main.py',332),
  ('body_case -> asignacion END_OF_LINE body_case','body_case',3,'p_body_case','main.py',333),
  ('body_case -> declaracion END_OF_LINE body_case','body_case',3,'p_body_case','main.py',334),
  ('body_case -> salida_entrada END_OF_LINE body_case','body_case',3,'p_body_case','main.py',335),
  ('body_case -> comparacion END_OF_LINE body_case','body_case',3,'p_body_case','main.py',336),
  ('for -> FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DER','for',11,'p_for','main.py',346),
  ('forIterador -> IDENTIFICADOR operadorForIteracion','forIterador',2,'p_forIterador','main.py',352),
  ('operadorForIteracion -> INCREMENTO','operadorForIteracion',1,'p_operadorForIteracion','main.py',356),
  ('operadorForIteracion -> DECREMENTO','operadorForIteracion',1,'p_operadorForIteracion','main.py',357),
  ('forCondicion -> IDENTIFICADOR operador_condicional valorForCondicion','forCondicion',3,'p_forCondicion','main.py',363),
  ('valorForCondicion -> FLOAT','valorForCondicion',1,'p_valorForCondicion','main.py',367),
  ('valorForCondicion -> DOUBLE','valorForCondicion',1,'p_valorForCondicion','main.py',368),
  ('valorForCondicion -> INT','valorForCondicion',1,'p_valorForCondicion','main.py',369),
  ('valorForCondicion -> IDENTIFICADOR','valorForCondicion',1,'p_valorForCondicion','main.py',370),
  ('forInicializador -> tipoDatoForInicializador IDENTIFICADOR IGUAL valorForInicializador','forInicializador',4,'p_forInicializador','main.py',376),
  ('forInicializador -> IDENTIFICADOR IGUAL valorForInicializador','forInicializador',3,'p_forInicializador','main.py',377),
  ('tipoDatoForInicializador -> FLOAT_TYPE','tipoDatoForInicializador',1,'p_tipoDatoForInicializador','main.py',382),
  ('tipoDatoForInicializador -> DOUBLE_TYPE','tipoDatoForInicializador',1,'p_tipoDatoForInicializador','main.py',383),
  ('tipoDatoForInicializador -> INT_TYPE','tipoDatoForInicializador',1,'p_tipoDatoForInicializador','main.py',384),
  ('valorForInicializador -> FLOAT','valorForInicializador',1,'p_valorForInicializador','main.py',388),
  ('valorForInicializador -> DOUBLE','valorForInicializador',1,'p_valorForInicializador','main.py',389),
  ('valorForInicializador -> INT','valorForInicializador',1,'p_valorForInicializador','main.py',390),
  ('valorForInicializador -> IDENTIFICADOR','valorForInicializador',1,'p_valorForInicializador','main.py',391),
  ('estructura_datos -> lista','estructura_datos',1,'p_estructura_datos','main.py',403),
  ('estructura_datos -> pila','estructura_datos',1,'p_estructura_datos','main.py',404),
  ('lista -> LIST tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINE','lista',10,'p_lista','main.py',408),
  ('tipoLista -> MENOR_QUE valor_tipo_inicializador MAYOR_QUE','tipoLista',3,'p_tipoLista','main.py',411),
  ('pila -> STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL NEW STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINE','pila',14,'p_pila','main.py',416),
  ('funciones_estructura_datos -> stack_push','funciones_estructura_datos',1,'p_funciones_estructura_datos','main.py',419),
  ('funciones_estructura_datos -> stack_pop','funciones_estructura_datos',1,'p_funciones_estructura_datos','main.py',420),
  ('stack_push -> IDENTIFICADOR PUNTO PUSH PAR_IZQ valor PAR_DER','stack_push',6,'p_stack_push','main.py',424),
  ('stack_push -> IDENTIFICADOR PUNTO PUSH PAR_IZQ NEW IDENTIFICADOR PAR_IZQ PAR_DER PAR_DER','stack_push',9,'p_stack_push','main.py',425),
  ('stack_pop -> IDENTIFICADOR PUNTO POP PAR_IZQ PAR_DER','stack_pop',5,'p_stack_pop','main.py',429),
  ('expresion -> expresion_operacion_aritmetica','expresion',1,'p_expresion','main.py',439),
  ('expresion -> expresion_condicional','expresion',1,'p_expresion','main.py',440),
  ('expresion_operacion_aritmetica -> numero operador_aritmentico numero','expresion_operacion_aritmetica',3,'p_expresion_operacion_aritmetica','main.py',444),
  ('expresion_operacion_aritmetica -> numero operador_aritmentico IDENTIFICADOR','expresion_operacion_aritmetica',3,'p_expresion_operacion_aritmetica','main.py',445),
  ('expresion_operacion_aritmetica -> IDENTIFICADOR operador_aritmentico numero','expresion_operacion_aritmetica',3,'p_expresion_operacion_aritmetica','main.py',446),
  ('expresion_operacion_aritmetica -> IDENTIFICADOR operador_aritmentico IDENTIFICADOR','expresion_operacion_aritmetica',3,'p_expresion_operacion_aritmetica','main.py',447),
  ('expresion_condicional -> numero operador_condicional numero','expresion_condicional',3,'p_expresion_condicional','main.py',451),
  ('expresion_condicional -> IDENTIFICADOR operador_condicional IDENTIFICADOR','expresion_condicional',3,'p_expresion_condicional','main.py',452),
  ('expresion_condicional -> IDENTIFICADOR operador_condicional numero','expresion_condicional',3,'p_expresion_condicional','main.py',453),
  ('expresion_condicional -> numero operador_condicional IDENTIFICADOR','expresion_condicional',3,'p_expresion_condicional','main.py',454),
  ('salida_entrada -> salida_uno','salida_entrada',1,'p_salida_entrada','main.py',465),
  ('salida_entrada -> salida_dos','salida_entrada',1,'p_salida_entrada','main.py',466),
  ('salida_entrada -> salida_tres','salida_entrada',1,'p_salida_entrada','main.py',467),
  ('salida_uno -> CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER','salida_uno',4,'p_salida_uno','main.py',471),
  ('salida_uno -> CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER','salida_uno',4,'p_salida_uno','main.py',472),
  ('salida_uno -> CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER','salida_uno',4,'p_salida_uno','main.py',473),
  ('salida_dos -> CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER','salida_dos',5,'p_salida_dos','main.py',476),
  ('salida_tres -> CONSOLE_READLINE PAR_IZQ PAR_DER','salida_tres',3,'p_salida_tres','main.py',479),
  ('funcion -> funcion_tipo_uno','funcion',1,'p_funcion','main.py',489),
  ('funcion -> funcion_tipo_tres','funcion',1,'p_funcion','main.py',490),
  ('funcion_tipo_uno -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ body LLAVE_DER','funcion_tipo_uno',8,'p_funcion_tipo_uno','main.py',494),
  ('funcion_tipo_tres -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ parametrosF PAR_DER LLAVE_IZQ bodyF LLAVE_DER','funcion_tipo_tres',9,'p_funcion_tipo_tres','main.py',500),
  ('parametrosF -> declaracion','parametrosF',1,'p_parametrosF','main.py',503),
  ('parametrosF -> declaracion COMA parametrosF','parametrosF',3,'p_parametrosF','main.py',504),
  ('bodyF -> asignacion END_OF_LINE','bodyF',2,'p_bodyF','main.py',508),
  ('bodyF -> declaracion END_OF_LINE','bodyF',2,'p_bodyF','main.py',509),
  ('bodyF -> salida_entrada END_OF_LINE','bodyF',2,'p_bodyF','main.py',510),
  ('bodyF -> asignacion END_OF_LINE bodyF','bodyF',3,'p_bodyF','main.py',511),
  ('bodyF -> declaracion END_OF_LINE bodyF','bodyF',3,'p_bodyF','main.py',512),
  ('bodyF -> salida_entrada END_OF_LINE bodyF','bodyF',3,'p_bodyF','main.py',513),
  ('lambda_exp -> lambdaArg LAMBDA lambdaCuerpo','lambda_exp',3,'p_lambda_exp','main.py',516),
  ('lambdaArg -> PAR_IZQ PAR_DER','lambdaArg',2,'p_lambdaArg','main.py',519),
  ('lambdaArg -> PAR_IZQ lambdaParametrosUno PAR_DER','lambdaArg',3,'p_lambdaArg','main.py',520),
  ('lambdaArg -> PAR_IZQ lambdaParametrosDos PAR_DER','lambdaArg',3,'p_lambdaArg','main.py',521),
  ('lambdaArg -> IDENTIFICADOR','lambdaArg',1,'p_lambdaArg','main.py',522),
  ('lambdaParametrosUno -> valor_tipo IDENTIFICADOR','lambdaParametrosUno',2,'p_lambdaParametrosUno','main.py',525),
  ('lambdaParametrosUno -> valor_tipo IDENTIFICADOR COMA lambdaParametrosUno','lambdaParametrosUno',4,'p_lambdaParametrosUno','main.py',526),
  ('lambdaParametrosDos -> IDENTIFICADOR','lambdaParametrosDos',1,'p_lambdaParametrosDos','main.py',529),
  ('lambdaParametrosDos -> IDENTIFICADOR COMA lambdaParametrosDos','lambdaParametrosDos',3,'p_lambdaParametrosDos','main.py',530),
  ('lambdaCuerpo -> expresion','lambdaCuerpo',1,'p_lambdaCuerpo','main.py',534),
  ('lambdaCuerpo -> salida_uno','lambdaCuerpo',1,'p_lambdaCuerpo','main.py',535),
  ('lambdaCuerpo -> salida_dos','lambdaCuerpo',1,'p_lambdaCuerpo','main.py',536),
]
