
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD AND AND_EQUAL AUMENTADO BOOL BOOL_TYPE BREAK BYTE CASE CHAR CHAR_TYPE CLASS COMA COMILLA_DOBLE COMILLA_SIMPLE CONSOLE_READLINE CONSOLE_WRITELINE CONST CONTINUE COR_DER COR_IZQ C_CADENA_INTERPOLADA C_IDENT_TEXTUAL DECREMENTADO DECREMENTO DEFAULT DIVIDIDO_POR DIVISION DO DOS_PUNTOS DOUBLE DOUBLE_TYPE ELSE END_OF_LINE EXC_OREQUAL FINALLY FLOAT FLOAT_TYPE FOR GLOBAL IDENTIFICADOR IGUAL IGUAL_IGUAL IN INCREMENTO INT INT_TYPE IR LAMBDA LEFTSHIFT_EQUAL LET LIST LLAVE_DER LLAVE_IZQ MAYOR_O_IGUAL_QUE MAYOR_QUE MENOR_O_IGUAL_QUE MENOR_QUE MODULO MODULO_DE MULTIPLICACION MULTIPLICADO_POR NEGACION NEW NOR NO_IGUAL NULL NULL_EQUAL NULL_VAL OBJECT ON OP_TERNARIO OR ORDERBY OR_EQUAL PAR_DER PAR_IZQ POP PRIVATE PROTECTED PUBLIC PUNTO PUSH RESTA RETURN RIGHTSHIFT_EQUAL SHIFT_MAYOR SHIFT_MENOR SIMPLE_AND SIMPLE_OR STACK STRING STRING_TYPE STRUCT SUMA SWITCH THIS TO_UPPER TYPEOF VAR VOID WHEN WHERE WHILEbody : asignacion END_OF_LINE\n  | comparacion\n  | estructura_control\n  | estructura_datos\n  | expresion END_OF_LINE\n  | salida_entrada END_OF_LINE\n  | funcion\n  | declaracion END_OF_LINE\n  | empty\n  | funciones_estructura_datos END_OF_LINE\n  valor : CHAR\n  | numero\n  | BOOL\n  | STRING\n  | IDENTIFICADOR\n  numero : FLOAT\n  | DOUBLE\n  | INT\n  ftipo : valor_tipo\n                   | VOID\n    valor_tipo : CHAR_TYPE\n  | FLOAT_TYPE\n  | DOUBLE_TYPE\n  | INT_TYPE\n  | BOOL_TYPE\n  | STRING_TYPE\n  valor_tipo_inicializador : FLOAT_TYPE\n    | DOUBLE_TYPE\n    | STRING_TYPE\n    | INT_TYPE\n    | BOOL_TYPE\n    | CHAR_TYPE\n    | IDENTIFICADORmodificador_acceso : PRIVATE\n  | PROTECTED\n  | PUBLIC\n  operador_realacional : IGUAL_IGUAL\n  | NO_IGUAL \n  | MENOR_QUE\n  | MENOR_O_IGUAL_QUE\n  | MAYOR_QUE\n  | MAYOR_O_IGUAL_QUE\n  operador_aritmentico : SUMA\n  | RESTA\n  | MULTIPLICACION\n  | DIVISION\n  | MODULO\n  operador_condicional : IGUAL_IGUAL\n  | NO_IGUAL\n  | MENOR_QUE\n  | MENOR_O_IGUAL_QUE\n  | MAYOR_QUE\n  | MAYOR_O_IGUAL_QUE\n  operacion_string : STRING SUMA STRING\n    | STRING SUMA IDENTIFICADOR\n    | IDENTIFICADOR SUMA STRING\n    | IDENTIFICADOR SUMA IDENTIFICADORempty : END_OF_LINEasignacion : asignacionSimple\n                | asignacionCompuesta\n   asignacionSimple : IDENTIFICADOR IGUAL valor\n                      | IDENTIFICADOR IGUAL expresion\n                      | IDENTIFICADOR IGUAL salida_entrada\n  asignacionCompuesta : asignacionCompuesta_Logic\n                        | asignacionCompuesta_Number\n  asignacionCompuesta_Logic : IDENTIFICADOR operadoresCompuestosLogic BOOL\n                               | IDENTIFICADOR operadoresCompuestosLogic expresion_condicional\n                               | IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR\n  asignacionCompuesta_Number : IDENTIFICADOR operadoresCompuestosNumber numero\n                                | IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica\n                                | IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR\n   operadoresCompuestosNumber : AUMENTADO\n                          | DECREMENTADO\n                          | MULTIPLICADO_POR\n                          | DIVIDIDO_POR\n                          | MODULO_DE\n   operadoresCompuestosLogic : AND_EQUAL\n                                | OR_EQUAL\n                                | EXC_OREQUAL\n  declaracion : valor_tipo IDENTIFICADOR declaracion : valor_tipo asignacionSimple\n\n  comparacion : valor operador_realacional valorestructura_control : while\n  | switch_case\n  | for\n  while : while_normal\n           | while_do\n  while_normal : WHILE PAR_IZQ expresion_condicional PAR_DER LLAVE_IZQ body_while LLAVE_DERwhile_do : DO LLAVE_IZQ body_while LLAVE_DER WHILE PAR_IZQ expresion_condicional PAR_DER END_OF_LINEbody_while : asignacion END_OF_LINE\n                  | declaracion END_OF_LINE\n                  | salida_entrada END_OF_LINE\n                  | BREAK END_OF_LINE\n                  | CONTINUE END_OF_LINE\n                  | asignacion END_OF_LINE body_while\n                  | declaracion END_OF_LINE body_while\n                  | salida_entrada END_OF_LINE body_while\n                  | BREAK END_OF_LINE body_while\n                  | CONTINUE END_OF_LINE body_while\n\n    switch_case : SWITCH PAR_IZQ valor PAR_DER LLAVE_IZQ casos LLAVE_DERcasos : CASE valor DOS_PUNTOS body_case BREAK END_OF_LINE\n  | CASE valor DOS_PUNTOS BREAK END_OF_LINE\n  | CASE valor DOS_PUNTOS body_case BREAK END_OF_LINE casos\n  | CASE valor DOS_PUNTOS BREAK END_OF_LINE casos\n  body_case : asignacion END_OF_LINE\n  | declaracion END_OF_LINE\n  | comparacion END_OF_LINE\n  | salida_entrada END_OF_LINE\n  | asignacion END_OF_LINE body_case\n  | declaracion END_OF_LINE body_case\n  | salida_entrada END_OF_LINE body_case\n  | comparacion END_OF_LINE body_case\n  for : FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DERforIterador : IDENTIFICADOR operadorForIteracionoperadorForIteracion : INCREMENTO \n                            | DECREMENTOforCondicion : IDENTIFICADOR operador_condicional valorForCondicionvalorForCondicion : FLOAT\n            | DOUBLE\n            | INT\n            | IDENTIFICADORforInicializador : tipoDatoForInicializador IDENTIFICADOR IGUAL valorForInicializador\n                    | IDENTIFICADOR IGUAL valorForInicializadortipoDatoForInicializador : FLOAT_TYPE\n                        | DOUBLE_TYPE\n                        | INT_TYPEvalorForInicializador : FLOAT\n            | DOUBLE\n            | INT\n            | IDENTIFICADORestructura_datos : lista\n                      | stack\n  lista : LIST tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINEtipoLista : MENOR_QUE valor_tipo_inicializador MAYOR_QUEstack : STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL NEW STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINEfunciones_estructura_datos : stack_push\n                                  | stack_pop\n    stack_push : IDENTIFICADOR PUNTO PUSH PAR_IZQ valor PAR_DERstack_pop : IDENTIFICADOR PUNTO POP PAR_IZQ PAR_DERexpresion : expresion_operacion_aritmetica\n  | expresion_condicional\n  expresion_operacion_aritmetica : numero operador_aritmentico numero\n  | numero operador_aritmentico IDENTIFICADOR\n  | IDENTIFICADOR operador_aritmentico numero\n  | IDENTIFICADOR operador_aritmentico IDENTIFICADOR\n  expresion_condicional : numero operador_condicional numero\n  | IDENTIFICADOR operador_condicional IDENTIFICADOR\n  | IDENTIFICADOR operador_condicional numero\n  | numero operador_condicional IDENTIFICADOR\n  salida_entrada : salida_uno\n                    | salida_dos\n                    | salida_tressalida_uno : CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER\n                    | CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER\n                    | CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DERsalida_dos : CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DERsalida_tres : CONSOLE_READLINE PAR_IZQ PAR_DERfuncion : funcion_tipo_uno\n             | funcion_tipo_tres\n  funcion_tipo_uno : modificador_acceso VOID IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ body LLAVE_DERfuncion_tipo_tres : modificador_acceso VOID IDENTIFICADOR PAR_IZQ parametrosF PAR_DER LLAVE_IZQ bodyF LLAVE_DERparametrosF : declaracion\n                 | declaracion COMA parametrosF\n  bodyF : asignacion END_OF_LINE\n            | declaracion END_OF_LINE\n            | salida_entrada END_OF_LINE\n            | asignacion END_OF_LINE bodyF\n            | declaracion END_OF_LINE bodyF\n            | salida_entrada END_OF_LINE bodyF'
    
_lr_action_items = {'END_OF_LINE':([0,2,7,8,10,12,13,14,21,22,23,24,25,30,31,32,33,34,35,36,37,53,54,55,73,74,112,113,114,115,116,117,118,119,120,121,122,125,126,127,129,130,131,132,133,134,135,137,157,162,163,164,165,166,177,179,180,192,194,197,198,199,200,201,208,219,224,227,236,237,238,239,240,257,258,259,260,262,263,264,265,266,268,269,276,298,],[3,61,62,63,64,65,-59,-60,-140,-141,-150,-151,-152,-136,-137,-64,-65,-11,-12,-13,-14,-16,-17,-18,-80,-81,-82,-12,-15,-15,-61,-62,-63,-145,-144,-147,-148,-68,-66,-67,-71,-69,-70,-142,-143,-146,-149,171,-157,186,187,188,189,190,-153,-154,-155,-139,222,-130,-123,-127,-128,-129,-156,-138,-122,3,-121,-117,-118,-119,-120,272,273,274,275,277,278,279,280,281,3,283,288,299,]),'IDENTIFICADOR':([0,28,47,48,49,50,51,52,66,67,68,69,70,71,72,75,76,77,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110,111,138,140,141,142,168,171,173,175,176,178,181,186,187,188,189,190,196,212,221,222,223,227,231,244,248,268,270,272,273,274,278,279,280,281,],[29,73,-21,-22,-23,-24,-25,-26,114,-37,-38,-39,-40,-41,-42,115,119,121,125,129,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-77,-78,-79,-72,-73,-74,-75,-76,133,135,114,139,143,151,151,155,158,160,167,172,-124,-125,-126,114,195,197,-134,203,205,206,167,167,167,167,167,197,167,114,235,236,29,160,167,267,29,151,167,167,167,267,267,267,267,]),'CHAR':([0,66,67,68,69,70,71,72,75,102,168,221,227,248,268,278,279,280,281,],[34,34,-37,-38,-39,-40,-41,-42,34,34,34,34,34,34,34,34,34,34,34,]),'BOOL':([0,66,67,68,69,70,71,72,75,79,92,93,94,102,168,221,227,248,268,278,279,280,281,],[36,36,-37,-38,-39,-40,-41,-42,36,126,-77,-78,-79,36,36,36,36,36,36,36,36,36,36,]),'STRING':([0,66,67,68,69,70,71,72,75,102,107,156,168,178,181,221,227,248,268,278,279,280,281,],[37,37,-37,-38,-39,-40,-41,-42,37,37,153,182,37,204,207,37,37,37,37,37,37,37,37,]),'SWITCH':([0,227,268,],[40,40,40,]),'FOR':([0,227,268,],[41,41,41,]),'LIST':([0,202,227,268,],[42,225,42,42,]),'STACK':([0,227,242,268,],[43,43,254,43,]),'CONSOLE_WRITELINE':([0,75,111,186,187,188,189,190,212,227,244,248,268,272,273,274,278,279,280,281,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'CONSOLE_READLINE':([0,75,111,186,187,188,189,190,212,227,244,248,268,272,273,274,278,279,280,281,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'CHAR_TYPE':([0,105,106,111,183,186,187,188,189,190,212,227,229,244,248,268,270,272,273,274,278,279,280,281,],[47,150,150,47,47,47,47,47,47,47,47,47,47,47,47,47,150,47,47,47,47,47,47,47,]),'FLOAT_TYPE':([0,103,105,106,111,183,186,187,188,189,190,212,227,229,244,248,268,270,272,273,274,278,279,280,281,],[48,140,145,145,48,48,48,48,48,48,48,48,48,48,48,48,48,145,48,48,48,48,48,48,48,]),'DOUBLE_TYPE':([0,103,105,106,111,183,186,187,188,189,190,212,227,229,244,248,268,270,272,273,274,278,279,280,281,],[49,141,146,146,49,49,49,49,49,49,49,49,49,49,49,49,49,146,49,49,49,49,49,49,49,]),'INT_TYPE':([0,103,105,106,111,183,186,187,188,189,190,212,227,229,244,248,268,270,272,273,274,278,279,280,281,],[50,142,148,148,50,50,50,50,50,50,50,50,50,50,50,50,50,148,50,50,50,50,50,50,50,]),'BOOL_TYPE':([0,105,106,111,183,186,187,188,189,190,212,227,229,244,248,268,270,272,273,274,278,279,280,281,],[51,149,149,51,51,51,51,51,51,51,51,51,51,51,51,51,149,51,51,51,51,51,51,51,]),'STRING_TYPE':([0,105,106,111,183,186,187,188,189,190,212,227,229,244,248,268,270,272,273,274,278,279,280,281,],[52,147,147,52,52,52,52,52,52,52,52,52,52,52,52,52,147,52,52,52,52,52,52,52,]),'FLOAT':([0,66,67,68,69,70,71,72,75,76,77,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,110,168,173,196,221,223,227,231,248,268,278,279,280,281,],[53,53,-37,-38,-39,-40,-41,-42,53,53,53,53,53,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-77,-78,-79,-72,-73,-74,-75,-76,53,53,53,53,53,199,199,53,238,53,53,53,53,53,53,53,53,]),'DOUBLE':([0,66,67,68,69,70,71,72,75,76,77,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,110,168,173,196,221,223,227,231,248,268,278,279,280,281,],[54,54,-37,-38,-39,-40,-41,-42,54,54,54,54,54,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-77,-78,-79,-72,-73,-74,-75,-76,54,54,54,54,54,200,200,54,239,54,54,54,54,54,54,54,54,]),'INT':([0,66,67,68,69,70,71,72,75,76,77,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,110,168,173,196,221,223,227,231,248,268,278,279,280,281,],[55,55,-37,-38,-39,-40,-41,-42,55,55,55,55,55,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-77,-78,-79,-72,-73,-74,-75,-76,55,55,55,55,55,201,201,55,240,55,55,55,55,55,55,55,55,]),'WHILE':([0,185,227,268,],[56,213,56,56,]),'DO':([0,227,268,],[57,57,57,]),'PRIVATE':([0,227,268,],[58,58,58,]),'PROTECTED':([0,227,268,],[59,59,59,]),'PUBLIC':([0,227,268,],[60,60,60,]),'$end':([1,3,4,5,6,9,11,16,17,18,19,20,26,27,34,36,37,38,39,53,54,55,61,62,63,64,65,112,113,114,232,246,255,271,275,283,294,299,],[0,-58,-2,-3,-4,-7,-9,-83,-84,-85,-131,-132,-158,-159,-11,-13,-14,-86,-87,-16,-17,-18,-1,-5,-6,-8,-10,-82,-12,-15,-100,-88,-160,-161,-89,-133,-113,-135,]),'LLAVE_DER':([3,4,5,6,9,11,16,17,18,19,20,26,27,34,36,37,38,39,53,54,55,61,62,63,64,65,112,113,114,161,186,187,188,189,190,214,215,216,217,218,220,230,232,243,246,255,256,271,272,273,274,275,277,282,283,285,286,287,288,289,294,296,299,],[-58,-2,-3,-4,-7,-9,-83,-84,-85,-131,-132,-158,-159,-11,-13,-14,-86,-87,-16,-17,-18,-1,-5,-6,-8,-10,-82,-12,-15,185,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,232,246,-100,255,-88,-160,271,-161,-164,-165,-166,-89,-102,294,-133,-167,-168,-169,-101,-104,-113,-103,-135,]),'IGUAL_IGUAL':([15,29,34,35,36,37,53,54,55,113,115,125,128,160,195,267,],[67,86,-11,86,-13,-14,-16,-17,-18,-12,86,86,86,86,86,-15,]),'NO_IGUAL':([15,29,34,35,36,37,53,54,55,113,115,125,128,160,195,267,],[68,87,-11,87,-13,-14,-16,-17,-18,-12,87,87,87,87,87,-15,]),'MENOR_QUE':([15,29,34,35,36,37,42,43,53,54,55,113,115,125,128,160,195,225,254,267,],[69,88,-11,88,-13,-14,105,106,-16,-17,-18,-12,88,88,88,88,88,105,270,-15,]),'MENOR_O_IGUAL_QUE':([15,29,34,35,36,37,53,54,55,113,115,125,128,160,195,267,],[70,89,-11,89,-13,-14,-16,-17,-18,-12,89,89,89,89,89,-15,]),'MAYOR_QUE':([15,29,34,35,36,37,53,54,55,113,115,125,128,144,145,146,147,148,149,150,151,152,160,195,267,284,],[71,90,-11,90,-13,-14,-16,-17,-18,-12,90,90,90,175,-27,-28,-29,-30,-31,-32,-33,176,90,90,-15,295,]),'MAYOR_O_IGUAL_QUE':([15,29,34,35,36,37,53,54,55,113,115,125,128,160,195,267,],[72,91,-11,91,-13,-14,-16,-17,-18,-12,91,91,91,91,91,-15,]),'COMA':([21,22,23,24,25,34,35,36,37,53,54,55,73,74,115,116,117,118,119,120,121,122,132,133,134,135,157,177,179,180,208,211,],[-140,-141,-150,-151,-152,-11,-12,-13,-14,-16,-17,-18,-80,-81,-15,-61,-62,-63,-145,-144,-147,-148,-142,-143,-146,-149,-157,-153,-154,-155,-156,229,]),'PAR_DER':([21,22,23,24,25,34,35,36,37,53,54,55,73,74,108,113,114,115,116,117,118,119,120,121,122,132,133,134,135,136,153,154,155,157,159,169,177,179,180,182,183,191,204,205,206,207,208,210,211,234,245,247,250,251,252,253,297,],[-140,-141,-150,-151,-152,-11,-12,-13,-14,-16,-17,-18,-80,-81,157,-12,-15,-15,-61,-62,-63,-145,-144,-147,-148,-142,-143,-146,-149,170,177,179,180,-157,184,192,-153,-154,-155,208,209,219,-54,-55,-57,-56,-156,228,-162,249,-163,260,-114,-115,-116,269,298,]),'IGUAL':([29,73,139,143,167,172,203,267,],[75,75,173,174,75,196,226,75,]),'PUNTO':([29,],[78,]),'SUMA':([29,35,53,54,55,115,129,130,153,155,],[81,81,-16,-17,-18,81,81,81,178,181,]),'RESTA':([29,35,53,54,55,115,129,130,],[82,82,-16,-17,-18,82,82,82,]),'MULTIPLICACION':([29,35,53,54,55,115,129,130,],[83,83,-16,-17,-18,83,83,83,]),'DIVISION':([29,35,53,54,55,115,129,130,],[84,84,-16,-17,-18,84,84,84,]),'MODULO':([29,35,53,54,55,115,129,130,],[85,85,-16,-17,-18,85,85,85,]),'AND_EQUAL':([29,167,267,],[92,92,92,]),'OR_EQUAL':([29,167,267,],[93,93,93,]),'EXC_OREQUAL':([29,167,267,],[94,94,94,]),'AUMENTADO':([29,167,267,],[95,95,95,]),'DECREMENTADO':([29,167,267,],[96,96,96,]),'MULTIPLICADO_POR':([29,167,267,],[97,97,97,]),'DIVIDIDO_POR':([29,167,267,],[98,98,98,]),'MODULO_DE':([29,167,267,],[99,99,99,]),'DOS_PUNTOS':([34,36,37,53,54,55,113,114,233,],[-11,-13,-14,-16,-17,-18,-12,-15,248,]),'PAR_IZQ':([40,41,44,45,56,123,124,158,175,213,241,295,],[102,103,107,108,110,168,169,183,-134,231,253,297,]),'VOID':([46,58,59,60,],[109,-34,-35,-36,]),'LLAVE_IZQ':([57,170,184,209,228,249,],[111,193,212,227,244,268,]),'PUSH':([78,],[123,]),'POP':([78,],[124,]),'C_CADENA_INTERPOLADA':([107,],[156,]),'BREAK':([111,186,187,188,189,190,212,248,261,278,279,280,281,290,291,292,293,],[165,165,165,165,165,165,165,262,276,-105,-106,-107,-108,-109,-110,-112,-111,]),'CONTINUE':([111,186,187,188,189,190,212,],[166,166,166,166,166,166,166,]),'NEW':([174,226,],[202,242,]),'CASE':([193,277,288,],[221,221,221,]),'INCREMENTO':([235,],[251,]),'DECREMENTO':([235,],[252,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'body':([0,227,268,],[1,243,282,]),'asignacion':([0,111,186,187,188,189,190,212,227,244,248,268,272,273,274,278,279,280,281,],[2,162,162,162,162,162,162,162,2,257,263,2,257,257,257,263,263,263,263,]),'comparacion':([0,227,248,268,278,279,280,281,],[4,4,265,4,265,265,265,265,]),'estructura_control':([0,227,268,],[5,5,5,]),'estructura_datos':([0,227,268,],[6,6,6,]),'expresion':([0,75,227,268,],[7,117,7,7,]),'salida_entrada':([0,75,111,186,187,188,189,190,212,227,244,248,268,272,273,274,278,279,280,281,],[8,118,164,164,164,164,164,164,164,8,259,266,8,259,259,259,266,266,266,266,]),'funcion':([0,227,268,],[9,9,9,]),'declaracion':([0,111,183,186,187,188,189,190,212,227,229,244,248,268,272,273,274,278,279,280,281,],[10,163,211,163,163,163,163,163,163,10,211,258,264,10,258,258,258,264,264,264,264,]),'empty':([0,227,268,],[11,11,11,]),'funciones_estructura_datos':([0,227,268,],[12,12,12,]),'asignacionSimple':([0,28,111,186,187,188,189,190,212,227,244,248,268,272,273,274,278,279,280,281,],[13,74,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'asignacionCompuesta':([0,111,186,187,188,189,190,212,227,244,248,268,272,273,274,278,279,280,281,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'valor':([0,66,75,102,168,221,227,248,268,278,279,280,281,],[15,112,116,136,191,233,15,15,15,15,15,15,15,]),'while':([0,227,268,],[16,16,16,]),'switch_case':([0,227,268,],[17,17,17,]),'for':([0,227,268,],[18,18,18,]),'lista':([0,227,268,],[19,19,19,]),'stack':([0,227,268,],[20,20,20,]),'expresion_operacion_aritmetica':([0,75,80,227,268,],[21,21,131,21,21,]),'expresion_condicional':([0,75,79,110,227,231,268,],[22,22,127,159,22,247,22,]),'salida_uno':([0,75,111,186,187,188,189,190,212,227,244,248,268,272,273,274,278,279,280,281,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'salida_dos':([0,75,111,186,187,188,189,190,212,227,244,248,268,272,273,274,278,279,280,281,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'salida_tres':([0,75,111,186,187,188,189,190,212,227,244,248,268,272,273,274,278,279,280,281,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'funcion_tipo_uno':([0,227,268,],[26,26,26,]),'funcion_tipo_tres':([0,227,268,],[27,27,27,]),'valor_tipo':([0,111,183,186,187,188,189,190,212,227,229,244,248,268,272,273,274,278,279,280,281,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'stack_push':([0,227,268,],[30,30,30,]),'stack_pop':([0,227,268,],[31,31,31,]),'asignacionCompuesta_Logic':([0,111,186,187,188,189,190,212,227,244,248,268,272,273,274,278,279,280,281,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'asignacionCompuesta_Number':([0,111,186,187,188,189,190,212,227,244,248,268,272,273,274,278,279,280,281,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'numero':([0,66,75,76,77,79,80,100,101,102,110,168,221,227,231,248,268,278,279,280,281,],[35,113,35,120,122,128,130,132,134,113,128,113,113,35,128,113,35,113,113,113,113,]),'while_normal':([0,227,268,],[38,38,38,]),'while_do':([0,227,268,],[39,39,39,]),'modificador_acceso':([0,227,268,],[46,46,46,]),'operador_realacional':([15,],[66,]),'operador_aritmentico':([29,35,115,129,130,],[76,100,76,76,100,]),'operador_condicional':([29,35,115,125,128,160,195,],[77,101,77,77,101,77,223,]),'operadoresCompuestosLogic':([29,167,267,],[79,79,79,]),'operadoresCompuestosNumber':([29,167,267,],[80,80,80,]),'tipoLista':([42,225,],[104,241,]),'forInicializador':([103,],[137,]),'tipoDatoForInicializador':([103,],[138,]),'valor_tipo_inicializador':([105,106,270,],[144,152,284,]),'operacion_string':([107,],[154,]),'body_while':([111,186,187,188,189,190,212,],[161,214,215,216,217,218,230,]),'forCondicion':([171,],[194,]),'valorForInicializador':([173,196,],[198,224,]),'parametrosF':([183,229,],[210,245,]),'casos':([193,277,288,],[220,289,296,]),'forIterador':([222,],[234,]),'valorForCondicion':([223,],[237,]),'operadorForIteracion':([235,],[250,]),'bodyF':([244,272,273,274,],[256,285,286,287,]),'body_case':([248,278,279,280,281,],[261,290,291,292,293,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> body","S'",1,None,None,None),
  ('body -> asignacion END_OF_LINE','body',2,'p_body','main.py',6),
  ('body -> comparacion','body',1,'p_body','main.py',7),
  ('body -> estructura_control','body',1,'p_body','main.py',8),
  ('body -> estructura_datos','body',1,'p_body','main.py',9),
  ('body -> expresion END_OF_LINE','body',2,'p_body','main.py',10),
  ('body -> salida_entrada END_OF_LINE','body',2,'p_body','main.py',11),
  ('body -> funcion','body',1,'p_body','main.py',12),
  ('body -> declaracion END_OF_LINE','body',2,'p_body','main.py',13),
  ('body -> empty','body',1,'p_body','main.py',14),
  ('body -> funciones_estructura_datos END_OF_LINE','body',2,'p_body','main.py',15),
  ('valor -> CHAR','valor',1,'p_valor','main.py',24),
  ('valor -> numero','valor',1,'p_valor','main.py',25),
  ('valor -> BOOL','valor',1,'p_valor','main.py',26),
  ('valor -> STRING','valor',1,'p_valor','main.py',27),
  ('valor -> IDENTIFICADOR','valor',1,'p_valor','main.py',28),
  ('numero -> FLOAT','numero',1,'p_numero','main.py',32),
  ('numero -> DOUBLE','numero',1,'p_numero','main.py',33),
  ('numero -> INT','numero',1,'p_numero','main.py',34),
  ('ftipo -> valor_tipo','ftipo',1,'p_ftipo','main.py',37),
  ('ftipo -> VOID','ftipo',1,'p_ftipo','main.py',38),
  ('valor_tipo -> CHAR_TYPE','valor_tipo',1,'p_valor_tipo','main.py',42),
  ('valor_tipo -> FLOAT_TYPE','valor_tipo',1,'p_valor_tipo','main.py',43),
  ('valor_tipo -> DOUBLE_TYPE','valor_tipo',1,'p_valor_tipo','main.py',44),
  ('valor_tipo -> INT_TYPE','valor_tipo',1,'p_valor_tipo','main.py',45),
  ('valor_tipo -> BOOL_TYPE','valor_tipo',1,'p_valor_tipo','main.py',46),
  ('valor_tipo -> STRING_TYPE','valor_tipo',1,'p_valor_tipo','main.py',47),
  ('valor_tipo_inicializador -> FLOAT_TYPE','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','main.py',51),
  ('valor_tipo_inicializador -> DOUBLE_TYPE','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','main.py',52),
  ('valor_tipo_inicializador -> STRING_TYPE','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','main.py',53),
  ('valor_tipo_inicializador -> INT_TYPE','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','main.py',54),
  ('valor_tipo_inicializador -> BOOL_TYPE','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','main.py',55),
  ('valor_tipo_inicializador -> CHAR_TYPE','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','main.py',56),
  ('valor_tipo_inicializador -> IDENTIFICADOR','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','main.py',57),
  ('modificador_acceso -> PRIVATE','modificador_acceso',1,'p_modificador_acceso','main.py',60),
  ('modificador_acceso -> PROTECTED','modificador_acceso',1,'p_modificador_acceso','main.py',61),
  ('modificador_acceso -> PUBLIC','modificador_acceso',1,'p_modificador_acceso','main.py',62),
  ('operador_realacional -> IGUAL_IGUAL','operador_realacional',1,'p_operador_realacional','main.py',66),
  ('operador_realacional -> NO_IGUAL','operador_realacional',1,'p_operador_realacional','main.py',67),
  ('operador_realacional -> MENOR_QUE','operador_realacional',1,'p_operador_realacional','main.py',68),
  ('operador_realacional -> MENOR_O_IGUAL_QUE','operador_realacional',1,'p_operador_realacional','main.py',69),
  ('operador_realacional -> MAYOR_QUE','operador_realacional',1,'p_operador_realacional','main.py',70),
  ('operador_realacional -> MAYOR_O_IGUAL_QUE','operador_realacional',1,'p_operador_realacional','main.py',71),
  ('operador_aritmentico -> SUMA','operador_aritmentico',1,'p_operador_aritmentico','main.py',75),
  ('operador_aritmentico -> RESTA','operador_aritmentico',1,'p_operador_aritmentico','main.py',76),
  ('operador_aritmentico -> MULTIPLICACION','operador_aritmentico',1,'p_operador_aritmentico','main.py',77),
  ('operador_aritmentico -> DIVISION','operador_aritmentico',1,'p_operador_aritmentico','main.py',78),
  ('operador_aritmentico -> MODULO','operador_aritmentico',1,'p_operador_aritmentico','main.py',79),
  ('operador_condicional -> IGUAL_IGUAL','operador_condicional',1,'p_operador_condicional','main.py',83),
  ('operador_condicional -> NO_IGUAL','operador_condicional',1,'p_operador_condicional','main.py',84),
  ('operador_condicional -> MENOR_QUE','operador_condicional',1,'p_operador_condicional','main.py',85),
  ('operador_condicional -> MENOR_O_IGUAL_QUE','operador_condicional',1,'p_operador_condicional','main.py',86),
  ('operador_condicional -> MAYOR_QUE','operador_condicional',1,'p_operador_condicional','main.py',87),
  ('operador_condicional -> MAYOR_O_IGUAL_QUE','operador_condicional',1,'p_operador_condicional','main.py',88),
  ('operacion_string -> STRING SUMA STRING','operacion_string',3,'p_operacion_string','main.py',92),
  ('operacion_string -> STRING SUMA IDENTIFICADOR','operacion_string',3,'p_operacion_string','main.py',93),
  ('operacion_string -> IDENTIFICADOR SUMA STRING','operacion_string',3,'p_operacion_string','main.py',94),
  ('operacion_string -> IDENTIFICADOR SUMA IDENTIFICADOR','operacion_string',3,'p_operacion_string','main.py',95),
  ('empty -> END_OF_LINE','empty',1,'p_empty','main.py',105),
  ('asignacion -> asignacionSimple','asignacion',1,'p_asignacion','main.py',108),
  ('asignacion -> asignacionCompuesta','asignacion',1,'p_asignacion','main.py',109),
  ('asignacionSimple -> IDENTIFICADOR IGUAL valor','asignacionSimple',3,'p_asignacionSimple','main.py',112),
  ('asignacionSimple -> IDENTIFICADOR IGUAL expresion','asignacionSimple',3,'p_asignacionSimple','main.py',113),
  ('asignacionSimple -> IDENTIFICADOR IGUAL salida_entrada','asignacionSimple',3,'p_asignacionSimple','main.py',114),
  ('asignacionCompuesta -> asignacionCompuesta_Logic','asignacionCompuesta',1,'p_asignacionCompuesta','main.py',117),
  ('asignacionCompuesta -> asignacionCompuesta_Number','asignacionCompuesta',1,'p_asignacionCompuesta','main.py',118),
  ('asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic BOOL','asignacionCompuesta_Logic',3,'p_asignacionCompuesta_Logic','main.py',121),
  ('asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic expresion_condicional','asignacionCompuesta_Logic',3,'p_asignacionCompuesta_Logic','main.py',122),
  ('asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR','asignacionCompuesta_Logic',3,'p_asignacionCompuesta_Logic','main.py',123),
  ('asignacionCompuesta_Number -> IDENTIFICADOR operadoresCompuestosNumber numero','asignacionCompuesta_Number',3,'p_asignacionCompuesta_Number','main.py',127),
  ('asignacionCompuesta_Number -> IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica','asignacionCompuesta_Number',3,'p_asignacionCompuesta_Number','main.py',128),
  ('asignacionCompuesta_Number -> IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR','asignacionCompuesta_Number',3,'p_asignacionCompuesta_Number','main.py',129),
  ('operadoresCompuestosNumber -> AUMENTADO','operadoresCompuestosNumber',1,'p_operadoresCompuestosNumber','main.py',133),
  ('operadoresCompuestosNumber -> DECREMENTADO','operadoresCompuestosNumber',1,'p_operadoresCompuestosNumber','main.py',134),
  ('operadoresCompuestosNumber -> MULTIPLICADO_POR','operadoresCompuestosNumber',1,'p_operadoresCompuestosNumber','main.py',135),
  ('operadoresCompuestosNumber -> DIVIDIDO_POR','operadoresCompuestosNumber',1,'p_operadoresCompuestosNumber','main.py',136),
  ('operadoresCompuestosNumber -> MODULO_DE','operadoresCompuestosNumber',1,'p_operadoresCompuestosNumber','main.py',137),
  ('operadoresCompuestosLogic -> AND_EQUAL','operadoresCompuestosLogic',1,'p_operadoresCompuestosLogic','main.py',140),
  ('operadoresCompuestosLogic -> OR_EQUAL','operadoresCompuestosLogic',1,'p_operadoresCompuestosLogic','main.py',141),
  ('operadoresCompuestosLogic -> EXC_OREQUAL','operadoresCompuestosLogic',1,'p_operadoresCompuestosLogic','main.py',142),
  ('declaracion -> valor_tipo IDENTIFICADOR','declaracion',2,'p_declaracion','main.py',145),
  ('declaracion -> valor_tipo asignacionSimple','declaracion',2,'p_declaracionAsignacion','main.py',148),
  ('comparacion -> valor operador_realacional valor','comparacion',3,'p_comparacion','main.py',174),
  ('estructura_control -> while','estructura_control',1,'p_estructura_control','main.py',183),
  ('estructura_control -> switch_case','estructura_control',1,'p_estructura_control','main.py',184),
  ('estructura_control -> for','estructura_control',1,'p_estructura_control','main.py',185),
  ('while -> while_normal','while',1,'p_while','main.py',190),
  ('while -> while_do','while',1,'p_while','main.py',191),
  ('while_normal -> WHILE PAR_IZQ expresion_condicional PAR_DER LLAVE_IZQ body_while LLAVE_DER','while_normal',7,'p_while_normal','main.py',195),
  ('while_do -> DO LLAVE_IZQ body_while LLAVE_DER WHILE PAR_IZQ expresion_condicional PAR_DER END_OF_LINE','while_do',9,'p_while_do','main.py',198),
  ('body_while -> asignacion END_OF_LINE','body_while',2,'p_body_while','main.py',201),
  ('body_while -> declaracion END_OF_LINE','body_while',2,'p_body_while','main.py',202),
  ('body_while -> salida_entrada END_OF_LINE','body_while',2,'p_body_while','main.py',203),
  ('body_while -> BREAK END_OF_LINE','body_while',2,'p_body_while','main.py',204),
  ('body_while -> CONTINUE END_OF_LINE','body_while',2,'p_body_while','main.py',205),
  ('body_while -> asignacion END_OF_LINE body_while','body_while',3,'p_body_while','main.py',206),
  ('body_while -> declaracion END_OF_LINE body_while','body_while',3,'p_body_while','main.py',207),
  ('body_while -> salida_entrada END_OF_LINE body_while','body_while',3,'p_body_while','main.py',208),
  ('body_while -> BREAK END_OF_LINE body_while','body_while',3,'p_body_while','main.py',209),
  ('body_while -> CONTINUE END_OF_LINE body_while','body_while',3,'p_body_while','main.py',210),
  ('switch_case -> SWITCH PAR_IZQ valor PAR_DER LLAVE_IZQ casos LLAVE_DER','switch_case',7,'p_switch_case','main.py',220),
  ('casos -> CASE valor DOS_PUNTOS body_case BREAK END_OF_LINE','casos',6,'p_casos','main.py',223),
  ('casos -> CASE valor DOS_PUNTOS BREAK END_OF_LINE','casos',5,'p_casos','main.py',224),
  ('casos -> CASE valor DOS_PUNTOS body_case BREAK END_OF_LINE casos','casos',7,'p_casos','main.py',225),
  ('casos -> CASE valor DOS_PUNTOS BREAK END_OF_LINE casos','casos',6,'p_casos','main.py',226),
  ('body_case -> asignacion END_OF_LINE','body_case',2,'p_body_case','main.py',229),
  ('body_case -> declaracion END_OF_LINE','body_case',2,'p_body_case','main.py',230),
  ('body_case -> comparacion END_OF_LINE','body_case',2,'p_body_case','main.py',231),
  ('body_case -> salida_entrada END_OF_LINE','body_case',2,'p_body_case','main.py',232),
  ('body_case -> asignacion END_OF_LINE body_case','body_case',3,'p_body_case','main.py',233),
  ('body_case -> declaracion END_OF_LINE body_case','body_case',3,'p_body_case','main.py',234),
  ('body_case -> salida_entrada END_OF_LINE body_case','body_case',3,'p_body_case','main.py',235),
  ('body_case -> comparacion END_OF_LINE body_case','body_case',3,'p_body_case','main.py',236),
  ('for -> FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DER','for',11,'p_for','main.py',246),
  ('forIterador -> IDENTIFICADOR operadorForIteracion','forIterador',2,'p_forIterador','main.py',252),
  ('operadorForIteracion -> INCREMENTO','operadorForIteracion',1,'p_operadorForIteracion','main.py',256),
  ('operadorForIteracion -> DECREMENTO','operadorForIteracion',1,'p_operadorForIteracion','main.py',257),
  ('forCondicion -> IDENTIFICADOR operador_condicional valorForCondicion','forCondicion',3,'p_forCondicion','main.py',263),
  ('valorForCondicion -> FLOAT','valorForCondicion',1,'p_valorForCondicion','main.py',267),
  ('valorForCondicion -> DOUBLE','valorForCondicion',1,'p_valorForCondicion','main.py',268),
  ('valorForCondicion -> INT','valorForCondicion',1,'p_valorForCondicion','main.py',269),
  ('valorForCondicion -> IDENTIFICADOR','valorForCondicion',1,'p_valorForCondicion','main.py',270),
  ('forInicializador -> tipoDatoForInicializador IDENTIFICADOR IGUAL valorForInicializador','forInicializador',4,'p_forInicializador','main.py',276),
  ('forInicializador -> IDENTIFICADOR IGUAL valorForInicializador','forInicializador',3,'p_forInicializador','main.py',277),
  ('tipoDatoForInicializador -> FLOAT_TYPE','tipoDatoForInicializador',1,'p_tipoDatoForInicializador','main.py',282),
  ('tipoDatoForInicializador -> DOUBLE_TYPE','tipoDatoForInicializador',1,'p_tipoDatoForInicializador','main.py',283),
  ('tipoDatoForInicializador -> INT_TYPE','tipoDatoForInicializador',1,'p_tipoDatoForInicializador','main.py',284),
  ('valorForInicializador -> FLOAT','valorForInicializador',1,'p_valorForInicializador','main.py',288),
  ('valorForInicializador -> DOUBLE','valorForInicializador',1,'p_valorForInicializador','main.py',289),
  ('valorForInicializador -> INT','valorForInicializador',1,'p_valorForInicializador','main.py',290),
  ('valorForInicializador -> IDENTIFICADOR','valorForInicializador',1,'p_valorForInicializador','main.py',291),
  ('estructura_datos -> lista','estructura_datos',1,'p_estructura_datos','main.py',303),
  ('estructura_datos -> stack','estructura_datos',1,'p_estructura_datos','main.py',304),
  ('lista -> LIST tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINE','lista',10,'p_lista','main.py',308),
  ('tipoLista -> MENOR_QUE valor_tipo_inicializador MAYOR_QUE','tipoLista',3,'p_tipoLista','main.py',311),
  ('stack -> STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL NEW STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINE','stack',14,'p_stack','main.py',316),
  ('funciones_estructura_datos -> stack_push','funciones_estructura_datos',1,'p_funciones_estructura_datos','main.py',319),
  ('funciones_estructura_datos -> stack_pop','funciones_estructura_datos',1,'p_funciones_estructura_datos','main.py',320),
  ('stack_push -> IDENTIFICADOR PUNTO PUSH PAR_IZQ valor PAR_DER','stack_push',6,'p_stack_push','main.py',324),
  ('stack_pop -> IDENTIFICADOR PUNTO POP PAR_IZQ PAR_DER','stack_pop',5,'p_stack_pop','main.py',327),
  ('expresion -> expresion_operacion_aritmetica','expresion',1,'p_expresion','main.py',337),
  ('expresion -> expresion_condicional','expresion',1,'p_expresion','main.py',338),
  ('expresion_operacion_aritmetica -> numero operador_aritmentico numero','expresion_operacion_aritmetica',3,'p_expresion_operacion_aritmetica','main.py',342),
  ('expresion_operacion_aritmetica -> numero operador_aritmentico IDENTIFICADOR','expresion_operacion_aritmetica',3,'p_expresion_operacion_aritmetica','main.py',343),
  ('expresion_operacion_aritmetica -> IDENTIFICADOR operador_aritmentico numero','expresion_operacion_aritmetica',3,'p_expresion_operacion_aritmetica','main.py',344),
  ('expresion_operacion_aritmetica -> IDENTIFICADOR operador_aritmentico IDENTIFICADOR','expresion_operacion_aritmetica',3,'p_expresion_operacion_aritmetica','main.py',345),
  ('expresion_condicional -> numero operador_condicional numero','expresion_condicional',3,'p_expresion_condicional','main.py',349),
  ('expresion_condicional -> IDENTIFICADOR operador_condicional IDENTIFICADOR','expresion_condicional',3,'p_expresion_condicional','main.py',350),
  ('expresion_condicional -> IDENTIFICADOR operador_condicional numero','expresion_condicional',3,'p_expresion_condicional','main.py',351),
  ('expresion_condicional -> numero operador_condicional IDENTIFICADOR','expresion_condicional',3,'p_expresion_condicional','main.py',352),
  ('salida_entrada -> salida_uno','salida_entrada',1,'p_salida_entrada','main.py',363),
  ('salida_entrada -> salida_dos','salida_entrada',1,'p_salida_entrada','main.py',364),
  ('salida_entrada -> salida_tres','salida_entrada',1,'p_salida_entrada','main.py',365),
  ('salida_uno -> CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER','salida_uno',4,'p_salida_uno','main.py',369),
  ('salida_uno -> CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER','salida_uno',4,'p_salida_uno','main.py',370),
  ('salida_uno -> CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER','salida_uno',4,'p_salida_uno','main.py',371),
  ('salida_dos -> CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER','salida_dos',5,'p_salida_dos','main.py',374),
  ('salida_tres -> CONSOLE_READLINE PAR_IZQ PAR_DER','salida_tres',3,'p_salida_tres','main.py',377),
  ('funcion -> funcion_tipo_uno','funcion',1,'p_funcion','main.py',387),
  ('funcion -> funcion_tipo_tres','funcion',1,'p_funcion','main.py',388),
  ('funcion_tipo_uno -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ body LLAVE_DER','funcion_tipo_uno',8,'p_funcion_tipo_uno','main.py',392),
  ('funcion_tipo_tres -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ parametrosF PAR_DER LLAVE_IZQ bodyF LLAVE_DER','funcion_tipo_tres',9,'p_funcion_tipo_tres','main.py',398),
  ('parametrosF -> declaracion','parametrosF',1,'p_parametrosF','main.py',401),
  ('parametrosF -> declaracion COMA parametrosF','parametrosF',3,'p_parametrosF','main.py',402),
  ('bodyF -> asignacion END_OF_LINE','bodyF',2,'p_bodyF','main.py',406),
  ('bodyF -> declaracion END_OF_LINE','bodyF',2,'p_bodyF','main.py',407),
  ('bodyF -> salida_entrada END_OF_LINE','bodyF',2,'p_bodyF','main.py',408),
  ('bodyF -> asignacion END_OF_LINE bodyF','bodyF',3,'p_bodyF','main.py',409),
  ('bodyF -> declaracion END_OF_LINE bodyF','bodyF',3,'p_bodyF','main.py',410),
  ('bodyF -> salida_entrada END_OF_LINE bodyF','bodyF',3,'p_bodyF','main.py',411),
]
