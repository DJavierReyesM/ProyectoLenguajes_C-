//Pruebas Reyes - Sintáctico

//Declaración de tipo de Función

public void holaM(int edad, string op="Hola", float @f){ Console.WriteLine(edad); Console.WriteLine(op); int a = 2; a+=1; }

// Estructura control While

while(a<10){ Console.WriteLine(a); a+=1; }

do{ Console.WriteLine(a); a+=1; }while(a<10);

// Declaraciones y Asignaciones con Operadores Compuestos (Parte 1)
a &= b;
a ^= c;
c |= false;
c &= 2>3;
a+=1;
b-=2.2;
c*=20;
d/=dsd;
d%=10;
d+=2+3;
bool _verdadero1 = false;
bool @falseto1 = true;
char car = 'A';
int a;
float @tr;

// Estructura Datos : Stack
Stack<int> num = new Stack<int>();
num.Push(1);
num.Pop();

Stack<dataS> num = new Stack<dataS>();
num.Push(as);

// Declaraciones y asignaciones Nuevas : Stack, List, Queue
Stack<int> pila;
List<float> pila23;
Queue<Persona> @pila;
pila = new Stack<bool>();
pila23 = new List<char>();
@pila = new Queue<string>();

// Declaracion y asignacion nuevas: Clases / Null y (? y ??=)
Libros l;
l = new Libros();
LPersona l2 = new LPersona();
as = null;

bool? b = 2>3;
int? c = 3+2;
float? as = null;
as = null;
Queue<int> asas = null;
as ??= 23;
qer ??= 2>1;
@dko ??= new Stack<int>();
@dko ??= new List<string>();
@dko ??= new Queue<bool>();
dj ??= a;

// Asignacion: Index
abd = b[2];
a[i] = 2;
a[2] = "Hola";
a[3] = b[0];
a[6] = @d;

// Asignacion <<= y >>=
a<<=2;
b>>=a;
c>>=4;
ji<<=@f;

//Expresion Lambda
(x, y) => y*x
(int x, int y) => y>=x
() => Console.WriteLine("Hola")

//Asignacion y Declaracion: ref
ref int a = ref b;
a = ref c;
ref int aet = ref al[0];
a = ref @dg[xi];
Stack<int> asa = new Stack<int>();
ref Auto z = ref carro;