
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD AND AND_EQUAL AUMENTADO BOOL BOOL_TYPE BREAK BYTE CASE CHAR CHAR_TYPE CLASS COMA COMILLA_DOBLE COMILLA_SIMPLE CONSOLE_READLINE CONSOLE_WRITELINE CONST CONTINUE COR_DER COR_IZQ C_CADENA_INTERPOLADA C_IDENT_TEXTUAL DECREMENTADO DECREMENTO DEFAULT DIVIDIDO_POR DIVISION DO DOS_PUNTOS DOUBLE DOUBLE_TYPE ELSE END_OF_LINE EXC_OREQUAL FINALLY FLOAT FLOAT_TYPE FOR GLOBAL IDENTIFICADOR IGUAL IGUAL_IGUAL IN INCREMENTO INT INT_TYPE IR LAMBDA LEFTSHIFT_EQUAL LET LIST LLAVE_DER LLAVE_IZQ MAYOR_O_IGUAL_QUE MAYOR_QUE MENOR_O_IGUAL_QUE MENOR_QUE MODULO MODULO_DE MULTIPLICACION MULTIPLICADO_POR NEGACION NEW NOR NO_IGUAL NULL NULL_EQUAL NULL_VAL OBJECT ON OP_TERNARIO OR ORDERBY OR_EQUAL PAR_DER PAR_IZQ POP PRIVATE PROTECTED PUBLIC PUNTO PUSH QUEUE REF RESTA RETURN RIGHTSHIFT_EQUAL SHIFT_MAYOR SHIFT_MENOR SIMPLE_AND SIMPLE_OR STACK STRING STRING_TYPE STRUCT SUMA SWITCH THIS TO_UPPER TYPEOF VAR VOID WHEN WHERE WHILEbody : add_list END_OF_LINE\n    | add_stack END_OF_LINE\n    | add_queue END_OF_LINE\n    | cast_float_to_int END_OF_LINE\n    | to_upper_case END_OF_LINE\n    | concat_strings END_OF_LINE\n    valor : CHAR\n  | numero\n  | BOOL\n  | STRING\n  | IDENTIFICADOR\n  add_queue : CHAR_TYPEto_upper_case : CHAR_TYPEnumero : FLOAT\n  | DOUBLE\n  | INT\n  ftipo : valor_tipo\n                   | VOID\n    add_stack : CHAR_TYPEconcat_strings : CHAR_TYPEvalor_tipo : CHAR_TYPE\n  | FLOAT_TYPE\n  | DOUBLE_TYPE\n  | INT_TYPE\n  | BOOL_TYPE\n  | STRING_TYPE\n  add_list : CHAR_TYPEvalor_tipo_inicializador : FLOAT_TYPE\n    | DOUBLE_TYPE\n    | STRING_TYPE\n    | INT_TYPE\n    | BOOL_TYPE\n    | CHAR_TYPE\n    | IDENTIFICADORcast_float_to_int : CHAR_TYPEmodificador_acceso : PRIVATE\n  | PROTECTED\n  | PUBLIC\n  operador_realacional : IGUAL_IGUAL\n  | NO_IGUAL \n  | MENOR_QUE\n  | MENOR_O_IGUAL_QUE\n  | MAYOR_QUE\n  | MAYOR_O_IGUAL_QUE\n  operador_aritmentico : SUMA\n  | RESTA\n  | MULTIPLICACION\n  | DIVISION\n  | MODULO\n  operador_condicional : IGUAL_IGUAL\n  | NO_IGUAL\n  | MENOR_QUE\n  | MENOR_O_IGUAL_QUE\n  | MAYOR_QUE\n  | MAYOR_O_IGUAL_QUE\n  operacion_string : STRING SUMA STRING\n    | STRING SUMA IDENTIFICADOR\n    | IDENTIFICADOR SUMA STRING\n    | IDENTIFICADOR SUMA IDENTIFICADORempty : END_OF_LINEasignacion : asignacionSimple\n                | asignacionCompuesta\n                | asignacionClase\n                | asignacionEstructuraD\n                | asignacionNull\n                | asignacionIndex\n                | asignacionRef\n   asignacionSimple : IDENTIFICADOR IGUAL valor\n                      | IDENTIFICADOR IGUAL expresion\n                      | IDENTIFICADOR IGUAL salida_tres\n                      | IDENTIFICADOR IGUAL index\n  asignacionNull : IDENTIFICADOR IGUAL NULLasignacionClase : IDENTIFICADOR IGUAL NEW IDENTIFICADOR PAR_IZQ PAR_DERasignacionEstructuraD : IDENTIFICADOR IGUAL asignacionPila\n                            | IDENTIFICADOR IGUAL asignacionQueue\n                            | IDENTIFICADOR IGUAL asignacionList\n    asignacionPila : NEW STACK tipoLista PAR_IZQ PAR_DERasignacionQueue : NEW QUEUE tipoLista PAR_IZQ PAR_DERasignacionList : NEW LIST tipoLista PAR_IZQ PAR_DERasignacionIndex : index IGUAL index\n                       | index IGUAL valor\n    index : IDENTIFICADOR COR_IZQ INT COR_DER\n            | IDENTIFICADOR COR_IZQ IDENTIFICADOR COR_DER\n    asignacionRef : IDENTIFICADOR IGUAL REF IDENTIFICADOR\n                    | IDENTIFICADOR IGUAL REF index\n    asignacionCompuesta : asignacionCompuesta_Logic\n                        | asignacionCompuesta_Number\n                        | asignacionCompuesta_Null\n                        | asignacionCompuesta_Shift\n  asignacionCompuesta_Logic : IDENTIFICADOR operadoresCompuestosLogic BOOL\n                               | IDENTIFICADOR operadoresCompuestosLogic expresion_condicional\n                               | IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR\n                               | IDENTIFICADOR operadoresCompuestosLogic INT\n  asignacionCompuesta_Number : IDENTIFICADOR operadoresCompuestosNumber numero\n                                | IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica\n                                | IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR\n  asignacionCompuesta_Null : IDENTIFICADOR NULL_EQUAL valor\n                                | IDENTIFICADOR NULL_EQUAL expresion\n                                | IDENTIFICADOR NULL_EQUAL asignacionPila\n                                | IDENTIFICADOR NULL_EQUAL asignacionQueue\n                                | IDENTIFICADOR NULL_EQUAL asignacionListasignacionCompuesta_Shift : IDENTIFICADOR operadoresCompuestosShift IDENTIFICADOR\n                                | IDENTIFICADOR operadoresCompuestosShift INT\n     operadoresCompuestosNumber : AUMENTADO\n                          | DECREMENTADO\n                          | MULTIPLICADO_POR\n                          | DIVIDIDO_POR\n                          | MODULO_DE\n   operadoresCompuestosLogic : AND_EQUAL\n                                | OR_EQUAL\n                                | EXC_OREQUAL\n  operadoresCompuestosShift : LEFTSHIFT_EQUAL\n                                | RIGHTSHIFT_EQUAL\n    declaracion : valor_tipo IDENTIFICADOR\n                 | declaracionEstructuraD\n                 | declaracionAsignacion\n                 | declaracionClase\n                 | declaracionNull\n  declaracionNull : valor_tipo OP_TERNARIO IDENTIFICADORdeclaracionClase : IDENTIFICADOR IDENTIFICADOR declaracionAsignacion : valor_tipo asignacionSimple\n                            | declaracionClase IGUAL NEW IDENTIFICADOR PAR_IZQ PAR_DER\n                            | declaracionClase IGUAL NULL\n                            | declaracionClase IGUAL IDENTIFICADOR\n                            | declaracionNull IGUAL valor\n                            | declaracionNull IGUAL expresion\n                            | declaracionNull IGUAL NULL\n                            | declaracionEstructuraD IGUAL NULL\n                            | REF valor_tipo asignacionRef\n                            | REF IDENTIFICADOR asignacionRef\n                            | REF declaracionEstructuraD asignacionRef\n\n  declaracionEstructuraD : declaracionList\n                              | declaracionQueue\n                              | declaracionPila\n    declaracionList : LIST tipoLista IDENTIFICADORdeclaracionQueue : QUEUE tipoLista IDENTIFICADORdeclaracionPila : STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADORcomparacion : valor operador_realacional valorestructura_control : while\n  | switch_case\n  | for\n  while : while_normal\n           | while_do\n  while_normal : WHILE PAR_IZQ expresion_condicional PAR_DER LLAVE_IZQ body_while LLAVE_DERwhile_do : DO LLAVE_IZQ body_while LLAVE_DER WHILE PAR_IZQ expresion_condicional PAR_DER END_OF_LINEbody_while : asignacion END_OF_LINE\n                  | declaracion END_OF_LINE\n                  | salida_entrada END_OF_LINE\n                  | BREAK END_OF_LINE\n                  | CONTINUE END_OF_LINE\n                  | asignacion END_OF_LINE body_while\n                  | declaracion END_OF_LINE body_while\n                  | salida_entrada END_OF_LINE body_while\n                  | BREAK END_OF_LINE body_while\n                  | CONTINUE END_OF_LINE body_while\n\n    switch_case : SWITCH PAR_IZQ valor PAR_DER LLAVE_IZQ casos LLAVE_DERcasos : CASE valor DOS_PUNTOS body_case BREAK END_OF_LINE\n  | CASE valor DOS_PUNTOS BREAK END_OF_LINE\n  | CASE valor DOS_PUNTOS body_case BREAK END_OF_LINE casos\n  | CASE valor DOS_PUNTOS BREAK END_OF_LINE casos\n  body_case : asignacion END_OF_LINE\n  | declaracion END_OF_LINE\n  | comparacion END_OF_LINE\n  | salida_entrada END_OF_LINE\n  | asignacion END_OF_LINE body_case\n  | declaracion END_OF_LINE body_case\n  | salida_entrada END_OF_LINE body_case\n  | comparacion END_OF_LINE body_case\n  for : FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DERforIterador : IDENTIFICADOR operadorForIteracionoperadorForIteracion : INCREMENTO \n                            | DECREMENTOforCondicion : IDENTIFICADOR operador_condicional valorForCondicionvalorForCondicion : FLOAT\n            | DOUBLE\n            | INT\n            | IDENTIFICADORforInicializador : tipoDatoForInicializador IDENTIFICADOR IGUAL valorForInicializador\n                    | IDENTIFICADOR IGUAL valorForInicializadortipoDatoForInicializador : FLOAT_TYPE\n                        | DOUBLE_TYPE\n                        | INT_TYPEvalorForInicializador : FLOAT\n            | DOUBLE\n            | INT\n            | IDENTIFICADORestructura_datos : lista\n                      | pila\n  lista : LIST tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINEtipoLista : MENOR_QUE valor_tipo_inicializador MAYOR_QUEpila : STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL NEW STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINEfunciones_estructura_datos : stack_push\n                                  | stack_pop\n    stack_push : IDENTIFICADOR PUNTO PUSH PAR_IZQ valor PAR_DER\n                  | IDENTIFICADOR PUNTO PUSH PAR_IZQ NEW IDENTIFICADOR PAR_IZQ PAR_DER PAR_DER\n    stack_pop : IDENTIFICADOR PUNTO POP PAR_IZQ PAR_DERexpresion : expresion_operacion_aritmetica\n  | expresion_condicional\n  expresion_operacion_aritmetica : numero operador_aritmentico numero\n  | numero operador_aritmentico IDENTIFICADOR\n  | IDENTIFICADOR operador_aritmentico numero\n  | IDENTIFICADOR operador_aritmentico IDENTIFICADOR\n  expresion_condicional : numero operador_condicional numero\n  | IDENTIFICADOR operador_condicional IDENTIFICADOR\n  | IDENTIFICADOR operador_condicional numero\n  | numero operador_condicional IDENTIFICADOR\n  salida_entrada : salida_uno\n                    | salida_dos\n                    | salida_tressalida_uno : CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER\n                    | CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER\n                    | CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DERsalida_dos : CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DERsalida_tres : CONSOLE_READLINE PAR_IZQ PAR_DERfuncion : funcion_tipo_uno\n             | funcion_tipo_tres\n  funcion_tipo_uno : modificador_acceso VOID IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ body LLAVE_DERfuncion_tipo_tres : modificador_acceso VOID IDENTIFICADOR PAR_IZQ parametrosF PAR_DER LLAVE_IZQ bodyF LLAVE_DERparametrosF : declaracion\n                 | declaracion COMA parametrosF\n  bodyF : asignacion END_OF_LINE\n            | declaracion END_OF_LINE\n            | salida_entrada END_OF_LINE\n            | asignacion END_OF_LINE bodyF\n            | declaracion END_OF_LINE bodyF\n            | salida_entrada END_OF_LINE bodyFlambda_exp : lambdaArg LAMBDA lambdaCuerpolambdaArg : PAR_IZQ PAR_DER\n            | PAR_IZQ lambdaParametrosUno PAR_DER\n            | PAR_IZQ lambdaParametrosDos PAR_DER\n            | IDENTIFICADOR\n    lambdaParametrosUno : valor_tipo IDENTIFICADOR\n                        | valor_tipo IDENTIFICADOR COMA lambdaParametrosUno\n    lambdaParametrosDos : IDENTIFICADOR\n                        |  IDENTIFICADOR COMA lambdaParametrosDos\n    lambdaCuerpo : expresion\n                    | salida_uno\n                    | salida_dos\n    '
    
_lr_action_items = {'CHAR_TYPE':([0,],[8,]),'$end':([1,9,10,11,12,13,14,],[0,-1,-2,-3,-4,-5,-6,]),'END_OF_LINE':([2,3,4,5,6,7,8,],[9,10,11,12,13,14,-12,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'body':([0,],[1,]),'add_list':([0,],[2,]),'add_stack':([0,],[3,]),'add_queue':([0,],[4,]),'cast_float_to_int':([0,],[5,]),'to_upper_case':([0,],[6,]),'concat_strings':([0,],[7,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> body","S'",1,None,None,None),
  ('body -> add_list END_OF_LINE','body',2,'p_body','semantico.py',8),
  ('body -> add_stack END_OF_LINE','body',2,'p_body','semantico.py',9),
  ('body -> add_queue END_OF_LINE','body',2,'p_body','semantico.py',10),
  ('body -> cast_float_to_int END_OF_LINE','body',2,'p_body','semantico.py',11),
  ('body -> to_upper_case END_OF_LINE','body',2,'p_body','semantico.py',12),
  ('body -> concat_strings END_OF_LINE','body',2,'p_body','semantico.py',13),
  ('valor -> CHAR','valor',1,'p_valor','sintactico.py',29),
  ('valor -> numero','valor',1,'p_valor','sintactico.py',30),
  ('valor -> BOOL','valor',1,'p_valor','sintactico.py',31),
  ('valor -> STRING','valor',1,'p_valor','sintactico.py',32),
  ('valor -> IDENTIFICADOR','valor',1,'p_valor','sintactico.py',33),
  ('add_queue -> CHAR_TYPE','add_queue',1,'p_add_queue','semantico.py',31),
  ('to_upper_case -> CHAR_TYPE','to_upper_case',1,'p_to_upper_case','semantico.py',34),
  ('numero -> FLOAT','numero',1,'p_numero','sintactico.py',37),
  ('numero -> DOUBLE','numero',1,'p_numero','sintactico.py',38),
  ('numero -> INT','numero',1,'p_numero','sintactico.py',39),
  ('ftipo -> valor_tipo','ftipo',1,'p_ftipo','sintactico.py',42),
  ('ftipo -> VOID','ftipo',1,'p_ftipo','sintactico.py',43),
  ('add_stack -> CHAR_TYPE','add_stack',1,'p_add_stack','semantico.py',43),
  ('concat_strings -> CHAR_TYPE','concat_strings',1,'p_concat_strings','semantico.py',46),
  ('valor_tipo -> CHAR_TYPE','valor_tipo',1,'p_valor_tipo','sintactico.py',47),
  ('valor_tipo -> FLOAT_TYPE','valor_tipo',1,'p_valor_tipo','sintactico.py',48),
  ('valor_tipo -> DOUBLE_TYPE','valor_tipo',1,'p_valor_tipo','sintactico.py',49),
  ('valor_tipo -> INT_TYPE','valor_tipo',1,'p_valor_tipo','sintactico.py',50),
  ('valor_tipo -> BOOL_TYPE','valor_tipo',1,'p_valor_tipo','sintactico.py',51),
  ('valor_tipo -> STRING_TYPE','valor_tipo',1,'p_valor_tipo','sintactico.py',52),
  ('add_list -> CHAR_TYPE','add_list',1,'p_add_list','semantico.py',55),
  ('valor_tipo_inicializador -> FLOAT_TYPE','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','sintactico.py',56),
  ('valor_tipo_inicializador -> DOUBLE_TYPE','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','sintactico.py',57),
  ('valor_tipo_inicializador -> STRING_TYPE','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','sintactico.py',58),
  ('valor_tipo_inicializador -> INT_TYPE','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','sintactico.py',59),
  ('valor_tipo_inicializador -> BOOL_TYPE','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','sintactico.py',60),
  ('valor_tipo_inicializador -> CHAR_TYPE','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','sintactico.py',61),
  ('valor_tipo_inicializador -> IDENTIFICADOR','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','sintactico.py',62),
  ('cast_float_to_int -> CHAR_TYPE','cast_float_to_int',1,'p_cast_float_to_int','semantico.py',58),
  ('modificador_acceso -> PRIVATE','modificador_acceso',1,'p_modificador_acceso','sintactico.py',65),
  ('modificador_acceso -> PROTECTED','modificador_acceso',1,'p_modificador_acceso','sintactico.py',66),
  ('modificador_acceso -> PUBLIC','modificador_acceso',1,'p_modificador_acceso','sintactico.py',67),
  ('operador_realacional -> IGUAL_IGUAL','operador_realacional',1,'p_operador_realacional','sintactico.py',71),
  ('operador_realacional -> NO_IGUAL','operador_realacional',1,'p_operador_realacional','sintactico.py',72),
  ('operador_realacional -> MENOR_QUE','operador_realacional',1,'p_operador_realacional','sintactico.py',73),
  ('operador_realacional -> MENOR_O_IGUAL_QUE','operador_realacional',1,'p_operador_realacional','sintactico.py',74),
  ('operador_realacional -> MAYOR_QUE','operador_realacional',1,'p_operador_realacional','sintactico.py',75),
  ('operador_realacional -> MAYOR_O_IGUAL_QUE','operador_realacional',1,'p_operador_realacional','sintactico.py',76),
  ('operador_aritmentico -> SUMA','operador_aritmentico',1,'p_operador_aritmentico','sintactico.py',80),
  ('operador_aritmentico -> RESTA','operador_aritmentico',1,'p_operador_aritmentico','sintactico.py',81),
  ('operador_aritmentico -> MULTIPLICACION','operador_aritmentico',1,'p_operador_aritmentico','sintactico.py',82),
  ('operador_aritmentico -> DIVISION','operador_aritmentico',1,'p_operador_aritmentico','sintactico.py',83),
  ('operador_aritmentico -> MODULO','operador_aritmentico',1,'p_operador_aritmentico','sintactico.py',84),
  ('operador_condicional -> IGUAL_IGUAL','operador_condicional',1,'p_operador_condicional','sintactico.py',88),
  ('operador_condicional -> NO_IGUAL','operador_condicional',1,'p_operador_condicional','sintactico.py',89),
  ('operador_condicional -> MENOR_QUE','operador_condicional',1,'p_operador_condicional','sintactico.py',90),
  ('operador_condicional -> MENOR_O_IGUAL_QUE','operador_condicional',1,'p_operador_condicional','sintactico.py',91),
  ('operador_condicional -> MAYOR_QUE','operador_condicional',1,'p_operador_condicional','sintactico.py',92),
  ('operador_condicional -> MAYOR_O_IGUAL_QUE','operador_condicional',1,'p_operador_condicional','sintactico.py',93),
  ('operacion_string -> STRING SUMA STRING','operacion_string',3,'p_operacion_string','sintactico.py',97),
  ('operacion_string -> STRING SUMA IDENTIFICADOR','operacion_string',3,'p_operacion_string','sintactico.py',98),
  ('operacion_string -> IDENTIFICADOR SUMA STRING','operacion_string',3,'p_operacion_string','sintactico.py',99),
  ('operacion_string -> IDENTIFICADOR SUMA IDENTIFICADOR','operacion_string',3,'p_operacion_string','sintactico.py',100),
  ('empty -> END_OF_LINE','empty',1,'p_empty','sintactico.py',110),
  ('asignacion -> asignacionSimple','asignacion',1,'p_asignacion','sintactico.py',113),
  ('asignacion -> asignacionCompuesta','asignacion',1,'p_asignacion','sintactico.py',114),
  ('asignacion -> asignacionClase','asignacion',1,'p_asignacion','sintactico.py',115),
  ('asignacion -> asignacionEstructuraD','asignacion',1,'p_asignacion','sintactico.py',116),
  ('asignacion -> asignacionNull','asignacion',1,'p_asignacion','sintactico.py',117),
  ('asignacion -> asignacionIndex','asignacion',1,'p_asignacion','sintactico.py',118),
  ('asignacion -> asignacionRef','asignacion',1,'p_asignacion','sintactico.py',119),
  ('asignacionSimple -> IDENTIFICADOR IGUAL valor','asignacionSimple',3,'p_asignacionSimple','sintactico.py',122),
  ('asignacionSimple -> IDENTIFICADOR IGUAL expresion','asignacionSimple',3,'p_asignacionSimple','sintactico.py',123),
  ('asignacionSimple -> IDENTIFICADOR IGUAL salida_tres','asignacionSimple',3,'p_asignacionSimple','sintactico.py',124),
  ('asignacionSimple -> IDENTIFICADOR IGUAL index','asignacionSimple',3,'p_asignacionSimple','sintactico.py',125),
  ('asignacionNull -> IDENTIFICADOR IGUAL NULL','asignacionNull',3,'p_asignacionNull','sintactico.py',128),
  ('asignacionClase -> IDENTIFICADOR IGUAL NEW IDENTIFICADOR PAR_IZQ PAR_DER','asignacionClase',6,'p_asignacionClase','sintactico.py',131),
  ('asignacionEstructuraD -> IDENTIFICADOR IGUAL asignacionPila','asignacionEstructuraD',3,'p_asignacionEstructuraD','sintactico.py',135),
  ('asignacionEstructuraD -> IDENTIFICADOR IGUAL asignacionQueue','asignacionEstructuraD',3,'p_asignacionEstructuraD','sintactico.py',136),
  ('asignacionEstructuraD -> IDENTIFICADOR IGUAL asignacionList','asignacionEstructuraD',3,'p_asignacionEstructuraD','sintactico.py',137),
  ('asignacionPila -> NEW STACK tipoLista PAR_IZQ PAR_DER','asignacionPila',5,'p_asignacionPila','sintactico.py',141),
  ('asignacionQueue -> NEW QUEUE tipoLista PAR_IZQ PAR_DER','asignacionQueue',5,'p_asignacionQueue','sintactico.py',144),
  ('asignacionList -> NEW LIST tipoLista PAR_IZQ PAR_DER','asignacionList',5,'p_asignacionList','sintactico.py',147),
  ('asignacionIndex -> index IGUAL index','asignacionIndex',3,'p_asignacionIndex','sintactico.py',150),
  ('asignacionIndex -> index IGUAL valor','asignacionIndex',3,'p_asignacionIndex','sintactico.py',151),
  ('index -> IDENTIFICADOR COR_IZQ INT COR_DER','index',4,'p_index','sintactico.py',155),
  ('index -> IDENTIFICADOR COR_IZQ IDENTIFICADOR COR_DER','index',4,'p_index','sintactico.py',156),
  ('asignacionRef -> IDENTIFICADOR IGUAL REF IDENTIFICADOR','asignacionRef',4,'p_asignacionRef','sintactico.py',160),
  ('asignacionRef -> IDENTIFICADOR IGUAL REF index','asignacionRef',4,'p_asignacionRef','sintactico.py',161),
  ('asignacionCompuesta -> asignacionCompuesta_Logic','asignacionCompuesta',1,'p_asignacionCompuesta','sintactico.py',165),
  ('asignacionCompuesta -> asignacionCompuesta_Number','asignacionCompuesta',1,'p_asignacionCompuesta','sintactico.py',166),
  ('asignacionCompuesta -> asignacionCompuesta_Null','asignacionCompuesta',1,'p_asignacionCompuesta','sintactico.py',167),
  ('asignacionCompuesta -> asignacionCompuesta_Shift','asignacionCompuesta',1,'p_asignacionCompuesta','sintactico.py',168),
  ('asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic BOOL','asignacionCompuesta_Logic',3,'p_asignacionCompuesta_Logic','sintactico.py',171),
  ('asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic expresion_condicional','asignacionCompuesta_Logic',3,'p_asignacionCompuesta_Logic','sintactico.py',172),
  ('asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR','asignacionCompuesta_Logic',3,'p_asignacionCompuesta_Logic','sintactico.py',173),
  ('asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic INT','asignacionCompuesta_Logic',3,'p_asignacionCompuesta_Logic','sintactico.py',174),
  ('asignacionCompuesta_Number -> IDENTIFICADOR operadoresCompuestosNumber numero','asignacionCompuesta_Number',3,'p_asignacionCompuesta_Number','sintactico.py',178),
  ('asignacionCompuesta_Number -> IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica','asignacionCompuesta_Number',3,'p_asignacionCompuesta_Number','sintactico.py',179),
  ('asignacionCompuesta_Number -> IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR','asignacionCompuesta_Number',3,'p_asignacionCompuesta_Number','sintactico.py',180),
  ('asignacionCompuesta_Null -> IDENTIFICADOR NULL_EQUAL valor','asignacionCompuesta_Null',3,'p_asignacionCompuesta_Null','sintactico.py',184),
  ('asignacionCompuesta_Null -> IDENTIFICADOR NULL_EQUAL expresion','asignacionCompuesta_Null',3,'p_asignacionCompuesta_Null','sintactico.py',185),
  ('asignacionCompuesta_Null -> IDENTIFICADOR NULL_EQUAL asignacionPila','asignacionCompuesta_Null',3,'p_asignacionCompuesta_Null','sintactico.py',186),
  ('asignacionCompuesta_Null -> IDENTIFICADOR NULL_EQUAL asignacionQueue','asignacionCompuesta_Null',3,'p_asignacionCompuesta_Null','sintactico.py',187),
  ('asignacionCompuesta_Null -> IDENTIFICADOR NULL_EQUAL asignacionList','asignacionCompuesta_Null',3,'p_asignacionCompuesta_Null','sintactico.py',188),
  ('asignacionCompuesta_Shift -> IDENTIFICADOR operadoresCompuestosShift IDENTIFICADOR','asignacionCompuesta_Shift',3,'p_asignacionCompuesta_Shift','sintactico.py',191),
  ('asignacionCompuesta_Shift -> IDENTIFICADOR operadoresCompuestosShift INT','asignacionCompuesta_Shift',3,'p_asignacionCompuesta_Shift','sintactico.py',192),
  ('operadoresCompuestosNumber -> AUMENTADO','operadoresCompuestosNumber',1,'p_operadoresCompuestosNumber','sintactico.py',196),
  ('operadoresCompuestosNumber -> DECREMENTADO','operadoresCompuestosNumber',1,'p_operadoresCompuestosNumber','sintactico.py',197),
  ('operadoresCompuestosNumber -> MULTIPLICADO_POR','operadoresCompuestosNumber',1,'p_operadoresCompuestosNumber','sintactico.py',198),
  ('operadoresCompuestosNumber -> DIVIDIDO_POR','operadoresCompuestosNumber',1,'p_operadoresCompuestosNumber','sintactico.py',199),
  ('operadoresCompuestosNumber -> MODULO_DE','operadoresCompuestosNumber',1,'p_operadoresCompuestosNumber','sintactico.py',200),
  ('operadoresCompuestosLogic -> AND_EQUAL','operadoresCompuestosLogic',1,'p_operadoresCompuestosLogic','sintactico.py',203),
  ('operadoresCompuestosLogic -> OR_EQUAL','operadoresCompuestosLogic',1,'p_operadoresCompuestosLogic','sintactico.py',204),
  ('operadoresCompuestosLogic -> EXC_OREQUAL','operadoresCompuestosLogic',1,'p_operadoresCompuestosLogic','sintactico.py',205),
  ('operadoresCompuestosShift -> LEFTSHIFT_EQUAL','operadoresCompuestosShift',1,'p_operadoresCompuestosShift','sintactico.py',209),
  ('operadoresCompuestosShift -> RIGHTSHIFT_EQUAL','operadoresCompuestosShift',1,'p_operadoresCompuestosShift','sintactico.py',210),
  ('declaracion -> valor_tipo IDENTIFICADOR','declaracion',2,'p_declaracion','sintactico.py',214),
  ('declaracion -> declaracionEstructuraD','declaracion',1,'p_declaracion','sintactico.py',215),
  ('declaracion -> declaracionAsignacion','declaracion',1,'p_declaracion','sintactico.py',216),
  ('declaracion -> declaracionClase','declaracion',1,'p_declaracion','sintactico.py',217),
  ('declaracion -> declaracionNull','declaracion',1,'p_declaracion','sintactico.py',218),
  ('declaracionNull -> valor_tipo OP_TERNARIO IDENTIFICADOR','declaracionNull',3,'p_declaracionNull','sintactico.py',222),
  ('declaracionClase -> IDENTIFICADOR IDENTIFICADOR','declaracionClase',2,'p_declaracionClase','sintactico.py',225),
  ('declaracionAsignacion -> valor_tipo asignacionSimple','declaracionAsignacion',2,'p_declaracionAsignacion','sintactico.py',228),
  ('declaracionAsignacion -> declaracionClase IGUAL NEW IDENTIFICADOR PAR_IZQ PAR_DER','declaracionAsignacion',6,'p_declaracionAsignacion','sintactico.py',229),
  ('declaracionAsignacion -> declaracionClase IGUAL NULL','declaracionAsignacion',3,'p_declaracionAsignacion','sintactico.py',230),
  ('declaracionAsignacion -> declaracionClase IGUAL IDENTIFICADOR','declaracionAsignacion',3,'p_declaracionAsignacion','sintactico.py',231),
  ('declaracionAsignacion -> declaracionNull IGUAL valor','declaracionAsignacion',3,'p_declaracionAsignacion','sintactico.py',232),
  ('declaracionAsignacion -> declaracionNull IGUAL expresion','declaracionAsignacion',3,'p_declaracionAsignacion','sintactico.py',233),
  ('declaracionAsignacion -> declaracionNull IGUAL NULL','declaracionAsignacion',3,'p_declaracionAsignacion','sintactico.py',234),
  ('declaracionAsignacion -> declaracionEstructuraD IGUAL NULL','declaracionAsignacion',3,'p_declaracionAsignacion','sintactico.py',235),
  ('declaracionAsignacion -> REF valor_tipo asignacionRef','declaracionAsignacion',3,'p_declaracionAsignacion','sintactico.py',236),
  ('declaracionAsignacion -> REF IDENTIFICADOR asignacionRef','declaracionAsignacion',3,'p_declaracionAsignacion','sintactico.py',237),
  ('declaracionAsignacion -> REF declaracionEstructuraD asignacionRef','declaracionAsignacion',3,'p_declaracionAsignacion','sintactico.py',238),
  ('declaracionEstructuraD -> declaracionList','declaracionEstructuraD',1,'p_declaracionEstructuraD','sintactico.py',242),
  ('declaracionEstructuraD -> declaracionQueue','declaracionEstructuraD',1,'p_declaracionEstructuraD','sintactico.py',243),
  ('declaracionEstructuraD -> declaracionPila','declaracionEstructuraD',1,'p_declaracionEstructuraD','sintactico.py',244),
  ('declaracionList -> LIST tipoLista IDENTIFICADOR','declaracionList',3,'p_declaracionList','sintactico.py',248),
  ('declaracionQueue -> QUEUE tipoLista IDENTIFICADOR','declaracionQueue',3,'p_declaracionQueue','sintactico.py',251),
  ('declaracionPila -> STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR','declaracionPila',5,'p_declaracionPila','sintactico.py',254),
  ('comparacion -> valor operador_realacional valor','comparacion',3,'p_comparacion','sintactico.py',278),
  ('estructura_control -> while','estructura_control',1,'p_estructura_control','sintactico.py',287),
  ('estructura_control -> switch_case','estructura_control',1,'p_estructura_control','sintactico.py',288),
  ('estructura_control -> for','estructura_control',1,'p_estructura_control','sintactico.py',289),
  ('while -> while_normal','while',1,'p_while','sintactico.py',294),
  ('while -> while_do','while',1,'p_while','sintactico.py',295),
  ('while_normal -> WHILE PAR_IZQ expresion_condicional PAR_DER LLAVE_IZQ body_while LLAVE_DER','while_normal',7,'p_while_normal','sintactico.py',299),
  ('while_do -> DO LLAVE_IZQ body_while LLAVE_DER WHILE PAR_IZQ expresion_condicional PAR_DER END_OF_LINE','while_do',9,'p_while_do','sintactico.py',302),
  ('body_while -> asignacion END_OF_LINE','body_while',2,'p_body_while','sintactico.py',305),
  ('body_while -> declaracion END_OF_LINE','body_while',2,'p_body_while','sintactico.py',306),
  ('body_while -> salida_entrada END_OF_LINE','body_while',2,'p_body_while','sintactico.py',307),
  ('body_while -> BREAK END_OF_LINE','body_while',2,'p_body_while','sintactico.py',308),
  ('body_while -> CONTINUE END_OF_LINE','body_while',2,'p_body_while','sintactico.py',309),
  ('body_while -> asignacion END_OF_LINE body_while','body_while',3,'p_body_while','sintactico.py',310),
  ('body_while -> declaracion END_OF_LINE body_while','body_while',3,'p_body_while','sintactico.py',311),
  ('body_while -> salida_entrada END_OF_LINE body_while','body_while',3,'p_body_while','sintactico.py',312),
  ('body_while -> BREAK END_OF_LINE body_while','body_while',3,'p_body_while','sintactico.py',313),
  ('body_while -> CONTINUE END_OF_LINE body_while','body_while',3,'p_body_while','sintactico.py',314),
  ('switch_case -> SWITCH PAR_IZQ valor PAR_DER LLAVE_IZQ casos LLAVE_DER','switch_case',7,'p_switch_case','sintactico.py',324),
  ('casos -> CASE valor DOS_PUNTOS body_case BREAK END_OF_LINE','casos',6,'p_casos','sintactico.py',327),
  ('casos -> CASE valor DOS_PUNTOS BREAK END_OF_LINE','casos',5,'p_casos','sintactico.py',328),
  ('casos -> CASE valor DOS_PUNTOS body_case BREAK END_OF_LINE casos','casos',7,'p_casos','sintactico.py',329),
  ('casos -> CASE valor DOS_PUNTOS BREAK END_OF_LINE casos','casos',6,'p_casos','sintactico.py',330),
  ('body_case -> asignacion END_OF_LINE','body_case',2,'p_body_case','sintactico.py',333),
  ('body_case -> declaracion END_OF_LINE','body_case',2,'p_body_case','sintactico.py',334),
  ('body_case -> comparacion END_OF_LINE','body_case',2,'p_body_case','sintactico.py',335),
  ('body_case -> salida_entrada END_OF_LINE','body_case',2,'p_body_case','sintactico.py',336),
  ('body_case -> asignacion END_OF_LINE body_case','body_case',3,'p_body_case','sintactico.py',337),
  ('body_case -> declaracion END_OF_LINE body_case','body_case',3,'p_body_case','sintactico.py',338),
  ('body_case -> salida_entrada END_OF_LINE body_case','body_case',3,'p_body_case','sintactico.py',339),
  ('body_case -> comparacion END_OF_LINE body_case','body_case',3,'p_body_case','sintactico.py',340),
  ('for -> FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DER','for',11,'p_for','sintactico.py',350),
  ('forIterador -> IDENTIFICADOR operadorForIteracion','forIterador',2,'p_forIterador','sintactico.py',356),
  ('operadorForIteracion -> INCREMENTO','operadorForIteracion',1,'p_operadorForIteracion','sintactico.py',360),
  ('operadorForIteracion -> DECREMENTO','operadorForIteracion',1,'p_operadorForIteracion','sintactico.py',361),
  ('forCondicion -> IDENTIFICADOR operador_condicional valorForCondicion','forCondicion',3,'p_forCondicion','sintactico.py',367),
  ('valorForCondicion -> FLOAT','valorForCondicion',1,'p_valorForCondicion','sintactico.py',371),
  ('valorForCondicion -> DOUBLE','valorForCondicion',1,'p_valorForCondicion','sintactico.py',372),
  ('valorForCondicion -> INT','valorForCondicion',1,'p_valorForCondicion','sintactico.py',373),
  ('valorForCondicion -> IDENTIFICADOR','valorForCondicion',1,'p_valorForCondicion','sintactico.py',374),
  ('forInicializador -> tipoDatoForInicializador IDENTIFICADOR IGUAL valorForInicializador','forInicializador',4,'p_forInicializador','sintactico.py',380),
  ('forInicializador -> IDENTIFICADOR IGUAL valorForInicializador','forInicializador',3,'p_forInicializador','sintactico.py',381),
  ('tipoDatoForInicializador -> FLOAT_TYPE','tipoDatoForInicializador',1,'p_tipoDatoForInicializador','sintactico.py',386),
  ('tipoDatoForInicializador -> DOUBLE_TYPE','tipoDatoForInicializador',1,'p_tipoDatoForInicializador','sintactico.py',387),
  ('tipoDatoForInicializador -> INT_TYPE','tipoDatoForInicializador',1,'p_tipoDatoForInicializador','sintactico.py',388),
  ('valorForInicializador -> FLOAT','valorForInicializador',1,'p_valorForInicializador','sintactico.py',392),
  ('valorForInicializador -> DOUBLE','valorForInicializador',1,'p_valorForInicializador','sintactico.py',393),
  ('valorForInicializador -> INT','valorForInicializador',1,'p_valorForInicializador','sintactico.py',394),
  ('valorForInicializador -> IDENTIFICADOR','valorForInicializador',1,'p_valorForInicializador','sintactico.py',395),
  ('estructura_datos -> lista','estructura_datos',1,'p_estructura_datos','sintactico.py',407),
  ('estructura_datos -> pila','estructura_datos',1,'p_estructura_datos','sintactico.py',408),
  ('lista -> LIST tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINE','lista',10,'p_lista','sintactico.py',412),
  ('tipoLista -> MENOR_QUE valor_tipo_inicializador MAYOR_QUE','tipoLista',3,'p_tipoLista','sintactico.py',415),
  ('pila -> STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL NEW STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINE','pila',14,'p_pila','sintactico.py',420),
  ('funciones_estructura_datos -> stack_push','funciones_estructura_datos',1,'p_funciones_estructura_datos','sintactico.py',423),
  ('funciones_estructura_datos -> stack_pop','funciones_estructura_datos',1,'p_funciones_estructura_datos','sintactico.py',424),
  ('stack_push -> IDENTIFICADOR PUNTO PUSH PAR_IZQ valor PAR_DER','stack_push',6,'p_stack_push','sintactico.py',428),
  ('stack_push -> IDENTIFICADOR PUNTO PUSH PAR_IZQ NEW IDENTIFICADOR PAR_IZQ PAR_DER PAR_DER','stack_push',9,'p_stack_push','sintactico.py',429),
  ('stack_pop -> IDENTIFICADOR PUNTO POP PAR_IZQ PAR_DER','stack_pop',5,'p_stack_pop','sintactico.py',433),
  ('expresion -> expresion_operacion_aritmetica','expresion',1,'p_expresion','sintactico.py',443),
  ('expresion -> expresion_condicional','expresion',1,'p_expresion','sintactico.py',444),
  ('expresion_operacion_aritmetica -> numero operador_aritmentico numero','expresion_operacion_aritmetica',3,'p_expresion_operacion_aritmetica','sintactico.py',448),
  ('expresion_operacion_aritmetica -> numero operador_aritmentico IDENTIFICADOR','expresion_operacion_aritmetica',3,'p_expresion_operacion_aritmetica','sintactico.py',449),
  ('expresion_operacion_aritmetica -> IDENTIFICADOR operador_aritmentico numero','expresion_operacion_aritmetica',3,'p_expresion_operacion_aritmetica','sintactico.py',450),
  ('expresion_operacion_aritmetica -> IDENTIFICADOR operador_aritmentico IDENTIFICADOR','expresion_operacion_aritmetica',3,'p_expresion_operacion_aritmetica','sintactico.py',451),
  ('expresion_condicional -> numero operador_condicional numero','expresion_condicional',3,'p_expresion_condicional','sintactico.py',455),
  ('expresion_condicional -> IDENTIFICADOR operador_condicional IDENTIFICADOR','expresion_condicional',3,'p_expresion_condicional','sintactico.py',456),
  ('expresion_condicional -> IDENTIFICADOR operador_condicional numero','expresion_condicional',3,'p_expresion_condicional','sintactico.py',457),
  ('expresion_condicional -> numero operador_condicional IDENTIFICADOR','expresion_condicional',3,'p_expresion_condicional','sintactico.py',458),
  ('salida_entrada -> salida_uno','salida_entrada',1,'p_salida_entrada','sintactico.py',469),
  ('salida_entrada -> salida_dos','salida_entrada',1,'p_salida_entrada','sintactico.py',470),
  ('salida_entrada -> salida_tres','salida_entrada',1,'p_salida_entrada','sintactico.py',471),
  ('salida_uno -> CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER','salida_uno',4,'p_salida_uno','sintactico.py',475),
  ('salida_uno -> CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER','salida_uno',4,'p_salida_uno','sintactico.py',476),
  ('salida_uno -> CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER','salida_uno',4,'p_salida_uno','sintactico.py',477),
  ('salida_dos -> CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER','salida_dos',5,'p_salida_dos','sintactico.py',480),
  ('salida_tres -> CONSOLE_READLINE PAR_IZQ PAR_DER','salida_tres',3,'p_salida_tres','sintactico.py',483),
  ('funcion -> funcion_tipo_uno','funcion',1,'p_funcion','sintactico.py',493),
  ('funcion -> funcion_tipo_tres','funcion',1,'p_funcion','sintactico.py',494),
  ('funcion_tipo_uno -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ body LLAVE_DER','funcion_tipo_uno',8,'p_funcion_tipo_uno','sintactico.py',498),
  ('funcion_tipo_tres -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ parametrosF PAR_DER LLAVE_IZQ bodyF LLAVE_DER','funcion_tipo_tres',9,'p_funcion_tipo_tres','sintactico.py',504),
  ('parametrosF -> declaracion','parametrosF',1,'p_parametrosF','sintactico.py',507),
  ('parametrosF -> declaracion COMA parametrosF','parametrosF',3,'p_parametrosF','sintactico.py',508),
  ('bodyF -> asignacion END_OF_LINE','bodyF',2,'p_bodyF','sintactico.py',512),
  ('bodyF -> declaracion END_OF_LINE','bodyF',2,'p_bodyF','sintactico.py',513),
  ('bodyF -> salida_entrada END_OF_LINE','bodyF',2,'p_bodyF','sintactico.py',514),
  ('bodyF -> asignacion END_OF_LINE bodyF','bodyF',3,'p_bodyF','sintactico.py',515),
  ('bodyF -> declaracion END_OF_LINE bodyF','bodyF',3,'p_bodyF','sintactico.py',516),
  ('bodyF -> salida_entrada END_OF_LINE bodyF','bodyF',3,'p_bodyF','sintactico.py',517),
  ('lambda_exp -> lambdaArg LAMBDA lambdaCuerpo','lambda_exp',3,'p_lambda_exp','sintactico.py',520),
  ('lambdaArg -> PAR_IZQ PAR_DER','lambdaArg',2,'p_lambdaArg','sintactico.py',523),
  ('lambdaArg -> PAR_IZQ lambdaParametrosUno PAR_DER','lambdaArg',3,'p_lambdaArg','sintactico.py',524),
  ('lambdaArg -> PAR_IZQ lambdaParametrosDos PAR_DER','lambdaArg',3,'p_lambdaArg','sintactico.py',525),
  ('lambdaArg -> IDENTIFICADOR','lambdaArg',1,'p_lambdaArg','sintactico.py',526),
  ('lambdaParametrosUno -> valor_tipo IDENTIFICADOR','lambdaParametrosUno',2,'p_lambdaParametrosUno','sintactico.py',529),
  ('lambdaParametrosUno -> valor_tipo IDENTIFICADOR COMA lambdaParametrosUno','lambdaParametrosUno',4,'p_lambdaParametrosUno','sintactico.py',530),
  ('lambdaParametrosDos -> IDENTIFICADOR','lambdaParametrosDos',1,'p_lambdaParametrosDos','sintactico.py',533),
  ('lambdaParametrosDos -> IDENTIFICADOR COMA lambdaParametrosDos','lambdaParametrosDos',3,'p_lambdaParametrosDos','sintactico.py',534),
  ('lambdaCuerpo -> expresion','lambdaCuerpo',1,'p_lambdaCuerpo','sintactico.py',538),
  ('lambdaCuerpo -> salida_uno','lambdaCuerpo',1,'p_lambdaCuerpo','sintactico.py',539),
  ('lambdaCuerpo -> salida_dos','lambdaCuerpo',1,'p_lambdaCuerpo','sintactico.py',540),
]
