
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD AND AND_EQUAL AUMENTADO BOOL BOOL_TYPE BREAK BYTE CASE CHAR CHAR_TYPE CLASS COMA COMILLA_DOBLE COMILLA_SIMPLE CONSOLE_READLINE CONSOLE_WRITELINE CONST CONTINUE COR_DER COR_IZQ C_CADENA_INTERPOLADA C_IDENT_TEXTUAL DECREMENTADO DECREMENTO DEFAULT DIVIDIDO_POR DIVISION DO DOS_PUNTOS DOUBLE DOUBLE_TYPE ELSE END_OF_LINE ENQUEUE EXC_OREQUAL FINALLY FLOAT FLOAT_TYPE FOR GLOBAL IDENTIFICADOR IGUAL IGUAL_IGUAL IN INCREMENTO INT INT_TYPE IR LAMBDA LEFTSHIFT_EQUAL LET LIST LLAVE_DER LLAVE_IZQ MAYOR_O_IGUAL_QUE MAYOR_QUE MENOR_O_IGUAL_QUE MENOR_QUE MODULO MODULO_DE MULTIPLICACION MULTIPLICADO_POR NEGACION NEW NOR NO_IGUAL NULL NULL_EQUAL NULL_VAL OBJECT ON OP_TERNARIO OR ORDERBY OR_EQUAL PAR_DER PAR_IZQ POP PRIVATE PROTECTED PUBLIC PUNTO PUSH QUEUE REF RESTA RETURN RIGHTSHIFT_EQUAL SHIFT_MAYOR SHIFT_MENOR SIMPLE_AND SIMPLE_OR STACK STRING STRING_TYPE STRUCT SUMA SWITCH THIS TO_UPPER TYPEOF VAR VOID WHEN WHERE WHILEbody : semantica_lista_add\n    | semantica_casting_float_to_int\n    | semantica_stack\n    | add_queue\n    | cast_float_to_int END_OF_LINE\n    | to_upper_case\n    valor : CHAR\n  | numero\n  | BOOL\n  | STRING\n  | IDENTIFICADOR\n  add_queue : asignacion_int_cola\n    | encolar_int\n    | asignacion_int_cola encolar_int\n    | asignacion_string_cola\n    | encolar_string\n    | asignacion_string_cola encolar_string\n  numero : FLOAT\n  | DOUBLE\n  | INT\n  asignacion_int_cola : QUEUE MENOR_QUE INT_TYPE MAYOR_QUE IDENTIFICADOR IGUAL NEW QUEUE MENOR_QUE INT_TYPE MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINEencolar_int : IDENTIFICADOR PUNTO ENQUEUE PAR_IZQ INT PAR_DER END_OF_LINEftipo : valor_tipo\n                   | VOID\n    asignacion_string_cola : QUEUE MENOR_QUE STRING_TYPE MAYOR_QUE IDENTIFICADOR IGUAL NEW QUEUE MENOR_QUE STRING_TYPE MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINEvalor_tipo : CHAR_TYPE\n  | FLOAT_TYPE\n  | DOUBLE_TYPE\n  | INT_TYPE\n  | BOOL_TYPE\n  | STRING_TYPE\n  encolar_string : IDENTIFICADOR PUNTO ENQUEUE PAR_IZQ STRING PAR_DER END_OF_LINEto_upper_case : asignacion_string\n    | str_to_upper_case\n    | asignacion_string str_to_upper_case\n    | asignacion_string str_to_upper_case to_upper_case\n  valor_tipo_inicializador : FLOAT_TYPE\n    | DOUBLE_TYPE\n    | STRING_TYPE\n    | INT_TYPE\n    | BOOL_TYPE\n    | CHAR_TYPE\n    | IDENTIFICADORstr_to_upper_case : IDENTIFICADOR PUNTO TO_UPPER PAR_IZQ PAR_DER END_OF_LINEasignacion_string : STRING_TYPE IDENTIFICADOR IGUAL STRING END_OF_LINEmodificador_acceso : PRIVATE\n  | PROTECTED\n  | PUBLIC\n  operador_realacional : IGUAL_IGUAL\n  | NO_IGUAL \n  | MENOR_QUE\n  | MENOR_O_IGUAL_QUE\n  | MAYOR_QUE\n  | MAYOR_O_IGUAL_QUE\n  semantica_stack : operacionesStackadd_stack : stack_pushoperador_aritmentico : SUMA\n  | RESTA\n  | MULTIPLICACION\n  | DIVISION\n  | MODULO\n  pop_stack : stack_popoperacionesStack : add_stack END_OF_LINE pop_stack END_OF_LINE\n                      | add_stack END_OF_LINE\n                      | pop_stack END_OF_LINE\n  operador_condicional : IGUAL_IGUAL\n  | NO_IGUAL\n  | MENOR_QUE\n  | MENOR_O_IGUAL_QUE\n  | MAYOR_QUE\n  | MAYOR_O_IGUAL_QUE\n  operacion_string : STRING SUMA STRING\n    | STRING SUMA IDENTIFICADOR\n    | IDENTIFICADOR SUMA STRING\n    | IDENTIFICADOR SUMA IDENTIFICADORsemantica_lista_add : lista_add END_OF_LINEtermino : termino operador_aritmentico factor\n    | factor\n  lista_add : add_listasemantica_casting_float_to_int : FLOAT_TYPE IDENTIFICADOR IGUAL FLOAT END_OF_LINE cast_float_intfactor : numero\n    | PAR_IZQ expresion_operacion_aritmetica PAR_DER\n  cast_float_int : cast_float_to_intempty : END_OF_LINEasignacion : asignacionSimple\n                | asignacionCompuesta\n                | asignacionClase\n                | asignacionEstructuraD\n                | asignacionNull\n                | asignacionIndex\n                | asignacionRef\n   asignacionSimple : IDENTIFICADOR IGUAL valor\n                      | IDENTIFICADOR IGUAL expresion\n                      | IDENTIFICADOR IGUAL salida_tres\n                      | IDENTIFICADOR IGUAL index\n  asignacionNull : IDENTIFICADOR IGUAL NULLasignacionClase : IDENTIFICADOR IGUAL NEW IDENTIFICADOR PAR_IZQ PAR_DERasignacionEstructuraD : IDENTIFICADOR IGUAL asignacionPila\n                            | IDENTIFICADOR IGUAL asignacionQueue\n                            | IDENTIFICADOR IGUAL asignacionList\n    asignacionPila : NEW STACK tipoLista PAR_IZQ PAR_DERasignacionQueue : NEW QUEUE tipoLista PAR_IZQ PAR_DERasignacionList : NEW LIST tipoLista PAR_IZQ PAR_DERasignacionIndex : index IGUAL index\n                       | index IGUAL valor\n    index : IDENTIFICADOR COR_IZQ INT COR_DER\n            | IDENTIFICADOR COR_IZQ IDENTIFICADOR COR_DER\n    asignacionRef : IDENTIFICADOR IGUAL REF IDENTIFICADOR\n                    | IDENTIFICADOR IGUAL REF index\n    asignacionCompuesta : asignacionCompuesta_Logic\n                        | asignacionCompuesta_Number\n                        | asignacionCompuesta_Null\n                        | asignacionCompuesta_Shift\n  asignacionCompuesta_Logic : IDENTIFICADOR operadoresCompuestosLogic BOOL\n                               | IDENTIFICADOR operadoresCompuestosLogic expresion_condicional\n                               | IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR\n                               | IDENTIFICADOR operadoresCompuestosLogic INT\n  asignacionCompuesta_Number : IDENTIFICADOR operadoresCompuestosNumber numero\n                                | IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica\n                                | IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR\n  asignacionCompuesta_Null : IDENTIFICADOR NULL_EQUAL valor\n                                | IDENTIFICADOR NULL_EQUAL expresion\n                                | IDENTIFICADOR NULL_EQUAL asignacionPila\n                                | IDENTIFICADOR NULL_EQUAL asignacionQueue\n                                | IDENTIFICADOR NULL_EQUAL asignacionListasignacionCompuesta_Shift : IDENTIFICADOR operadoresCompuestosShift IDENTIFICADOR\n                                | IDENTIFICADOR operadoresCompuestosShift INT\n     operadoresCompuestosNumber : AUMENTADO\n                          | DECREMENTADO\n                          | MULTIPLICADO_POR\n                          | DIVIDIDO_POR\n                          | MODULO_DE\n   operadoresCompuestosLogic : AND_EQUAL\n                                | OR_EQUAL\n                                | EXC_OREQUAL\n  operadoresCompuestosShift : LEFTSHIFT_EQUAL\n                                | RIGHTSHIFT_EQUAL\n    declaracion : valor_tipo IDENTIFICADOR\n                 | declaracionEstructuraD\n                 | declaracionAsignacion\n                 | declaracionClase\n                 | declaracionNull\n  declaracionNull : valor_tipo OP_TERNARIO IDENTIFICADORdeclaracionClase : IDENTIFICADOR IDENTIFICADOR declaracionAsignacion : valor_tipo asignacionSimple\n                            | declaracionClase IGUAL NEW IDENTIFICADOR PAR_IZQ PAR_DER\n                            | declaracionClase IGUAL NULL\n                            | declaracionClase IGUAL IDENTIFICADOR\n                            | declaracionNull IGUAL valor\n                            | declaracionNull IGUAL expresion\n                            | declaracionNull IGUAL NULL\n                            | declaracionEstructuraD IGUAL NULL\n                            | REF valor_tipo asignacionRef\n                            | REF IDENTIFICADOR asignacionRef\n                            | REF declaracionEstructuraD asignacionRef\n\n  declaracionEstructuraD : declaracionList\n                              | declaracionQueue\n                              | declaracionPila\n    declaracionList : LIST tipoLista IDENTIFICADORdeclaracionQueue : QUEUE tipoLista IDENTIFICADORdeclaracionPila : STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADORcomparacion : valor operador_realacional valorestructura_control : while\n  | switch_case\n  | for\n  while : while_normal\n           | while_do\n  while_normal : WHILE PAR_IZQ expresion_condicional PAR_DER LLAVE_IZQ body_while LLAVE_DERwhile_do : DO LLAVE_IZQ body_while LLAVE_DER WHILE PAR_IZQ expresion_condicional PAR_DER END_OF_LINEbody_while : asignacion END_OF_LINE\n                  | declaracion END_OF_LINE\n                  | salida_entrada END_OF_LINE\n                  | BREAK END_OF_LINE\n                  | CONTINUE END_OF_LINE\n                  | asignacion END_OF_LINE body_while\n                  | declaracion END_OF_LINE body_while\n                  | salida_entrada END_OF_LINE body_while\n                  | BREAK END_OF_LINE body_while\n                  | CONTINUE END_OF_LINE body_while\n\n    switch_case : SWITCH PAR_IZQ valor PAR_DER LLAVE_IZQ casos LLAVE_DERcasos : CASE valor DOS_PUNTOS body_case BREAK END_OF_LINE\n  | CASE valor DOS_PUNTOS BREAK END_OF_LINE\n  | CASE valor DOS_PUNTOS body_case BREAK END_OF_LINE casos\n  | CASE valor DOS_PUNTOS BREAK END_OF_LINE casos\n  body_case : asignacion END_OF_LINE\n  | declaracion END_OF_LINE\n  | comparacion END_OF_LINE\n  | salida_entrada END_OF_LINE\n  | asignacion END_OF_LINE body_case\n  | declaracion END_OF_LINE body_case\n  | salida_entrada END_OF_LINE body_case\n  | comparacion END_OF_LINE body_case\n  for : FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DERforIterador : IDENTIFICADOR operadorForIteracionoperadorForIteracion : INCREMENTO \n                            | DECREMENTOforCondicion : IDENTIFICADOR operador_condicional valorForCondicionvalorForCondicion : FLOAT\n            | DOUBLE\n            | INT\n            | IDENTIFICADORforInicializador : tipoDatoForInicializador IDENTIFICADOR IGUAL valorForInicializador\n                    | IDENTIFICADOR IGUAL valorForInicializadortipoDatoForInicializador : FLOAT_TYPE\n                        | DOUBLE_TYPE\n                        | INT_TYPEvalorForInicializador : FLOAT\n            | DOUBLE\n            | INT\n            | IDENTIFICADORestructura_datos : lista\n                      | pila\n  lista : LIST tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINEtipoLista : MENOR_QUE valor_tipo_inicializador MAYOR_QUEfunciones_estructura_datos_lista : add_listaadd_lista : IDENTIFICADOR PUNTO ADD PAR_IZQ valor PAR_DERcast_float_to_int : INT_TYPE IDENTIFICADOR IGUAL PAR_IZQ INT_TYPE PAR_DER IDENTIFICADOR END_OF_LINEpila : STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL NEW STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINEfunciones_estructura_datos : stack_push\n                                  | stack_pop\n    stack_push : IDENTIFICADOR PUNTO PUSH PAR_IZQ valor PAR_DER\n                  | IDENTIFICADOR PUNTO PUSH PAR_IZQ NEW IDENTIFICADOR PAR_IZQ PAR_DER PAR_DER\n    stack_pop : IDENTIFICADOR PUNTO POP PAR_IZQ PAR_DERexpresion : expresion_operacion_aritmetica\n  | expresion_condicional\n  expresion_operacion_aritmetica : expresion_operacion_aritmetica operador_aritmentico termino\n  | numero operador_aritmentico expresion_operacion_aritmetica\n  | numero operador_aritmentico numero\n  | numero operador_aritmentico IDENTIFICADOR\n  | IDENTIFICADOR operador_aritmentico numero\n  | IDENTIFICADOR operador_aritmentico IDENTIFICADOR\n  | termino\n  expresion_condicional : numero operador_condicional numero\n  | IDENTIFICADOR operador_condicional IDENTIFICADOR\n  | IDENTIFICADOR operador_condicional numero\n  | numero operador_condicional IDENTIFICADOR\n  salida_entrada : salida_uno\n                    | salida_dos\n                    | salida_tressalida_uno : CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER\n                    | CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER\n                    | CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DERsalida_dos : CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DERsalida_tres : CONSOLE_READLINE PAR_IZQ PAR_DERfuncion : funcion_tipo_uno\n             | funcion_tipo_tres\n  funcion_tipo_uno : modificador_acceso VOID IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ body LLAVE_DERfuncion_tipo_tres : modificador_acceso VOID IDENTIFICADOR PAR_IZQ parametrosF PAR_DER LLAVE_IZQ bodyF LLAVE_DERparametrosF : declaracion\n                 | declaracion COMA parametrosF\n  bodyF : asignacion END_OF_LINE\n            | declaracion END_OF_LINE\n            | salida_entrada END_OF_LINE\n            | asignacion END_OF_LINE bodyF\n            | declaracion END_OF_LINE bodyF\n            | salida_entrada END_OF_LINE bodyFlambda_exp : lambdaArg LAMBDA lambdaCuerpolambdaArg : PAR_IZQ PAR_DER\n            | PAR_IZQ lambdaParametrosUno PAR_DER\n            | PAR_IZQ lambdaParametrosDos PAR_DER\n            | IDENTIFICADOR\n    lambdaParametrosUno : valor_tipo IDENTIFICADOR\n                        | valor_tipo IDENTIFICADOR COMA lambdaParametrosUno\n    lambdaParametrosDos : IDENTIFICADOR\n                        |  IDENTIFICADOR COMA lambdaParametrosDos\n    lambdaCuerpo : expresion\n                    | salida_uno\n                    | salida_dos\n    '
    
_lr_action_items = {'FLOAT_TYPE':([0,],[9,]),'INT_TYPE':([0,39,65,71,115,],[16,54,89,16,117,]),'QUEUE':([0,108,109,],[22,112,113,]),'IDENTIFICADOR':([0,9,12,14,16,17,23,35,37,60,61,68,69,85,92,97,101,125,126,],[10,28,31,33,34,36,40,36,53,75,75,90,91,100,-45,-44,107,-21,-25,]),'STRING_TYPE':([0,35,39,97,116,],[23,23,55,-44,118,]),'$end':([1,2,3,4,5,7,11,12,13,14,15,17,18,26,27,30,32,35,37,38,50,66,92,93,94,97,104,105,111,125,126,],[0,-1,-2,-3,-4,-6,-55,-12,-13,-15,-16,-33,-34,-5,-76,-14,-17,-35,-64,-65,-36,-63,-45,-80,-83,-44,-22,-32,-217,-21,-25,]),'END_OF_LINE':([6,8,19,20,21,24,25,52,57,70,74,86,95,96,98,99,107,111,114,123,124,],[26,27,-79,37,38,-56,-62,66,71,92,97,-223,104,105,-216,-221,111,-217,-222,125,126,]),'PUNTO':([10,31,33,36,53,],[29,47,48,51,67,]),'MENOR_QUE':([22,112,113,],[39,115,116,]),'IGUAL':([28,34,40,90,91,],[41,49,56,102,103,]),'ENQUEUE':([29,47,48,],[42,63,64,]),'TO_UPPER':([29,51,],[43,43,]),'ADD':([29,],[44,]),'PUSH':([29,],[45,]),'POP':([29,67,],[46,46,]),'FLOAT':([41,60,61,],[57,81,81,]),'PAR_IZQ':([42,43,44,45,46,49,63,64,100,119,120,],[58,59,60,61,62,65,87,88,106,121,122,]),'MAYOR_QUE':([54,55,117,118,],[68,69,119,120,]),'STRING':([56,58,60,61,88,],[70,73,80,80,73,]),'INT':([58,60,61,87,],[72,83,83,72,]),'PAR_DER':([59,62,72,73,75,76,77,78,79,80,81,82,83,84,89,106,110,121,122,],[74,86,95,96,-11,98,-7,-8,-9,-10,-18,-19,-20,99,101,110,114,123,124,]),'CHAR':([60,61,],[77,77,]),'BOOL':([60,61,],[79,79,]),'DOUBLE':([60,61,],[82,82,]),'NEW':([61,102,103,],[85,108,109,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'body':([0,],[1,]),'semantica_lista_add':([0,],[2,]),'semantica_casting_float_to_int':([0,],[3,]),'semantica_stack':([0,],[4,]),'add_queue':([0,],[5,]),'cast_float_to_int':([0,71,],[6,94,]),'to_upper_case':([0,35,],[7,50,]),'lista_add':([0,],[8,]),'operacionesStack':([0,],[11,]),'asignacion_int_cola':([0,],[12,]),'encolar_int':([0,12,],[13,30,]),'asignacion_string_cola':([0,],[14,]),'encolar_string':([0,14,],[15,32,]),'asignacion_string':([0,35,],[17,17,]),'str_to_upper_case':([0,17,35,],[18,35,18,]),'add_lista':([0,],[19,]),'add_stack':([0,],[20,]),'pop_stack':([0,37,],[21,52,]),'stack_push':([0,],[24,]),'stack_pop':([0,37,],[25,25,]),'valor':([60,61,],[76,84,]),'numero':([60,61,],[78,78,]),'cast_float_int':([71,],[93,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> body","S'",1,None,None,None),
  ('body -> semantica_lista_add','body',1,'p_body','semantico.py',9),
  ('body -> semantica_casting_float_to_int','body',1,'p_body','semantico.py',10),
  ('body -> semantica_stack','body',1,'p_body','semantico.py',11),
  ('body -> add_queue','body',1,'p_body','semantico.py',12),
  ('body -> cast_float_to_int END_OF_LINE','body',2,'p_body','semantico.py',13),
  ('body -> to_upper_case','body',1,'p_body','semantico.py',14),
  ('valor -> CHAR','valor',1,'p_valor','sintactico.py',32),
  ('valor -> numero','valor',1,'p_valor','sintactico.py',33),
  ('valor -> BOOL','valor',1,'p_valor','sintactico.py',34),
  ('valor -> STRING','valor',1,'p_valor','sintactico.py',35),
  ('valor -> IDENTIFICADOR','valor',1,'p_valor','sintactico.py',36),
  ('add_queue -> asignacion_int_cola','add_queue',1,'p_add_queue','semantico.py',33),
  ('add_queue -> encolar_int','add_queue',1,'p_add_queue','semantico.py',34),
  ('add_queue -> asignacion_int_cola encolar_int','add_queue',2,'p_add_queue','semantico.py',35),
  ('add_queue -> asignacion_string_cola','add_queue',1,'p_add_queue','semantico.py',36),
  ('add_queue -> encolar_string','add_queue',1,'p_add_queue','semantico.py',37),
  ('add_queue -> asignacion_string_cola encolar_string','add_queue',2,'p_add_queue','semantico.py',38),
  ('numero -> FLOAT','numero',1,'p_numero','sintactico.py',40),
  ('numero -> DOUBLE','numero',1,'p_numero','sintactico.py',41),
  ('numero -> INT','numero',1,'p_numero','sintactico.py',42),
  ('asignacion_int_cola -> QUEUE MENOR_QUE INT_TYPE MAYOR_QUE IDENTIFICADOR IGUAL NEW QUEUE MENOR_QUE INT_TYPE MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINE','asignacion_int_cola',14,'p_asignacion_int_cola','semantico.py',42),
  ('encolar_int -> IDENTIFICADOR PUNTO ENQUEUE PAR_IZQ INT PAR_DER END_OF_LINE','encolar_int',7,'p_encolar_int','semantico.py',45),
  ('ftipo -> valor_tipo','ftipo',1,'p_ftipo','sintactico.py',45),
  ('ftipo -> VOID','ftipo',1,'p_ftipo','sintactico.py',46),
  ('asignacion_string_cola -> QUEUE MENOR_QUE STRING_TYPE MAYOR_QUE IDENTIFICADOR IGUAL NEW QUEUE MENOR_QUE STRING_TYPE MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINE','asignacion_string_cola',14,'p_asignacion_string_cola','semantico.py',48),
  ('valor_tipo -> CHAR_TYPE','valor_tipo',1,'p_valor_tipo','sintactico.py',50),
  ('valor_tipo -> FLOAT_TYPE','valor_tipo',1,'p_valor_tipo','sintactico.py',51),
  ('valor_tipo -> DOUBLE_TYPE','valor_tipo',1,'p_valor_tipo','sintactico.py',52),
  ('valor_tipo -> INT_TYPE','valor_tipo',1,'p_valor_tipo','sintactico.py',53),
  ('valor_tipo -> BOOL_TYPE','valor_tipo',1,'p_valor_tipo','sintactico.py',54),
  ('valor_tipo -> STRING_TYPE','valor_tipo',1,'p_valor_tipo','sintactico.py',55),
  ('encolar_string -> IDENTIFICADOR PUNTO ENQUEUE PAR_IZQ STRING PAR_DER END_OF_LINE','encolar_string',7,'p_encolar_string','semantico.py',51),
  ('to_upper_case -> asignacion_string','to_upper_case',1,'p_to_upper_case','semantico.py',54),
  ('to_upper_case -> str_to_upper_case','to_upper_case',1,'p_to_upper_case','semantico.py',55),
  ('to_upper_case -> asignacion_string str_to_upper_case','to_upper_case',2,'p_to_upper_case','semantico.py',56),
  ('to_upper_case -> asignacion_string str_to_upper_case to_upper_case','to_upper_case',3,'p_to_upper_case','semantico.py',57),
  ('valor_tipo_inicializador -> FLOAT_TYPE','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','sintactico.py',59),
  ('valor_tipo_inicializador -> DOUBLE_TYPE','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','sintactico.py',60),
  ('valor_tipo_inicializador -> STRING_TYPE','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','sintactico.py',61),
  ('valor_tipo_inicializador -> INT_TYPE','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','sintactico.py',62),
  ('valor_tipo_inicializador -> BOOL_TYPE','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','sintactico.py',63),
  ('valor_tipo_inicializador -> CHAR_TYPE','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','sintactico.py',64),
  ('valor_tipo_inicializador -> IDENTIFICADOR','valor_tipo_inicializador',1,'p_valor_tipo_inicializador','sintactico.py',65),
  ('str_to_upper_case -> IDENTIFICADOR PUNTO TO_UPPER PAR_IZQ PAR_DER END_OF_LINE','str_to_upper_case',6,'p_str_to_upper_case','semantico.py',61),
  ('asignacion_string -> STRING_TYPE IDENTIFICADOR IGUAL STRING END_OF_LINE','asignacion_string',5,'p_asignacion_string','semantico.py',64),
  ('modificador_acceso -> PRIVATE','modificador_acceso',1,'p_modificador_acceso','sintactico.py',68),
  ('modificador_acceso -> PROTECTED','modificador_acceso',1,'p_modificador_acceso','sintactico.py',69),
  ('modificador_acceso -> PUBLIC','modificador_acceso',1,'p_modificador_acceso','sintactico.py',70),
  ('operador_realacional -> IGUAL_IGUAL','operador_realacional',1,'p_operador_realacional','sintactico.py',74),
  ('operador_realacional -> NO_IGUAL','operador_realacional',1,'p_operador_realacional','sintactico.py',75),
  ('operador_realacional -> MENOR_QUE','operador_realacional',1,'p_operador_realacional','sintactico.py',76),
  ('operador_realacional -> MENOR_O_IGUAL_QUE','operador_realacional',1,'p_operador_realacional','sintactico.py',77),
  ('operador_realacional -> MAYOR_QUE','operador_realacional',1,'p_operador_realacional','sintactico.py',78),
  ('operador_realacional -> MAYOR_O_IGUAL_QUE','operador_realacional',1,'p_operador_realacional','sintactico.py',79),
  ('semantica_stack -> operacionesStack','semantica_stack',1,'p_semantica_stack','semantico.py',81),
  ('add_stack -> stack_push','add_stack',1,'p_push_stack','semantico.py',83),
  ('operador_aritmentico -> SUMA','operador_aritmentico',1,'p_operador_aritmentico','sintactico.py',83),
  ('operador_aritmentico -> RESTA','operador_aritmentico',1,'p_operador_aritmentico','sintactico.py',84),
  ('operador_aritmentico -> MULTIPLICACION','operador_aritmentico',1,'p_operador_aritmentico','sintactico.py',85),
  ('operador_aritmentico -> DIVISION','operador_aritmentico',1,'p_operador_aritmentico','sintactico.py',86),
  ('operador_aritmentico -> MODULO','operador_aritmentico',1,'p_operador_aritmentico','sintactico.py',87),
  ('pop_stack -> stack_pop','pop_stack',1,'p_pop_stack','semantico.py',86),
  ('operacionesStack -> add_stack END_OF_LINE pop_stack END_OF_LINE','operacionesStack',4,'p_operacionesStack','semantico.py',89),
  ('operacionesStack -> add_stack END_OF_LINE','operacionesStack',2,'p_operacionesStack','semantico.py',90),
  ('operacionesStack -> pop_stack END_OF_LINE','operacionesStack',2,'p_operacionesStack','semantico.py',91),
  ('operador_condicional -> IGUAL_IGUAL','operador_condicional',1,'p_operador_condicional','sintactico.py',91),
  ('operador_condicional -> NO_IGUAL','operador_condicional',1,'p_operador_condicional','sintactico.py',92),
  ('operador_condicional -> MENOR_QUE','operador_condicional',1,'p_operador_condicional','sintactico.py',93),
  ('operador_condicional -> MENOR_O_IGUAL_QUE','operador_condicional',1,'p_operador_condicional','sintactico.py',94),
  ('operador_condicional -> MAYOR_QUE','operador_condicional',1,'p_operador_condicional','sintactico.py',95),
  ('operador_condicional -> MAYOR_O_IGUAL_QUE','operador_condicional',1,'p_operador_condicional','sintactico.py',96),
  ('operacion_string -> STRING SUMA STRING','operacion_string',3,'p_operacion_string','sintactico.py',100),
  ('operacion_string -> STRING SUMA IDENTIFICADOR','operacion_string',3,'p_operacion_string','sintactico.py',101),
  ('operacion_string -> IDENTIFICADOR SUMA STRING','operacion_string',3,'p_operacion_string','sintactico.py',102),
  ('operacion_string -> IDENTIFICADOR SUMA IDENTIFICADOR','operacion_string',3,'p_operacion_string','sintactico.py',103),
  ('semantica_lista_add -> lista_add END_OF_LINE','semantica_lista_add',2,'p_semantica_lista_add','semantico.py',105),
  ('termino -> termino operador_aritmentico factor','termino',3,'p_termino','sintactico.py',106),
  ('termino -> factor','termino',1,'p_termino','sintactico.py',107),
  ('lista_add -> add_lista','lista_add',1,'p_lista_add','semantico.py',108),
  ('semantica_casting_float_to_int -> FLOAT_TYPE IDENTIFICADOR IGUAL FLOAT END_OF_LINE cast_float_int','semantica_casting_float_to_int',6,'p_semantica_casting_float_to_int','semantico.py',111),
  ('factor -> numero','factor',1,'p_factor','sintactico.py',111),
  ('factor -> PAR_IZQ expresion_operacion_aritmetica PAR_DER','factor',3,'p_factor','sintactico.py',112),
  ('cast_float_int -> cast_float_to_int','cast_float_int',1,'p_cast_float_int','semantico.py',114),
  ('empty -> END_OF_LINE','empty',1,'p_empty','sintactico.py',123),
  ('asignacion -> asignacionSimple','asignacion',1,'p_asignacion','sintactico.py',126),
  ('asignacion -> asignacionCompuesta','asignacion',1,'p_asignacion','sintactico.py',127),
  ('asignacion -> asignacionClase','asignacion',1,'p_asignacion','sintactico.py',128),
  ('asignacion -> asignacionEstructuraD','asignacion',1,'p_asignacion','sintactico.py',129),
  ('asignacion -> asignacionNull','asignacion',1,'p_asignacion','sintactico.py',130),
  ('asignacion -> asignacionIndex','asignacion',1,'p_asignacion','sintactico.py',131),
  ('asignacion -> asignacionRef','asignacion',1,'p_asignacion','sintactico.py',132),
  ('asignacionSimple -> IDENTIFICADOR IGUAL valor','asignacionSimple',3,'p_asignacionSimple','sintactico.py',135),
  ('asignacionSimple -> IDENTIFICADOR IGUAL expresion','asignacionSimple',3,'p_asignacionSimple','sintactico.py',136),
  ('asignacionSimple -> IDENTIFICADOR IGUAL salida_tres','asignacionSimple',3,'p_asignacionSimple','sintactico.py',137),
  ('asignacionSimple -> IDENTIFICADOR IGUAL index','asignacionSimple',3,'p_asignacionSimple','sintactico.py',138),
  ('asignacionNull -> IDENTIFICADOR IGUAL NULL','asignacionNull',3,'p_asignacionNull','sintactico.py',141),
  ('asignacionClase -> IDENTIFICADOR IGUAL NEW IDENTIFICADOR PAR_IZQ PAR_DER','asignacionClase',6,'p_asignacionClase','sintactico.py',144),
  ('asignacionEstructuraD -> IDENTIFICADOR IGUAL asignacionPila','asignacionEstructuraD',3,'p_asignacionEstructuraD','sintactico.py',148),
  ('asignacionEstructuraD -> IDENTIFICADOR IGUAL asignacionQueue','asignacionEstructuraD',3,'p_asignacionEstructuraD','sintactico.py',149),
  ('asignacionEstructuraD -> IDENTIFICADOR IGUAL asignacionList','asignacionEstructuraD',3,'p_asignacionEstructuraD','sintactico.py',150),
  ('asignacionPila -> NEW STACK tipoLista PAR_IZQ PAR_DER','asignacionPila',5,'p_asignacionPila','sintactico.py',154),
  ('asignacionQueue -> NEW QUEUE tipoLista PAR_IZQ PAR_DER','asignacionQueue',5,'p_asignacionQueue','sintactico.py',157),
  ('asignacionList -> NEW LIST tipoLista PAR_IZQ PAR_DER','asignacionList',5,'p_asignacionList','sintactico.py',160),
  ('asignacionIndex -> index IGUAL index','asignacionIndex',3,'p_asignacionIndex','sintactico.py',163),
  ('asignacionIndex -> index IGUAL valor','asignacionIndex',3,'p_asignacionIndex','sintactico.py',164),
  ('index -> IDENTIFICADOR COR_IZQ INT COR_DER','index',4,'p_index','sintactico.py',168),
  ('index -> IDENTIFICADOR COR_IZQ IDENTIFICADOR COR_DER','index',4,'p_index','sintactico.py',169),
  ('asignacionRef -> IDENTIFICADOR IGUAL REF IDENTIFICADOR','asignacionRef',4,'p_asignacionRef','sintactico.py',173),
  ('asignacionRef -> IDENTIFICADOR IGUAL REF index','asignacionRef',4,'p_asignacionRef','sintactico.py',174),
  ('asignacionCompuesta -> asignacionCompuesta_Logic','asignacionCompuesta',1,'p_asignacionCompuesta','sintactico.py',178),
  ('asignacionCompuesta -> asignacionCompuesta_Number','asignacionCompuesta',1,'p_asignacionCompuesta','sintactico.py',179),
  ('asignacionCompuesta -> asignacionCompuesta_Null','asignacionCompuesta',1,'p_asignacionCompuesta','sintactico.py',180),
  ('asignacionCompuesta -> asignacionCompuesta_Shift','asignacionCompuesta',1,'p_asignacionCompuesta','sintactico.py',181),
  ('asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic BOOL','asignacionCompuesta_Logic',3,'p_asignacionCompuesta_Logic','sintactico.py',184),
  ('asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic expresion_condicional','asignacionCompuesta_Logic',3,'p_asignacionCompuesta_Logic','sintactico.py',185),
  ('asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR','asignacionCompuesta_Logic',3,'p_asignacionCompuesta_Logic','sintactico.py',186),
  ('asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic INT','asignacionCompuesta_Logic',3,'p_asignacionCompuesta_Logic','sintactico.py',187),
  ('asignacionCompuesta_Number -> IDENTIFICADOR operadoresCompuestosNumber numero','asignacionCompuesta_Number',3,'p_asignacionCompuesta_Number','sintactico.py',191),
  ('asignacionCompuesta_Number -> IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica','asignacionCompuesta_Number',3,'p_asignacionCompuesta_Number','sintactico.py',192),
  ('asignacionCompuesta_Number -> IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR','asignacionCompuesta_Number',3,'p_asignacionCompuesta_Number','sintactico.py',193),
  ('asignacionCompuesta_Null -> IDENTIFICADOR NULL_EQUAL valor','asignacionCompuesta_Null',3,'p_asignacionCompuesta_Null','sintactico.py',197),
  ('asignacionCompuesta_Null -> IDENTIFICADOR NULL_EQUAL expresion','asignacionCompuesta_Null',3,'p_asignacionCompuesta_Null','sintactico.py',198),
  ('asignacionCompuesta_Null -> IDENTIFICADOR NULL_EQUAL asignacionPila','asignacionCompuesta_Null',3,'p_asignacionCompuesta_Null','sintactico.py',199),
  ('asignacionCompuesta_Null -> IDENTIFICADOR NULL_EQUAL asignacionQueue','asignacionCompuesta_Null',3,'p_asignacionCompuesta_Null','sintactico.py',200),
  ('asignacionCompuesta_Null -> IDENTIFICADOR NULL_EQUAL asignacionList','asignacionCompuesta_Null',3,'p_asignacionCompuesta_Null','sintactico.py',201),
  ('asignacionCompuesta_Shift -> IDENTIFICADOR operadoresCompuestosShift IDENTIFICADOR','asignacionCompuesta_Shift',3,'p_asignacionCompuesta_Shift','sintactico.py',204),
  ('asignacionCompuesta_Shift -> IDENTIFICADOR operadoresCompuestosShift INT','asignacionCompuesta_Shift',3,'p_asignacionCompuesta_Shift','sintactico.py',205),
  ('operadoresCompuestosNumber -> AUMENTADO','operadoresCompuestosNumber',1,'p_operadoresCompuestosNumber','sintactico.py',209),
  ('operadoresCompuestosNumber -> DECREMENTADO','operadoresCompuestosNumber',1,'p_operadoresCompuestosNumber','sintactico.py',210),
  ('operadoresCompuestosNumber -> MULTIPLICADO_POR','operadoresCompuestosNumber',1,'p_operadoresCompuestosNumber','sintactico.py',211),
  ('operadoresCompuestosNumber -> DIVIDIDO_POR','operadoresCompuestosNumber',1,'p_operadoresCompuestosNumber','sintactico.py',212),
  ('operadoresCompuestosNumber -> MODULO_DE','operadoresCompuestosNumber',1,'p_operadoresCompuestosNumber','sintactico.py',213),
  ('operadoresCompuestosLogic -> AND_EQUAL','operadoresCompuestosLogic',1,'p_operadoresCompuestosLogic','sintactico.py',216),
  ('operadoresCompuestosLogic -> OR_EQUAL','operadoresCompuestosLogic',1,'p_operadoresCompuestosLogic','sintactico.py',217),
  ('operadoresCompuestosLogic -> EXC_OREQUAL','operadoresCompuestosLogic',1,'p_operadoresCompuestosLogic','sintactico.py',218),
  ('operadoresCompuestosShift -> LEFTSHIFT_EQUAL','operadoresCompuestosShift',1,'p_operadoresCompuestosShift','sintactico.py',222),
  ('operadoresCompuestosShift -> RIGHTSHIFT_EQUAL','operadoresCompuestosShift',1,'p_operadoresCompuestosShift','sintactico.py',223),
  ('declaracion -> valor_tipo IDENTIFICADOR','declaracion',2,'p_declaracion','sintactico.py',227),
  ('declaracion -> declaracionEstructuraD','declaracion',1,'p_declaracion','sintactico.py',228),
  ('declaracion -> declaracionAsignacion','declaracion',1,'p_declaracion','sintactico.py',229),
  ('declaracion -> declaracionClase','declaracion',1,'p_declaracion','sintactico.py',230),
  ('declaracion -> declaracionNull','declaracion',1,'p_declaracion','sintactico.py',231),
  ('declaracionNull -> valor_tipo OP_TERNARIO IDENTIFICADOR','declaracionNull',3,'p_declaracionNull','sintactico.py',235),
  ('declaracionClase -> IDENTIFICADOR IDENTIFICADOR','declaracionClase',2,'p_declaracionClase','sintactico.py',238),
  ('declaracionAsignacion -> valor_tipo asignacionSimple','declaracionAsignacion',2,'p_declaracionAsignacion','sintactico.py',241),
  ('declaracionAsignacion -> declaracionClase IGUAL NEW IDENTIFICADOR PAR_IZQ PAR_DER','declaracionAsignacion',6,'p_declaracionAsignacion','sintactico.py',242),
  ('declaracionAsignacion -> declaracionClase IGUAL NULL','declaracionAsignacion',3,'p_declaracionAsignacion','sintactico.py',243),
  ('declaracionAsignacion -> declaracionClase IGUAL IDENTIFICADOR','declaracionAsignacion',3,'p_declaracionAsignacion','sintactico.py',244),
  ('declaracionAsignacion -> declaracionNull IGUAL valor','declaracionAsignacion',3,'p_declaracionAsignacion','sintactico.py',245),
  ('declaracionAsignacion -> declaracionNull IGUAL expresion','declaracionAsignacion',3,'p_declaracionAsignacion','sintactico.py',246),
  ('declaracionAsignacion -> declaracionNull IGUAL NULL','declaracionAsignacion',3,'p_declaracionAsignacion','sintactico.py',247),
  ('declaracionAsignacion -> declaracionEstructuraD IGUAL NULL','declaracionAsignacion',3,'p_declaracionAsignacion','sintactico.py',248),
  ('declaracionAsignacion -> REF valor_tipo asignacionRef','declaracionAsignacion',3,'p_declaracionAsignacion','sintactico.py',249),
  ('declaracionAsignacion -> REF IDENTIFICADOR asignacionRef','declaracionAsignacion',3,'p_declaracionAsignacion','sintactico.py',250),
  ('declaracionAsignacion -> REF declaracionEstructuraD asignacionRef','declaracionAsignacion',3,'p_declaracionAsignacion','sintactico.py',251),
  ('declaracionEstructuraD -> declaracionList','declaracionEstructuraD',1,'p_declaracionEstructuraD','sintactico.py',255),
  ('declaracionEstructuraD -> declaracionQueue','declaracionEstructuraD',1,'p_declaracionEstructuraD','sintactico.py',256),
  ('declaracionEstructuraD -> declaracionPila','declaracionEstructuraD',1,'p_declaracionEstructuraD','sintactico.py',257),
  ('declaracionList -> LIST tipoLista IDENTIFICADOR','declaracionList',3,'p_declaracionList','sintactico.py',261),
  ('declaracionQueue -> QUEUE tipoLista IDENTIFICADOR','declaracionQueue',3,'p_declaracionQueue','sintactico.py',264),
  ('declaracionPila -> STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR','declaracionPila',5,'p_declaracionPila','sintactico.py',267),
  ('comparacion -> valor operador_realacional valor','comparacion',3,'p_comparacion','sintactico.py',291),
  ('estructura_control -> while','estructura_control',1,'p_estructura_control','sintactico.py',300),
  ('estructura_control -> switch_case','estructura_control',1,'p_estructura_control','sintactico.py',301),
  ('estructura_control -> for','estructura_control',1,'p_estructura_control','sintactico.py',302),
  ('while -> while_normal','while',1,'p_while','sintactico.py',307),
  ('while -> while_do','while',1,'p_while','sintactico.py',308),
  ('while_normal -> WHILE PAR_IZQ expresion_condicional PAR_DER LLAVE_IZQ body_while LLAVE_DER','while_normal',7,'p_while_normal','sintactico.py',312),
  ('while_do -> DO LLAVE_IZQ body_while LLAVE_DER WHILE PAR_IZQ expresion_condicional PAR_DER END_OF_LINE','while_do',9,'p_while_do','sintactico.py',315),
  ('body_while -> asignacion END_OF_LINE','body_while',2,'p_body_while','sintactico.py',318),
  ('body_while -> declaracion END_OF_LINE','body_while',2,'p_body_while','sintactico.py',319),
  ('body_while -> salida_entrada END_OF_LINE','body_while',2,'p_body_while','sintactico.py',320),
  ('body_while -> BREAK END_OF_LINE','body_while',2,'p_body_while','sintactico.py',321),
  ('body_while -> CONTINUE END_OF_LINE','body_while',2,'p_body_while','sintactico.py',322),
  ('body_while -> asignacion END_OF_LINE body_while','body_while',3,'p_body_while','sintactico.py',323),
  ('body_while -> declaracion END_OF_LINE body_while','body_while',3,'p_body_while','sintactico.py',324),
  ('body_while -> salida_entrada END_OF_LINE body_while','body_while',3,'p_body_while','sintactico.py',325),
  ('body_while -> BREAK END_OF_LINE body_while','body_while',3,'p_body_while','sintactico.py',326),
  ('body_while -> CONTINUE END_OF_LINE body_while','body_while',3,'p_body_while','sintactico.py',327),
  ('switch_case -> SWITCH PAR_IZQ valor PAR_DER LLAVE_IZQ casos LLAVE_DER','switch_case',7,'p_switch_case','sintactico.py',337),
  ('casos -> CASE valor DOS_PUNTOS body_case BREAK END_OF_LINE','casos',6,'p_casos','sintactico.py',340),
  ('casos -> CASE valor DOS_PUNTOS BREAK END_OF_LINE','casos',5,'p_casos','sintactico.py',341),
  ('casos -> CASE valor DOS_PUNTOS body_case BREAK END_OF_LINE casos','casos',7,'p_casos','sintactico.py',342),
  ('casos -> CASE valor DOS_PUNTOS BREAK END_OF_LINE casos','casos',6,'p_casos','sintactico.py',343),
  ('body_case -> asignacion END_OF_LINE','body_case',2,'p_body_case','sintactico.py',346),
  ('body_case -> declaracion END_OF_LINE','body_case',2,'p_body_case','sintactico.py',347),
  ('body_case -> comparacion END_OF_LINE','body_case',2,'p_body_case','sintactico.py',348),
  ('body_case -> salida_entrada END_OF_LINE','body_case',2,'p_body_case','sintactico.py',349),
  ('body_case -> asignacion END_OF_LINE body_case','body_case',3,'p_body_case','sintactico.py',350),
  ('body_case -> declaracion END_OF_LINE body_case','body_case',3,'p_body_case','sintactico.py',351),
  ('body_case -> salida_entrada END_OF_LINE body_case','body_case',3,'p_body_case','sintactico.py',352),
  ('body_case -> comparacion END_OF_LINE body_case','body_case',3,'p_body_case','sintactico.py',353),
  ('for -> FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DER','for',11,'p_for','sintactico.py',363),
  ('forIterador -> IDENTIFICADOR operadorForIteracion','forIterador',2,'p_forIterador','sintactico.py',369),
  ('operadorForIteracion -> INCREMENTO','operadorForIteracion',1,'p_operadorForIteracion','sintactico.py',373),
  ('operadorForIteracion -> DECREMENTO','operadorForIteracion',1,'p_operadorForIteracion','sintactico.py',374),
  ('forCondicion -> IDENTIFICADOR operador_condicional valorForCondicion','forCondicion',3,'p_forCondicion','sintactico.py',380),
  ('valorForCondicion -> FLOAT','valorForCondicion',1,'p_valorForCondicion','sintactico.py',384),
  ('valorForCondicion -> DOUBLE','valorForCondicion',1,'p_valorForCondicion','sintactico.py',385),
  ('valorForCondicion -> INT','valorForCondicion',1,'p_valorForCondicion','sintactico.py',386),
  ('valorForCondicion -> IDENTIFICADOR','valorForCondicion',1,'p_valorForCondicion','sintactico.py',387),
  ('forInicializador -> tipoDatoForInicializador IDENTIFICADOR IGUAL valorForInicializador','forInicializador',4,'p_forInicializador','sintactico.py',393),
  ('forInicializador -> IDENTIFICADOR IGUAL valorForInicializador','forInicializador',3,'p_forInicializador','sintactico.py',394),
  ('tipoDatoForInicializador -> FLOAT_TYPE','tipoDatoForInicializador',1,'p_tipoDatoForInicializador','sintactico.py',399),
  ('tipoDatoForInicializador -> DOUBLE_TYPE','tipoDatoForInicializador',1,'p_tipoDatoForInicializador','sintactico.py',400),
  ('tipoDatoForInicializador -> INT_TYPE','tipoDatoForInicializador',1,'p_tipoDatoForInicializador','sintactico.py',401),
  ('valorForInicializador -> FLOAT','valorForInicializador',1,'p_valorForInicializador','sintactico.py',405),
  ('valorForInicializador -> DOUBLE','valorForInicializador',1,'p_valorForInicializador','sintactico.py',406),
  ('valorForInicializador -> INT','valorForInicializador',1,'p_valorForInicializador','sintactico.py',407),
  ('valorForInicializador -> IDENTIFICADOR','valorForInicializador',1,'p_valorForInicializador','sintactico.py',408),
  ('estructura_datos -> lista','estructura_datos',1,'p_estructura_datos','sintactico.py',420),
  ('estructura_datos -> pila','estructura_datos',1,'p_estructura_datos','sintactico.py',421),
  ('lista -> LIST tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINE','lista',10,'p_lista','sintactico.py',425),
  ('tipoLista -> MENOR_QUE valor_tipo_inicializador MAYOR_QUE','tipoLista',3,'p_tipoLista','sintactico.py',428),
  ('funciones_estructura_datos_lista -> add_lista','funciones_estructura_datos_lista',1,'p_funciones_estructura_datos_lista','sintactico.py',431),
  ('add_lista -> IDENTIFICADOR PUNTO ADD PAR_IZQ valor PAR_DER','add_lista',6,'p_add_lista','sintactico.py',434),
  ('cast_float_to_int -> INT_TYPE IDENTIFICADOR IGUAL PAR_IZQ INT_TYPE PAR_DER IDENTIFICADOR END_OF_LINE','cast_float_to_int',8,'p_cast_float_to_int','sintactico.py',437),
  ('pila -> STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL NEW STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINE','pila',14,'p_pila','sintactico.py',441),
  ('funciones_estructura_datos -> stack_push','funciones_estructura_datos',1,'p_funciones_estructura_datos','sintactico.py',444),
  ('funciones_estructura_datos -> stack_pop','funciones_estructura_datos',1,'p_funciones_estructura_datos','sintactico.py',445),
  ('stack_push -> IDENTIFICADOR PUNTO PUSH PAR_IZQ valor PAR_DER','stack_push',6,'p_stack_push','sintactico.py',449),
  ('stack_push -> IDENTIFICADOR PUNTO PUSH PAR_IZQ NEW IDENTIFICADOR PAR_IZQ PAR_DER PAR_DER','stack_push',9,'p_stack_push','sintactico.py',450),
  ('stack_pop -> IDENTIFICADOR PUNTO POP PAR_IZQ PAR_DER','stack_pop',5,'p_stack_pop','sintactico.py',454),
  ('expresion -> expresion_operacion_aritmetica','expresion',1,'p_expresion','sintactico.py',464),
  ('expresion -> expresion_condicional','expresion',1,'p_expresion','sintactico.py',465),
  ('expresion_operacion_aritmetica -> expresion_operacion_aritmetica operador_aritmentico termino','expresion_operacion_aritmetica',3,'p_expresion_operacion_aritmetica','sintactico.py',469),
  ('expresion_operacion_aritmetica -> numero operador_aritmentico expresion_operacion_aritmetica','expresion_operacion_aritmetica',3,'p_expresion_operacion_aritmetica','sintactico.py',470),
  ('expresion_operacion_aritmetica -> numero operador_aritmentico numero','expresion_operacion_aritmetica',3,'p_expresion_operacion_aritmetica','sintactico.py',471),
  ('expresion_operacion_aritmetica -> numero operador_aritmentico IDENTIFICADOR','expresion_operacion_aritmetica',3,'p_expresion_operacion_aritmetica','sintactico.py',472),
  ('expresion_operacion_aritmetica -> IDENTIFICADOR operador_aritmentico numero','expresion_operacion_aritmetica',3,'p_expresion_operacion_aritmetica','sintactico.py',473),
  ('expresion_operacion_aritmetica -> IDENTIFICADOR operador_aritmentico IDENTIFICADOR','expresion_operacion_aritmetica',3,'p_expresion_operacion_aritmetica','sintactico.py',474),
  ('expresion_operacion_aritmetica -> termino','expresion_operacion_aritmetica',1,'p_expresion_operacion_aritmetica','sintactico.py',475),
  ('expresion_condicional -> numero operador_condicional numero','expresion_condicional',3,'p_expresion_condicional','sintactico.py',479),
  ('expresion_condicional -> IDENTIFICADOR operador_condicional IDENTIFICADOR','expresion_condicional',3,'p_expresion_condicional','sintactico.py',480),
  ('expresion_condicional -> IDENTIFICADOR operador_condicional numero','expresion_condicional',3,'p_expresion_condicional','sintactico.py',481),
  ('expresion_condicional -> numero operador_condicional IDENTIFICADOR','expresion_condicional',3,'p_expresion_condicional','sintactico.py',482),
  ('salida_entrada -> salida_uno','salida_entrada',1,'p_salida_entrada','sintactico.py',493),
  ('salida_entrada -> salida_dos','salida_entrada',1,'p_salida_entrada','sintactico.py',494),
  ('salida_entrada -> salida_tres','salida_entrada',1,'p_salida_entrada','sintactico.py',495),
  ('salida_uno -> CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER','salida_uno',4,'p_salida_uno','sintactico.py',499),
  ('salida_uno -> CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER','salida_uno',4,'p_salida_uno','sintactico.py',500),
  ('salida_uno -> CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER','salida_uno',4,'p_salida_uno','sintactico.py',501),
  ('salida_dos -> CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER','salida_dos',5,'p_salida_dos','sintactico.py',504),
  ('salida_tres -> CONSOLE_READLINE PAR_IZQ PAR_DER','salida_tres',3,'p_salida_tres','sintactico.py',507),
  ('funcion -> funcion_tipo_uno','funcion',1,'p_funcion','sintactico.py',517),
  ('funcion -> funcion_tipo_tres','funcion',1,'p_funcion','sintactico.py',518),
  ('funcion_tipo_uno -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ body LLAVE_DER','funcion_tipo_uno',8,'p_funcion_tipo_uno','sintactico.py',522),
  ('funcion_tipo_tres -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ parametrosF PAR_DER LLAVE_IZQ bodyF LLAVE_DER','funcion_tipo_tres',9,'p_funcion_tipo_tres','sintactico.py',528),
  ('parametrosF -> declaracion','parametrosF',1,'p_parametrosF','sintactico.py',531),
  ('parametrosF -> declaracion COMA parametrosF','parametrosF',3,'p_parametrosF','sintactico.py',532),
  ('bodyF -> asignacion END_OF_LINE','bodyF',2,'p_bodyF','sintactico.py',536),
  ('bodyF -> declaracion END_OF_LINE','bodyF',2,'p_bodyF','sintactico.py',537),
  ('bodyF -> salida_entrada END_OF_LINE','bodyF',2,'p_bodyF','sintactico.py',538),
  ('bodyF -> asignacion END_OF_LINE bodyF','bodyF',3,'p_bodyF','sintactico.py',539),
  ('bodyF -> declaracion END_OF_LINE bodyF','bodyF',3,'p_bodyF','sintactico.py',540),
  ('bodyF -> salida_entrada END_OF_LINE bodyF','bodyF',3,'p_bodyF','sintactico.py',541),
  ('lambda_exp -> lambdaArg LAMBDA lambdaCuerpo','lambda_exp',3,'p_lambda_exp','sintactico.py',544),
  ('lambdaArg -> PAR_IZQ PAR_DER','lambdaArg',2,'p_lambdaArg','sintactico.py',547),
  ('lambdaArg -> PAR_IZQ lambdaParametrosUno PAR_DER','lambdaArg',3,'p_lambdaArg','sintactico.py',548),
  ('lambdaArg -> PAR_IZQ lambdaParametrosDos PAR_DER','lambdaArg',3,'p_lambdaArg','sintactico.py',549),
  ('lambdaArg -> IDENTIFICADOR','lambdaArg',1,'p_lambdaArg','sintactico.py',550),
  ('lambdaParametrosUno -> valor_tipo IDENTIFICADOR','lambdaParametrosUno',2,'p_lambdaParametrosUno','sintactico.py',553),
  ('lambdaParametrosUno -> valor_tipo IDENTIFICADOR COMA lambdaParametrosUno','lambdaParametrosUno',4,'p_lambdaParametrosUno','sintactico.py',554),
  ('lambdaParametrosDos -> IDENTIFICADOR','lambdaParametrosDos',1,'p_lambdaParametrosDos','sintactico.py',557),
  ('lambdaParametrosDos -> IDENTIFICADOR COMA lambdaParametrosDos','lambdaParametrosDos',3,'p_lambdaParametrosDos','sintactico.py',558),
  ('lambdaCuerpo -> expresion','lambdaCuerpo',1,'p_lambdaCuerpo','sintactico.py',562),
  ('lambdaCuerpo -> salida_uno','lambdaCuerpo',1,'p_lambdaCuerpo','sintactico.py',563),
  ('lambdaCuerpo -> salida_dos','lambdaCuerpo',1,'p_lambdaCuerpo','sintactico.py',564),
]
