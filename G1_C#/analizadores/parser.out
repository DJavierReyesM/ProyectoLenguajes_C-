Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    BYTE
    CLASS
    COMILLA_DOBLE
    COMILLA_SIMPLE
    CONST
    C_IDENT_TEXTUAL
    DEFAULT
    ELSE
    FINALLY
    GLOBAL
    IN
    IR
    LET
    NEGACION
    NOR
    NULL_VAL
    OBJECT
    ON
    OR
    ORDERBY
    RETURN
    SHIFT_MAYOR
    SHIFT_MENOR
    SIMPLE_AND
    SIMPLE_OR
    STRUCT
    THIS
    TO_UPPER
    TYPEOF
    VAR
    WHEN
    WHERE

Grammar

Rule 0     S' -> body
Rule 1     body -> semantica_lista_add
Rule 2     body -> semantica_casting_float_to_int
Rule 3     body -> semantica_stack
Rule 4     body -> add_queue END_OF_LINE
Rule 5     body -> cast_float_to_int END_OF_LINE
Rule 6     body -> to_upper_case END_OF_LINE
Rule 7     add_queue -> CHAR_TYPE
Rule 8     valor -> CHAR
Rule 9     valor -> numero
Rule 10    valor -> BOOL
Rule 11    valor -> STRING
Rule 12    valor -> IDENTIFICADOR
Rule 13    to_upper_case -> CHAR_TYPE
Rule 14    numero -> FLOAT
Rule 15    numero -> DOUBLE
Rule 16    numero -> INT
Rule 17    ftipo -> valor_tipo
Rule 18    ftipo -> VOID
Rule 19    valor_tipo -> CHAR_TYPE
Rule 20    valor_tipo -> FLOAT_TYPE
Rule 21    valor_tipo -> DOUBLE_TYPE
Rule 22    valor_tipo -> INT_TYPE
Rule 23    valor_tipo -> BOOL_TYPE
Rule 24    valor_tipo -> STRING_TYPE
Rule 25    semantica_stack -> operacionesStack
Rule 26    add_stack -> stack_push
Rule 27    pop_stack -> stack_pop
Rule 28    valor_tipo_inicializador -> FLOAT_TYPE
Rule 29    valor_tipo_inicializador -> DOUBLE_TYPE
Rule 30    valor_tipo_inicializador -> STRING_TYPE
Rule 31    valor_tipo_inicializador -> INT_TYPE
Rule 32    valor_tipo_inicializador -> BOOL_TYPE
Rule 33    valor_tipo_inicializador -> CHAR_TYPE
Rule 34    valor_tipo_inicializador -> IDENTIFICADOR
Rule 35    operacionesStack -> add_stack END_OF_LINE pop_stack END_OF_LINE
Rule 36    operacionesStack -> add_stack END_OF_LINE
Rule 37    operacionesStack -> pop_stack END_OF_LINE
Rule 38    modificador_acceso -> PRIVATE
Rule 39    modificador_acceso -> PROTECTED
Rule 40    modificador_acceso -> PUBLIC
Rule 41    operador_realacional -> IGUAL_IGUAL
Rule 42    operador_realacional -> NO_IGUAL
Rule 43    operador_realacional -> MENOR_QUE
Rule 44    operador_realacional -> MENOR_O_IGUAL_QUE
Rule 45    operador_realacional -> MAYOR_QUE
Rule 46    operador_realacional -> MAYOR_O_IGUAL_QUE
Rule 47    semantica_lista_add -> lista_add END_OF_LINE
Rule 48    lista_add -> add_lista
Rule 49    semantica_casting_float_to_int -> FLOAT_TYPE IDENTIFICADOR IGUAL FLOAT END_OF_LINE cast_float_int
Rule 50    operador_aritmentico -> SUMA
Rule 51    operador_aritmentico -> RESTA
Rule 52    operador_aritmentico -> MULTIPLICACION
Rule 53    operador_aritmentico -> DIVISION
Rule 54    operador_aritmentico -> MODULO
Rule 55    cast_float_int -> cast_float_to_int
Rule 56    operador_condicional -> IGUAL_IGUAL
Rule 57    operador_condicional -> NO_IGUAL
Rule 58    operador_condicional -> MENOR_QUE
Rule 59    operador_condicional -> MENOR_O_IGUAL_QUE
Rule 60    operador_condicional -> MAYOR_QUE
Rule 61    operador_condicional -> MAYOR_O_IGUAL_QUE
Rule 62    operacion_string -> STRING SUMA STRING
Rule 63    operacion_string -> STRING SUMA IDENTIFICADOR
Rule 64    operacion_string -> IDENTIFICADOR SUMA STRING
Rule 65    operacion_string -> IDENTIFICADOR SUMA IDENTIFICADOR
Rule 66    termino -> termino operador_aritmentico factor
Rule 67    termino -> factor
Rule 68    factor -> numero
Rule 69    factor -> PAR_IZQ expresion_operacion_aritmetica PAR_DER
Rule 70    empty -> END_OF_LINE
Rule 71    asignacion -> asignacionSimple
Rule 72    asignacion -> asignacionCompuesta
Rule 73    asignacion -> asignacionClase
Rule 74    asignacion -> asignacionEstructuraD
Rule 75    asignacion -> asignacionNull
Rule 76    asignacion -> asignacionIndex
Rule 77    asignacion -> asignacionRef
Rule 78    asignacionSimple -> IDENTIFICADOR IGUAL valor
Rule 79    asignacionSimple -> IDENTIFICADOR IGUAL expresion
Rule 80    asignacionSimple -> IDENTIFICADOR IGUAL salida_tres
Rule 81    asignacionSimple -> IDENTIFICADOR IGUAL index
Rule 82    asignacionNull -> IDENTIFICADOR IGUAL NULL
Rule 83    asignacionClase -> IDENTIFICADOR IGUAL NEW IDENTIFICADOR PAR_IZQ PAR_DER
Rule 84    asignacionEstructuraD -> IDENTIFICADOR IGUAL asignacionPila
Rule 85    asignacionEstructuraD -> IDENTIFICADOR IGUAL asignacionQueue
Rule 86    asignacionEstructuraD -> IDENTIFICADOR IGUAL asignacionList
Rule 87    asignacionPila -> NEW STACK tipoLista PAR_IZQ PAR_DER
Rule 88    asignacionQueue -> NEW QUEUE tipoLista PAR_IZQ PAR_DER
Rule 89    asignacionList -> NEW LIST tipoLista PAR_IZQ PAR_DER
Rule 90    asignacionIndex -> index IGUAL index
Rule 91    asignacionIndex -> index IGUAL valor
Rule 92    index -> IDENTIFICADOR COR_IZQ INT COR_DER
Rule 93    index -> IDENTIFICADOR COR_IZQ IDENTIFICADOR COR_DER
Rule 94    asignacionRef -> IDENTIFICADOR IGUAL REF IDENTIFICADOR
Rule 95    asignacionRef -> IDENTIFICADOR IGUAL REF index
Rule 96    asignacionCompuesta -> asignacionCompuesta_Logic
Rule 97    asignacionCompuesta -> asignacionCompuesta_Number
Rule 98    asignacionCompuesta -> asignacionCompuesta_Null
Rule 99    asignacionCompuesta -> asignacionCompuesta_Shift
Rule 100   asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic BOOL
Rule 101   asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic expresion_condicional
Rule 102   asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic IDENTIFICADOR
Rule 103   asignacionCompuesta_Logic -> IDENTIFICADOR operadoresCompuestosLogic INT
Rule 104   asignacionCompuesta_Number -> IDENTIFICADOR operadoresCompuestosNumber numero
Rule 105   asignacionCompuesta_Number -> IDENTIFICADOR operadoresCompuestosNumber expresion_operacion_aritmetica
Rule 106   asignacionCompuesta_Number -> IDENTIFICADOR operadoresCompuestosNumber IDENTIFICADOR
Rule 107   asignacionCompuesta_Null -> IDENTIFICADOR NULL_EQUAL valor
Rule 108   asignacionCompuesta_Null -> IDENTIFICADOR NULL_EQUAL expresion
Rule 109   asignacionCompuesta_Null -> IDENTIFICADOR NULL_EQUAL asignacionPila
Rule 110   asignacionCompuesta_Null -> IDENTIFICADOR NULL_EQUAL asignacionQueue
Rule 111   asignacionCompuesta_Null -> IDENTIFICADOR NULL_EQUAL asignacionList
Rule 112   asignacionCompuesta_Shift -> IDENTIFICADOR operadoresCompuestosShift IDENTIFICADOR
Rule 113   asignacionCompuesta_Shift -> IDENTIFICADOR operadoresCompuestosShift INT
Rule 114   operadoresCompuestosNumber -> AUMENTADO
Rule 115   operadoresCompuestosNumber -> DECREMENTADO
Rule 116   operadoresCompuestosNumber -> MULTIPLICADO_POR
Rule 117   operadoresCompuestosNumber -> DIVIDIDO_POR
Rule 118   operadoresCompuestosNumber -> MODULO_DE
Rule 119   operadoresCompuestosLogic -> AND_EQUAL
Rule 120   operadoresCompuestosLogic -> OR_EQUAL
Rule 121   operadoresCompuestosLogic -> EXC_OREQUAL
Rule 122   operadoresCompuestosShift -> LEFTSHIFT_EQUAL
Rule 123   operadoresCompuestosShift -> RIGHTSHIFT_EQUAL
Rule 124   declaracion -> valor_tipo IDENTIFICADOR
Rule 125   declaracion -> declaracionEstructuraD
Rule 126   declaracion -> declaracionAsignacion
Rule 127   declaracion -> declaracionClase
Rule 128   declaracion -> declaracionNull
Rule 129   declaracionNull -> valor_tipo OP_TERNARIO IDENTIFICADOR
Rule 130   declaracionClase -> IDENTIFICADOR IDENTIFICADOR
Rule 131   declaracionAsignacion -> valor_tipo asignacionSimple
Rule 132   declaracionAsignacion -> declaracionClase IGUAL NEW IDENTIFICADOR PAR_IZQ PAR_DER
Rule 133   declaracionAsignacion -> declaracionClase IGUAL NULL
Rule 134   declaracionAsignacion -> declaracionClase IGUAL IDENTIFICADOR
Rule 135   declaracionAsignacion -> declaracionNull IGUAL valor
Rule 136   declaracionAsignacion -> declaracionNull IGUAL expresion
Rule 137   declaracionAsignacion -> declaracionNull IGUAL NULL
Rule 138   declaracionAsignacion -> declaracionEstructuraD IGUAL NULL
Rule 139   declaracionAsignacion -> REF valor_tipo asignacionRef
Rule 140   declaracionAsignacion -> REF IDENTIFICADOR asignacionRef
Rule 141   declaracionAsignacion -> REF declaracionEstructuraD asignacionRef
Rule 142   declaracionEstructuraD -> declaracionList
Rule 143   declaracionEstructuraD -> declaracionQueue
Rule 144   declaracionEstructuraD -> declaracionPila
Rule 145   declaracionList -> LIST tipoLista IDENTIFICADOR
Rule 146   declaracionQueue -> QUEUE tipoLista IDENTIFICADOR
Rule 147   declaracionPila -> STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR
Rule 148   comparacion -> valor operador_realacional valor
Rule 149   estructura_control -> while
Rule 150   estructura_control -> switch_case
Rule 151   estructura_control -> for
Rule 152   while -> while_normal
Rule 153   while -> while_do
Rule 154   while_normal -> WHILE PAR_IZQ expresion_condicional PAR_DER LLAVE_IZQ body_while LLAVE_DER
Rule 155   while_do -> DO LLAVE_IZQ body_while LLAVE_DER WHILE PAR_IZQ expresion_condicional PAR_DER END_OF_LINE
Rule 156   body_while -> asignacion END_OF_LINE
Rule 157   body_while -> declaracion END_OF_LINE
Rule 158   body_while -> salida_entrada END_OF_LINE
Rule 159   body_while -> BREAK END_OF_LINE
Rule 160   body_while -> CONTINUE END_OF_LINE
Rule 161   body_while -> asignacion END_OF_LINE body_while
Rule 162   body_while -> declaracion END_OF_LINE body_while
Rule 163   body_while -> salida_entrada END_OF_LINE body_while
Rule 164   body_while -> BREAK END_OF_LINE body_while
Rule 165   body_while -> CONTINUE END_OF_LINE body_while
Rule 166   switch_case -> SWITCH PAR_IZQ valor PAR_DER LLAVE_IZQ casos LLAVE_DER
Rule 167   casos -> CASE valor DOS_PUNTOS body_case BREAK END_OF_LINE
Rule 168   casos -> CASE valor DOS_PUNTOS BREAK END_OF_LINE
Rule 169   casos -> CASE valor DOS_PUNTOS body_case BREAK END_OF_LINE casos
Rule 170   casos -> CASE valor DOS_PUNTOS BREAK END_OF_LINE casos
Rule 171   body_case -> asignacion END_OF_LINE
Rule 172   body_case -> declaracion END_OF_LINE
Rule 173   body_case -> comparacion END_OF_LINE
Rule 174   body_case -> salida_entrada END_OF_LINE
Rule 175   body_case -> asignacion END_OF_LINE body_case
Rule 176   body_case -> declaracion END_OF_LINE body_case
Rule 177   body_case -> salida_entrada END_OF_LINE body_case
Rule 178   body_case -> comparacion END_OF_LINE body_case
Rule 179   for -> FOR PAR_IZQ forInicializador END_OF_LINE forCondicion END_OF_LINE forIterador PAR_DER LLAVE_IZQ body LLAVE_DER
Rule 180   forIterador -> IDENTIFICADOR operadorForIteracion
Rule 181   operadorForIteracion -> INCREMENTO
Rule 182   operadorForIteracion -> DECREMENTO
Rule 183   forCondicion -> IDENTIFICADOR operador_condicional valorForCondicion
Rule 184   valorForCondicion -> FLOAT
Rule 185   valorForCondicion -> DOUBLE
Rule 186   valorForCondicion -> INT
Rule 187   valorForCondicion -> IDENTIFICADOR
Rule 188   forInicializador -> tipoDatoForInicializador IDENTIFICADOR IGUAL valorForInicializador
Rule 189   forInicializador -> IDENTIFICADOR IGUAL valorForInicializador
Rule 190   tipoDatoForInicializador -> FLOAT_TYPE
Rule 191   tipoDatoForInicializador -> DOUBLE_TYPE
Rule 192   tipoDatoForInicializador -> INT_TYPE
Rule 193   valorForInicializador -> FLOAT
Rule 194   valorForInicializador -> DOUBLE
Rule 195   valorForInicializador -> INT
Rule 196   valorForInicializador -> IDENTIFICADOR
Rule 197   estructura_datos -> lista
Rule 198   estructura_datos -> pila
Rule 199   lista -> LIST tipoLista IDENTIFICADOR IGUAL NEW LIST tipoLista PAR_IZQ PAR_DER END_OF_LINE
Rule 200   tipoLista -> MENOR_QUE valor_tipo_inicializador MAYOR_QUE
Rule 201   funciones_estructura_datos_lista -> add_lista
Rule 202   add_lista -> IDENTIFICADOR PUNTO ADD PAR_IZQ valor PAR_DER
Rule 203   cast_float_to_int -> INT_TYPE IDENTIFICADOR IGUAL PAR_IZQ INT_TYPE PAR_DER IDENTIFICADOR END_OF_LINE
Rule 204   pila -> STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE IDENTIFICADOR IGUAL NEW STACK MENOR_QUE valor_tipo_inicializador MAYOR_QUE PAR_IZQ PAR_DER END_OF_LINE
Rule 205   funciones_estructura_datos -> stack_push
Rule 206   funciones_estructura_datos -> stack_pop
Rule 207   stack_push -> IDENTIFICADOR PUNTO PUSH PAR_IZQ valor PAR_DER
Rule 208   stack_push -> IDENTIFICADOR PUNTO PUSH PAR_IZQ NEW IDENTIFICADOR PAR_IZQ PAR_DER PAR_DER
Rule 209   stack_pop -> IDENTIFICADOR PUNTO POP PAR_IZQ PAR_DER
Rule 210   expresion -> expresion_operacion_aritmetica
Rule 211   expresion -> expresion_condicional
Rule 212   expresion_operacion_aritmetica -> expresion_operacion_aritmetica operador_aritmentico termino
Rule 213   expresion_operacion_aritmetica -> numero operador_aritmentico expresion_operacion_aritmetica
Rule 214   expresion_operacion_aritmetica -> numero operador_aritmentico numero
Rule 215   expresion_operacion_aritmetica -> numero operador_aritmentico IDENTIFICADOR
Rule 216   expresion_operacion_aritmetica -> IDENTIFICADOR operador_aritmentico numero
Rule 217   expresion_operacion_aritmetica -> IDENTIFICADOR operador_aritmentico IDENTIFICADOR
Rule 218   expresion_operacion_aritmetica -> termino
Rule 219   expresion_condicional -> numero operador_condicional numero
Rule 220   expresion_condicional -> IDENTIFICADOR operador_condicional IDENTIFICADOR
Rule 221   expresion_condicional -> IDENTIFICADOR operador_condicional numero
Rule 222   expresion_condicional -> numero operador_condicional IDENTIFICADOR
Rule 223   salida_entrada -> salida_uno
Rule 224   salida_entrada -> salida_dos
Rule 225   salida_entrada -> salida_tres
Rule 226   salida_uno -> CONSOLE_WRITELINE PAR_IZQ STRING PAR_DER
Rule 227   salida_uno -> CONSOLE_WRITELINE PAR_IZQ operacion_string PAR_DER
Rule 228   salida_uno -> CONSOLE_WRITELINE PAR_IZQ IDENTIFICADOR PAR_DER
Rule 229   salida_dos -> CONSOLE_WRITELINE PAR_IZQ C_CADENA_INTERPOLADA STRING PAR_DER
Rule 230   salida_tres -> CONSOLE_READLINE PAR_IZQ PAR_DER
Rule 231   funcion -> funcion_tipo_uno
Rule 232   funcion -> funcion_tipo_tres
Rule 233   funcion_tipo_uno -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ PAR_DER LLAVE_IZQ body LLAVE_DER
Rule 234   funcion_tipo_tres -> modificador_acceso VOID IDENTIFICADOR PAR_IZQ parametrosF PAR_DER LLAVE_IZQ bodyF LLAVE_DER
Rule 235   parametrosF -> declaracion
Rule 236   parametrosF -> declaracion COMA parametrosF
Rule 237   bodyF -> asignacion END_OF_LINE
Rule 238   bodyF -> declaracion END_OF_LINE
Rule 239   bodyF -> salida_entrada END_OF_LINE
Rule 240   bodyF -> asignacion END_OF_LINE bodyF
Rule 241   bodyF -> declaracion END_OF_LINE bodyF
Rule 242   bodyF -> salida_entrada END_OF_LINE bodyF
Rule 243   lambda_exp -> lambdaArg LAMBDA lambdaCuerpo
Rule 244   lambdaArg -> PAR_IZQ PAR_DER
Rule 245   lambdaArg -> PAR_IZQ lambdaParametrosUno PAR_DER
Rule 246   lambdaArg -> PAR_IZQ lambdaParametrosDos PAR_DER
Rule 247   lambdaArg -> IDENTIFICADOR
Rule 248   lambdaParametrosUno -> valor_tipo IDENTIFICADOR
Rule 249   lambdaParametrosUno -> valor_tipo IDENTIFICADOR COMA lambdaParametrosUno
Rule 250   lambdaParametrosDos -> IDENTIFICADOR
Rule 251   lambdaParametrosDos -> IDENTIFICADOR COMA lambdaParametrosDos
Rule 252   lambdaCuerpo -> expresion
Rule 253   lambdaCuerpo -> salida_uno
Rule 254   lambdaCuerpo -> salida_dos

Terminals, with rules where they appear

ADD                  : 202
AND                  : 
AND_EQUAL            : 119
AUMENTADO            : 114
BOOL                 : 10 100
BOOL_TYPE            : 23 32
BREAK                : 159 164 167 168 169 170
BYTE                 : 
CASE                 : 167 168 169 170
CHAR                 : 8
CHAR_TYPE            : 7 13 19 33
CLASS                : 
COMA                 : 236 249 251
COMILLA_DOBLE        : 
COMILLA_SIMPLE       : 
CONSOLE_READLINE     : 230
CONSOLE_WRITELINE    : 226 227 228 229
CONST                : 
CONTINUE             : 160 165
COR_DER              : 92 93
COR_IZQ              : 92 93
C_CADENA_INTERPOLADA : 229
C_IDENT_TEXTUAL      : 
DECREMENTADO         : 115
DECREMENTO           : 182
DEFAULT              : 
DIVIDIDO_POR         : 117
DIVISION             : 53
DO                   : 155
DOS_PUNTOS           : 167 168 169 170
DOUBLE               : 15 185 194
DOUBLE_TYPE          : 21 29 191
ELSE                 : 
END_OF_LINE          : 4 5 6 35 35 36 37 47 49 70 155 156 157 158 159 160 161 162 163 164 165 167 168 169 170 171 172 173 174 175 176 177 178 179 179 199 203 204 237 238 239 240 241 242
EXC_OREQUAL          : 121
FINALLY              : 
FLOAT                : 14 49 184 193
FLOAT_TYPE           : 20 28 49 190
FOR                  : 179
GLOBAL               : 
IDENTIFICADOR        : 12 34 49 63 64 65 65 78 79 80 81 82 83 83 84 85 86 92 93 93 94 94 95 100 101 102 102 103 104 105 106 106 107 108 109 110 111 112 112 113 124 129 130 130 132 134 140 145 146 147 180 183 187 188 189 196 199 202 203 203 204 207 208 208 209 215 216 217 217 220 220 221 222 228 233 234 247 248 249 250 251
IGUAL                : 49 78 79 80 81 82 83 84 85 86 90 91 94 95 132 133 134 135 136 137 138 188 189 199 203 204
IGUAL_IGUAL          : 41 56
IN                   : 
INCREMENTO           : 181
INT                  : 16 92 103 113 186 195
INT_TYPE             : 22 31 192 203 203
IR                   : 
LAMBDA               : 243
LEFTSHIFT_EQUAL      : 122
LET                  : 
LIST                 : 89 145 199 199
LLAVE_DER            : 154 155 166 179 233 234
LLAVE_IZQ            : 154 155 166 179 233 234
MAYOR_O_IGUAL_QUE    : 46 61
MAYOR_QUE            : 45 60 147 200 204 204
MENOR_O_IGUAL_QUE    : 44 59
MENOR_QUE            : 43 58 147 200 204 204
MODULO               : 54
MODULO_DE            : 118
MULTIPLICACION       : 52
MULTIPLICADO_POR     : 116
NEGACION             : 
NEW                  : 83 87 88 89 132 199 204 208
NOR                  : 
NO_IGUAL             : 42 57
NULL                 : 82 133 137 138
NULL_EQUAL           : 107 108 109 110 111
NULL_VAL             : 
OBJECT               : 
ON                   : 
OP_TERNARIO          : 129
OR                   : 
ORDERBY              : 
OR_EQUAL             : 120
PAR_DER              : 69 83 87 88 89 132 154 155 166 179 199 202 203 204 207 208 208 209 226 227 228 229 230 233 234 244 245 246
PAR_IZQ              : 69 83 87 88 89 132 154 155 166 179 199 202 203 204 207 208 208 209 226 227 228 229 230 233 234 244 245 246
POP                  : 209
PRIVATE              : 38
PROTECTED            : 39
PUBLIC               : 40
PUNTO                : 202 207 208 209
PUSH                 : 207 208
QUEUE                : 88 146
REF                  : 94 95 139 140 141
RESTA                : 51
RETURN               : 
RIGHTSHIFT_EQUAL     : 123
SHIFT_MAYOR          : 
SHIFT_MENOR          : 
SIMPLE_AND           : 
SIMPLE_OR            : 
STACK                : 87 147 204 204
STRING               : 11 62 62 63 64 226 229
STRING_TYPE          : 24 30
STRUCT               : 
SUMA                 : 50 62 63 64 65
SWITCH               : 166
THIS                 : 
TO_UPPER             : 
TYPEOF               : 
VAR                  : 
VOID                 : 18 233 234
WHEN                 : 
WHERE                : 
WHILE                : 154 155
error                : 

Nonterminals, with rules where they appear

add_lista            : 48 201
add_queue            : 4
add_stack            : 35 36
asignacion           : 156 161 171 175 237 240
asignacionClase      : 73
asignacionCompuesta  : 72
asignacionCompuesta_Logic : 96
asignacionCompuesta_Null : 98
asignacionCompuesta_Number : 97
asignacionCompuesta_Shift : 99
asignacionEstructuraD : 74
asignacionIndex      : 76
asignacionList       : 86 111
asignacionNull       : 75
asignacionPila       : 84 109
asignacionQueue      : 85 110
asignacionRef        : 77 139 140 141
asignacionSimple     : 71 131
body                 : 179 233 0
bodyF                : 234 240 241 242
body_case            : 167 169 175 176 177 178
body_while           : 154 155 161 162 163 164 165
casos                : 166 169 170
cast_float_int       : 49
cast_float_to_int    : 5 55
comparacion          : 173 178
declaracion          : 157 162 172 176 235 236 238 241
declaracionAsignacion : 126
declaracionClase     : 127 132 133 134
declaracionEstructuraD : 125 138 141
declaracionList      : 142
declaracionNull      : 128 135 136 137
declaracionPila      : 144
declaracionQueue     : 143
empty                : 
estructura_control   : 
estructura_datos     : 
expresion            : 79 108 136 252
expresion_condicional : 101 154 155 211
expresion_operacion_aritmetica : 69 105 210 212 213
factor               : 66 67
for                  : 151
forCondicion         : 179
forInicializador     : 179
forIterador          : 179
ftipo                : 
funcion              : 
funcion_tipo_tres    : 232
funcion_tipo_uno     : 231
funciones_estructura_datos : 
funciones_estructura_datos_lista : 
index                : 81 90 90 91 95
lambdaArg            : 243
lambdaCuerpo         : 243
lambdaParametrosDos  : 246 251
lambdaParametrosUno  : 245 249
lambda_exp           : 
lista                : 197
lista_add            : 47
modificador_acceso   : 233 234
numero               : 9 68 104 213 214 214 215 216 219 219 221 222
operacion_string     : 227
operacionesStack     : 25
operadorForIteracion : 180
operador_aritmentico : 66 212 213 214 215 216 217
operador_condicional : 183 219 220 221 222
operador_realacional : 148
operadoresCompuestosLogic : 100 101 102 103
operadoresCompuestosNumber : 104 105 106
operadoresCompuestosShift : 112 113
parametrosF          : 234 236
pila                 : 198
pop_stack            : 35 37
salida_dos           : 224 254
salida_entrada       : 158 163 174 177 239 242
salida_tres          : 80 225
salida_uno           : 223 253
semantica_casting_float_to_int : 2
semantica_lista_add  : 1
semantica_stack      : 3
stack_pop            : 27 206
stack_push           : 26 205
switch_case          : 150
termino              : 66 212 218
tipoDatoForInicializador : 188
tipoLista            : 87 88 89 145 146 199 199
to_upper_case        : 6
valor                : 78 91 107 135 148 148 166 167 168 169 170 202 207
valorForCondicion    : 183
valorForInicializador : 188 189
valor_tipo           : 17 124 129 131 139 248 249
valor_tipo_inicializador : 147 200 204 204
while                : 149
while_do             : 153
while_normal         : 152

Parsing method: LALR

state 0

    (0) S' -> . body
    (1) body -> . semantica_lista_add
    (2) body -> . semantica_casting_float_to_int
    (3) body -> . semantica_stack
    (4) body -> . add_queue END_OF_LINE
    (5) body -> . cast_float_to_int END_OF_LINE
    (6) body -> . to_upper_case END_OF_LINE
    (47) semantica_lista_add -> . lista_add END_OF_LINE
    (49) semantica_casting_float_to_int -> . FLOAT_TYPE IDENTIFICADOR IGUAL FLOAT END_OF_LINE cast_float_int
    (25) semantica_stack -> . operacionesStack
    (7) add_queue -> . CHAR_TYPE
    (203) cast_float_to_int -> . INT_TYPE IDENTIFICADOR IGUAL PAR_IZQ INT_TYPE PAR_DER IDENTIFICADOR END_OF_LINE
    (13) to_upper_case -> . CHAR_TYPE
    (48) lista_add -> . add_lista
    (35) operacionesStack -> . add_stack END_OF_LINE pop_stack END_OF_LINE
    (36) operacionesStack -> . add_stack END_OF_LINE
    (37) operacionesStack -> . pop_stack END_OF_LINE
    (202) add_lista -> . IDENTIFICADOR PUNTO ADD PAR_IZQ valor PAR_DER
    (26) add_stack -> . stack_push
    (27) pop_stack -> . stack_pop
    (207) stack_push -> . IDENTIFICADOR PUNTO PUSH PAR_IZQ valor PAR_DER
    (208) stack_push -> . IDENTIFICADOR PUNTO PUSH PAR_IZQ NEW IDENTIFICADOR PAR_IZQ PAR_DER PAR_DER
    (209) stack_pop -> . IDENTIFICADOR PUNTO POP PAR_IZQ PAR_DER

    FLOAT_TYPE      shift and go to state 9
    CHAR_TYPE       shift and go to state 12
    INT_TYPE        shift and go to state 13
    IDENTIFICADOR   shift and go to state 10

    body                           shift and go to state 1
    semantica_lista_add            shift and go to state 2
    semantica_casting_float_to_int shift and go to state 3
    semantica_stack                shift and go to state 4
    add_queue                      shift and go to state 5
    cast_float_to_int              shift and go to state 6
    to_upper_case                  shift and go to state 7
    lista_add                      shift and go to state 8
    operacionesStack               shift and go to state 11
    add_lista                      shift and go to state 14
    add_stack                      shift and go to state 15
    pop_stack                      shift and go to state 16
    stack_push                     shift and go to state 17
    stack_pop                      shift and go to state 18

state 1

    (0) S' -> body .



state 2

    (1) body -> semantica_lista_add .

    $end            reduce using rule 1 (body -> semantica_lista_add .)


state 3

    (2) body -> semantica_casting_float_to_int .

    $end            reduce using rule 2 (body -> semantica_casting_float_to_int .)


state 4

    (3) body -> semantica_stack .

    $end            reduce using rule 3 (body -> semantica_stack .)


state 5

    (4) body -> add_queue . END_OF_LINE

    END_OF_LINE     shift and go to state 19


state 6

    (5) body -> cast_float_to_int . END_OF_LINE

    END_OF_LINE     shift and go to state 20


state 7

    (6) body -> to_upper_case . END_OF_LINE

    END_OF_LINE     shift and go to state 21


state 8

    (47) semantica_lista_add -> lista_add . END_OF_LINE

    END_OF_LINE     shift and go to state 22


state 9

    (49) semantica_casting_float_to_int -> FLOAT_TYPE . IDENTIFICADOR IGUAL FLOAT END_OF_LINE cast_float_int

    IDENTIFICADOR   shift and go to state 23


state 10

    (202) add_lista -> IDENTIFICADOR . PUNTO ADD PAR_IZQ valor PAR_DER
    (207) stack_push -> IDENTIFICADOR . PUNTO PUSH PAR_IZQ valor PAR_DER
    (208) stack_push -> IDENTIFICADOR . PUNTO PUSH PAR_IZQ NEW IDENTIFICADOR PAR_IZQ PAR_DER PAR_DER
    (209) stack_pop -> IDENTIFICADOR . PUNTO POP PAR_IZQ PAR_DER

    PUNTO           shift and go to state 24


state 11

    (25) semantica_stack -> operacionesStack .

    $end            reduce using rule 25 (semantica_stack -> operacionesStack .)


state 12

    (7) add_queue -> CHAR_TYPE .
    (13) to_upper_case -> CHAR_TYPE .

  ! reduce/reduce conflict for END_OF_LINE resolved using rule 7 (add_queue -> CHAR_TYPE .)
    END_OF_LINE     reduce using rule 7 (add_queue -> CHAR_TYPE .)

  ! END_OF_LINE     [ reduce using rule 13 (to_upper_case -> CHAR_TYPE .) ]


state 13

    (203) cast_float_to_int -> INT_TYPE . IDENTIFICADOR IGUAL PAR_IZQ INT_TYPE PAR_DER IDENTIFICADOR END_OF_LINE

    IDENTIFICADOR   shift and go to state 25


state 14

    (48) lista_add -> add_lista .

    END_OF_LINE     reduce using rule 48 (lista_add -> add_lista .)


state 15

    (35) operacionesStack -> add_stack . END_OF_LINE pop_stack END_OF_LINE
    (36) operacionesStack -> add_stack . END_OF_LINE

    END_OF_LINE     shift and go to state 26


state 16

    (37) operacionesStack -> pop_stack . END_OF_LINE

    END_OF_LINE     shift and go to state 27


state 17

    (26) add_stack -> stack_push .

    END_OF_LINE     reduce using rule 26 (add_stack -> stack_push .)


state 18

    (27) pop_stack -> stack_pop .

    END_OF_LINE     reduce using rule 27 (pop_stack -> stack_pop .)


state 19

    (4) body -> add_queue END_OF_LINE .

    $end            reduce using rule 4 (body -> add_queue END_OF_LINE .)


state 20

    (5) body -> cast_float_to_int END_OF_LINE .

    $end            reduce using rule 5 (body -> cast_float_to_int END_OF_LINE .)


state 21

    (6) body -> to_upper_case END_OF_LINE .

    $end            reduce using rule 6 (body -> to_upper_case END_OF_LINE .)


state 22

    (47) semantica_lista_add -> lista_add END_OF_LINE .

    $end            reduce using rule 47 (semantica_lista_add -> lista_add END_OF_LINE .)


state 23

    (49) semantica_casting_float_to_int -> FLOAT_TYPE IDENTIFICADOR . IGUAL FLOAT END_OF_LINE cast_float_int

    IGUAL           shift and go to state 28


state 24

    (202) add_lista -> IDENTIFICADOR PUNTO . ADD PAR_IZQ valor PAR_DER
    (207) stack_push -> IDENTIFICADOR PUNTO . PUSH PAR_IZQ valor PAR_DER
    (208) stack_push -> IDENTIFICADOR PUNTO . PUSH PAR_IZQ NEW IDENTIFICADOR PAR_IZQ PAR_DER PAR_DER
    (209) stack_pop -> IDENTIFICADOR PUNTO . POP PAR_IZQ PAR_DER

    ADD             shift and go to state 29
    PUSH            shift and go to state 30
    POP             shift and go to state 31


state 25

    (203) cast_float_to_int -> INT_TYPE IDENTIFICADOR . IGUAL PAR_IZQ INT_TYPE PAR_DER IDENTIFICADOR END_OF_LINE

    IGUAL           shift and go to state 32


state 26

    (35) operacionesStack -> add_stack END_OF_LINE . pop_stack END_OF_LINE
    (36) operacionesStack -> add_stack END_OF_LINE .
    (27) pop_stack -> . stack_pop
    (209) stack_pop -> . IDENTIFICADOR PUNTO POP PAR_IZQ PAR_DER

    $end            reduce using rule 36 (operacionesStack -> add_stack END_OF_LINE .)
    IDENTIFICADOR   shift and go to state 34

    pop_stack                      shift and go to state 33
    stack_pop                      shift and go to state 18

state 27

    (37) operacionesStack -> pop_stack END_OF_LINE .

    $end            reduce using rule 37 (operacionesStack -> pop_stack END_OF_LINE .)


state 28

    (49) semantica_casting_float_to_int -> FLOAT_TYPE IDENTIFICADOR IGUAL . FLOAT END_OF_LINE cast_float_int

    FLOAT           shift and go to state 35


state 29

    (202) add_lista -> IDENTIFICADOR PUNTO ADD . PAR_IZQ valor PAR_DER

    PAR_IZQ         shift and go to state 36


state 30

    (207) stack_push -> IDENTIFICADOR PUNTO PUSH . PAR_IZQ valor PAR_DER
    (208) stack_push -> IDENTIFICADOR PUNTO PUSH . PAR_IZQ NEW IDENTIFICADOR PAR_IZQ PAR_DER PAR_DER

    PAR_IZQ         shift and go to state 37


state 31

    (209) stack_pop -> IDENTIFICADOR PUNTO POP . PAR_IZQ PAR_DER

    PAR_IZQ         shift and go to state 38


state 32

    (203) cast_float_to_int -> INT_TYPE IDENTIFICADOR IGUAL . PAR_IZQ INT_TYPE PAR_DER IDENTIFICADOR END_OF_LINE

    PAR_IZQ         shift and go to state 39


state 33

    (35) operacionesStack -> add_stack END_OF_LINE pop_stack . END_OF_LINE

    END_OF_LINE     shift and go to state 40


state 34

    (209) stack_pop -> IDENTIFICADOR . PUNTO POP PAR_IZQ PAR_DER

    PUNTO           shift and go to state 41


state 35

    (49) semantica_casting_float_to_int -> FLOAT_TYPE IDENTIFICADOR IGUAL FLOAT . END_OF_LINE cast_float_int

    END_OF_LINE     shift and go to state 42


state 36

    (202) add_lista -> IDENTIFICADOR PUNTO ADD PAR_IZQ . valor PAR_DER
    (8) valor -> . CHAR
    (9) valor -> . numero
    (10) valor -> . BOOL
    (11) valor -> . STRING
    (12) valor -> . IDENTIFICADOR
    (14) numero -> . FLOAT
    (15) numero -> . DOUBLE
    (16) numero -> . INT

    CHAR            shift and go to state 45
    BOOL            shift and go to state 47
    STRING          shift and go to state 48
    IDENTIFICADOR   shift and go to state 43
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    INT             shift and go to state 51

    valor                          shift and go to state 44
    numero                         shift and go to state 46

state 37

    (207) stack_push -> IDENTIFICADOR PUNTO PUSH PAR_IZQ . valor PAR_DER
    (208) stack_push -> IDENTIFICADOR PUNTO PUSH PAR_IZQ . NEW IDENTIFICADOR PAR_IZQ PAR_DER PAR_DER
    (8) valor -> . CHAR
    (9) valor -> . numero
    (10) valor -> . BOOL
    (11) valor -> . STRING
    (12) valor -> . IDENTIFICADOR
    (14) numero -> . FLOAT
    (15) numero -> . DOUBLE
    (16) numero -> . INT

    NEW             shift and go to state 53
    CHAR            shift and go to state 45
    BOOL            shift and go to state 47
    STRING          shift and go to state 48
    IDENTIFICADOR   shift and go to state 43
    FLOAT           shift and go to state 49
    DOUBLE          shift and go to state 50
    INT             shift and go to state 51

    valor                          shift and go to state 52
    numero                         shift and go to state 46

state 38

    (209) stack_pop -> IDENTIFICADOR PUNTO POP PAR_IZQ . PAR_DER

    PAR_DER         shift and go to state 54


state 39

    (203) cast_float_to_int -> INT_TYPE IDENTIFICADOR IGUAL PAR_IZQ . INT_TYPE PAR_DER IDENTIFICADOR END_OF_LINE

    INT_TYPE        shift and go to state 55


state 40

    (35) operacionesStack -> add_stack END_OF_LINE pop_stack END_OF_LINE .

    $end            reduce using rule 35 (operacionesStack -> add_stack END_OF_LINE pop_stack END_OF_LINE .)


state 41

    (209) stack_pop -> IDENTIFICADOR PUNTO . POP PAR_IZQ PAR_DER

    POP             shift and go to state 31


state 42

    (49) semantica_casting_float_to_int -> FLOAT_TYPE IDENTIFICADOR IGUAL FLOAT END_OF_LINE . cast_float_int
    (55) cast_float_int -> . cast_float_to_int
    (203) cast_float_to_int -> . INT_TYPE IDENTIFICADOR IGUAL PAR_IZQ INT_TYPE PAR_DER IDENTIFICADOR END_OF_LINE

    INT_TYPE        shift and go to state 13

    cast_float_int                 shift and go to state 56
    cast_float_to_int              shift and go to state 57

state 43

    (12) valor -> IDENTIFICADOR .

    PAR_DER         reduce using rule 12 (valor -> IDENTIFICADOR .)


state 44

    (202) add_lista -> IDENTIFICADOR PUNTO ADD PAR_IZQ valor . PAR_DER

    PAR_DER         shift and go to state 58


state 45

    (8) valor -> CHAR .

    PAR_DER         reduce using rule 8 (valor -> CHAR .)


state 46

    (9) valor -> numero .

    PAR_DER         reduce using rule 9 (valor -> numero .)


state 47

    (10) valor -> BOOL .

    PAR_DER         reduce using rule 10 (valor -> BOOL .)


state 48

    (11) valor -> STRING .

    PAR_DER         reduce using rule 11 (valor -> STRING .)


state 49

    (14) numero -> FLOAT .

    PAR_DER         reduce using rule 14 (numero -> FLOAT .)


state 50

    (15) numero -> DOUBLE .

    PAR_DER         reduce using rule 15 (numero -> DOUBLE .)


state 51

    (16) numero -> INT .

    PAR_DER         reduce using rule 16 (numero -> INT .)


state 52

    (207) stack_push -> IDENTIFICADOR PUNTO PUSH PAR_IZQ valor . PAR_DER

    PAR_DER         shift and go to state 59


state 53

    (208) stack_push -> IDENTIFICADOR PUNTO PUSH PAR_IZQ NEW . IDENTIFICADOR PAR_IZQ PAR_DER PAR_DER

    IDENTIFICADOR   shift and go to state 60


state 54

    (209) stack_pop -> IDENTIFICADOR PUNTO POP PAR_IZQ PAR_DER .

    END_OF_LINE     reduce using rule 209 (stack_pop -> IDENTIFICADOR PUNTO POP PAR_IZQ PAR_DER .)


state 55

    (203) cast_float_to_int -> INT_TYPE IDENTIFICADOR IGUAL PAR_IZQ INT_TYPE . PAR_DER IDENTIFICADOR END_OF_LINE

    PAR_DER         shift and go to state 61


state 56

    (49) semantica_casting_float_to_int -> FLOAT_TYPE IDENTIFICADOR IGUAL FLOAT END_OF_LINE cast_float_int .

    $end            reduce using rule 49 (semantica_casting_float_to_int -> FLOAT_TYPE IDENTIFICADOR IGUAL FLOAT END_OF_LINE cast_float_int .)


state 57

    (55) cast_float_int -> cast_float_to_int .

    $end            reduce using rule 55 (cast_float_int -> cast_float_to_int .)


state 58

    (202) add_lista -> IDENTIFICADOR PUNTO ADD PAR_IZQ valor PAR_DER .

    END_OF_LINE     reduce using rule 202 (add_lista -> IDENTIFICADOR PUNTO ADD PAR_IZQ valor PAR_DER .)


state 59

    (207) stack_push -> IDENTIFICADOR PUNTO PUSH PAR_IZQ valor PAR_DER .

    END_OF_LINE     reduce using rule 207 (stack_push -> IDENTIFICADOR PUNTO PUSH PAR_IZQ valor PAR_DER .)


state 60

    (208) stack_push -> IDENTIFICADOR PUNTO PUSH PAR_IZQ NEW IDENTIFICADOR . PAR_IZQ PAR_DER PAR_DER

    PAR_IZQ         shift and go to state 62


state 61

    (203) cast_float_to_int -> INT_TYPE IDENTIFICADOR IGUAL PAR_IZQ INT_TYPE PAR_DER . IDENTIFICADOR END_OF_LINE

    IDENTIFICADOR   shift and go to state 63


state 62

    (208) stack_push -> IDENTIFICADOR PUNTO PUSH PAR_IZQ NEW IDENTIFICADOR PAR_IZQ . PAR_DER PAR_DER

    PAR_DER         shift and go to state 64


state 63

    (203) cast_float_to_int -> INT_TYPE IDENTIFICADOR IGUAL PAR_IZQ INT_TYPE PAR_DER IDENTIFICADOR . END_OF_LINE

    END_OF_LINE     shift and go to state 65


state 64

    (208) stack_push -> IDENTIFICADOR PUNTO PUSH PAR_IZQ NEW IDENTIFICADOR PAR_IZQ PAR_DER . PAR_DER

    PAR_DER         shift and go to state 66


state 65

    (203) cast_float_to_int -> INT_TYPE IDENTIFICADOR IGUAL PAR_IZQ INT_TYPE PAR_DER IDENTIFICADOR END_OF_LINE .

    END_OF_LINE     reduce using rule 203 (cast_float_to_int -> INT_TYPE IDENTIFICADOR IGUAL PAR_IZQ INT_TYPE PAR_DER IDENTIFICADOR END_OF_LINE .)
    $end            reduce using rule 203 (cast_float_to_int -> INT_TYPE IDENTIFICADOR IGUAL PAR_IZQ INT_TYPE PAR_DER IDENTIFICADOR END_OF_LINE .)


state 66

    (208) stack_push -> IDENTIFICADOR PUNTO PUSH PAR_IZQ NEW IDENTIFICADOR PAR_IZQ PAR_DER PAR_DER .

    END_OF_LINE     reduce using rule 208 (stack_push -> IDENTIFICADOR PUNTO PUSH PAR_IZQ NEW IDENTIFICADOR PAR_IZQ PAR_DER PAR_DER .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 12 resolved using rule (add_queue -> CHAR_TYPE)
WARNING: rejected rule (to_upper_case -> CHAR_TYPE) in state 12
WARNING: Rule (to_upper_case -> CHAR_TYPE) is never reduced
